{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/auth/core/create-login-message.ts", "../../node_modules/thirdweb/src/auth/core/sign-login-payload.ts"],
  "sourcesContent": ["import type { LoginPayload } from \"./types.js\";\n\n/**\n * Create an EIP-4361 & CAIP-122 compliant message to sign based on the login payload\n * @param payload - The login payload containing the necessary information.\n * @returns The generated login message.\n * @internal\n */\nexport function createLoginMessage(payload: LoginPayload): string {\n  const typeField = \"Ethereum\";\n  const header = `${payload.domain} wants you to sign in with your ${typeField} account:`;\n  let prefix = [header, payload.address].join(\"\\n\");\n  prefix = [prefix, payload.statement].join(\"\\n\\n\");\n  if (payload.statement) {\n    prefix += \"\\n\";\n  }\n\n  const suffixArray = [];\n  if (payload.uri) {\n    const uriField = `URI: ${payload.uri}`;\n    suffixArray.push(uriField);\n  }\n\n  const versionField = `Version: ${payload.version}`;\n  suffixArray.push(versionField);\n\n  if (payload.chain_id) {\n    const chainField = `Chain ID: ${payload.chain_id}` || \"1\";\n    suffixArray.push(chainField);\n  }\n\n  const nonceField = `Nonce: ${payload.nonce}`;\n  suffixArray.push(nonceField);\n\n  const issuedAtField = `Issued At: ${payload.issued_at}`;\n  suffixArray.push(issuedAtField);\n\n  const expiryField = `Expiration Time: ${payload.expiration_time}`;\n  suffixArray.push(expiryField);\n\n  if (payload.invalid_before) {\n    const invalidBeforeField = `Not Before: ${payload.invalid_before}`;\n    suffixArray.push(invalidBeforeField);\n  }\n\n  if (payload.resources) {\n    suffixArray.push(\n      [\"Resources:\", ...payload.resources.map((x) => `- ${x}`)].join(\"\\n\"),\n    );\n  }\n\n  const suffix = suffixArray.join(\"\\n\");\n  return [prefix, suffix].join(\"\\n\");\n}\n", "import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport { createLoginMessage } from \"./create-login-message.js\";\nimport type { LoginPayload } from \"./types.js\";\n\n/**\n * @auth\n */\nexport type SignLoginPayloadParams = {\n  payload: LoginPayload;\n  account: Account;\n};\n\n/**\n * Signs the login payload using the provided account.\n * @param options - The options for signing the login payload.\n * @returns An object containing the signature and the payload.\n * @example\n * ```ts\n * import { signLoginPayload } from 'thirdweb/auth';\n *\n * const { signature, payload } = await signLoginPayload({\n *  payload: loginPayload,\n *  account: account,\n * });\n * ```\n * @auth\n */\nexport async function signLoginPayload(options: SignLoginPayloadParams) {\n  const { payload, account } = options;\n  const signature = await account.signMessage({\n    message: createLoginMessage(payload),\n  });\n  return {\n    signature,\n    payload,\n  };\n}\n"],
  "mappings": ";AAQM,SAAU,mBAAmB,SAAqB;AACtD,QAAM,YAAY;AAClB,QAAM,SAAS,GAAG,QAAQ,MAAM,mCAAmC,SAAS;AAC5E,MAAI,SAAS,CAAC,QAAQ,QAAQ,OAAO,EAAE,KAAK,IAAI;AAChD,WAAS,CAAC,QAAQ,QAAQ,SAAS,EAAE,KAAK,MAAM;AAChD,MAAI,QAAQ,WAAW;AACrB,cAAU;EACZ;AAEA,QAAM,cAAc,CAAA;AACpB,MAAI,QAAQ,KAAK;AACf,UAAM,WAAW,QAAQ,QAAQ,GAAG;AACpC,gBAAY,KAAK,QAAQ;EAC3B;AAEA,QAAM,eAAe,YAAY,QAAQ,OAAO;AAChD,cAAY,KAAK,YAAY;AAE7B,MAAI,QAAQ,UAAU;AACpB,UAAM,aAAa,aAAa,QAAQ,QAAQ,MAAM;AACtD,gBAAY,KAAK,UAAU;EAC7B;AAEA,QAAM,aAAa,UAAU,QAAQ,KAAK;AAC1C,cAAY,KAAK,UAAU;AAE3B,QAAM,gBAAgB,cAAc,QAAQ,SAAS;AACrD,cAAY,KAAK,aAAa;AAE9B,QAAM,cAAc,oBAAoB,QAAQ,eAAe;AAC/D,cAAY,KAAK,WAAW;AAE5B,MAAI,QAAQ,gBAAgB;AAC1B,UAAM,qBAAqB,eAAe,QAAQ,cAAc;AAChE,gBAAY,KAAK,kBAAkB;EACrC;AAEA,MAAI,QAAQ,WAAW;AACrB,gBAAY,KACV,CAAC,cAAc,GAAG,QAAQ,UAAU,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC;EAExE;AAEA,QAAM,SAAS,YAAY,KAAK,IAAI;AACpC,SAAO,CAAC,QAAQ,MAAM,EAAE,KAAK,IAAI;AACnC;;;AC1BA,eAAsB,iBAAiB,SAA+B;AACpE,QAAM,EAAE,SAAS,QAAO,IAAK;AAC7B,QAAM,YAAY,MAAM,QAAQ,YAAY;IAC1C,SAAS,mBAAmB,OAAO;GACpC;AACD,SAAO;IACL;IACA;;AAEJ;",
  "names": []
}
