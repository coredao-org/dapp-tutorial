{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/wallets/smart/smart-wallet.ts"],
  "sourcesContent": ["import { trackConnect } from \"../../analytics/track/connect.js\";\nimport type { Chain } from \"../../chains/types.js\";\nimport { getCachedChainIfExists } from \"../../chains/utils.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { isZkSyncChain } from \"../../utils/any-evm/zksync/isZkSyncChain.js\";\nimport { isContractDeployed } from \"../../utils/bytecode/is-contract-deployed.js\";\nimport type { Account, Wallet } from \"../interfaces/wallet.js\";\nimport { createWalletEmitter } from \"../wallet-emitter.js\";\nimport type {\n  CreateWalletArgs,\n  WalletConnectionOption,\n} from \"../wallet-types.js\";\nimport { getDefaultAccountFactory } from \"./lib/constants.js\";\n\n/**\n * Creates a ERC4337 smart wallet based on a admin account.\n *\n * Smart wallets are smart contract wallets that enable multiple benefits for users:\n *\n * - Sponsor gas fees for transactions\n * - Multiple owners\n * - Session keys\n * - Batch transactions\n * - Predictable addresses\n * - Programmable features\n *\n * [Learn more about account abstraction](https://portal.thirdweb.com/connect/account-abstraction/how-it-works)\n *\n * @param createOptions - The options for creating the wallet.\n * Refer to [SmartWalletCreationOptions](https://portal.thirdweb.com/references/typescript/v5/SmartWalletCreationOptions) for more details.\n * @returns The created smart wallet.\n * @example\n *\n * ## Connect to a smart wallet\n *\n * To connect to a smart wallet, you need to provide an admin account as the `personalAccount` option.\n *\n * Any wallet can be used as an admin account, including an in-app wallets.\n *\n * The `sponsorGas` option is used to enable sponsored gas for transactions automatically.\n *\n * ```ts\n * import { smartWallet, inAppWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n * });\n *\n * // any wallet can be used as an admin account\n * // in this example we use an in-app wallet\n * const adminWallet = inAppWallet();\n * const personalAccount = await adminWallet.connect({\n *   client,\n *   chain: sepolia,\n *   strategy: \"google\",\n * });\n *\n * const smartAccount = await wallet.connect({\n *   client,\n *   personalAccount, // pass the admin account\n * });\n *\n * // sending sponsored transactions with the smartAccount\n * await sendTransaction({\n *   account: smartAccount,\n *   transaction,\n * });\n * ```\n *\n * ## Using a custom account factory\n *\n * You can pass a custom account factory to the `smartWallet` function to use a your own account factory.\n *\n * ```ts\n * import { smartWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n *  factoryAddress: \"0x...\", // custom factory address\n * });\n *\n * ## Using v0.7 Entrypoint\n *\n * Both v0.6 (default) and v0.7 ERC4337 Entrypoints are supported. To use the v0.7 Entrypoint, simply pass in a compatible account factory.\n *\n * You can use the predeployed `DEFAULT_ACCOUNT_FACTORY_V0_7` or deploy your own [AccountFactory  v0.7](https://thirdweb.com/thirdweb.eth/AccountFactory_0_7).\n *\n * ```ts\n * import { smartWallet, DEFAULT_ACCOUNT_FACTORY_V0_7 } from \"thirdweb/wallets/smart\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n *  factoryAddress: DEFAULT_ACCOUNT_FACTORY_V0_7, // 0.7 factory address\n * });\n * ```\n *\n * ## Configuring the smart wallet\n *\n * You can pass options to the `smartWallet` function to configure the smart wallet.\n *\n * ```ts\n * import { smartWallet } from \"thirdweb/wallets\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const wallet = smartWallet({\n *  chain: sepolia,\n *  sponsorGas: true, // enable sponsored transactions\n *  factoryAddress: \"0x...\", // custom factory address\n *  overrides: {\n *    accountAddress: \"0x...\", // override account address\n *    accountSalt: \"0x...\", // override account salt\n *    entrypointAddress: \"0x...\", // override entrypoint address\n *    erc20Paymaster: { ... }, // enable erc20 paymaster\n *    bundlerUrl: \"https://...\", // override bundler url\n *    paymaster: (userOp) => { ... }, // override paymaster\n *    ...\n *  }\n * });\n * ```\n *\n * Refer to [SmartWalletOptions](https://portal.thirdweb.com/references/typescript/v5/SmartWalletOptions) for more details.\n *\n * @wallet\n */\nexport function smartWallet(\n  createOptions: CreateWalletArgs<\"smart\">[1],\n): Wallet<\"smart\"> {\n  const emitter = createWalletEmitter<\"smart\">();\n  let account: Account | undefined = undefined;\n  let adminAccount: Account | undefined = undefined;\n  let chain: Chain | undefined = undefined;\n  let lastConnectOptions: WalletConnectionOption<\"smart\"> | undefined;\n\n  const _smartWallet: Wallet<\"smart\"> = {\n    id: \"smart\",\n    subscribe: emitter.subscribe,\n    getChain() {\n      if (!chain) {\n        return undefined;\n      }\n\n      chain = getCachedChainIfExists(chain.id) || chain;\n      return chain;\n    },\n    getConfig: () => createOptions,\n    getAccount: () => account,\n    getAdminAccount: () => adminAccount,\n    autoConnect: async (options) => {\n      const { connectSmartWallet } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        _smartWallet,\n        options,\n        createOptions,\n      );\n      // set the states\n      lastConnectOptions = options;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"smart\",\n        walletAddress: account.address,\n        chainId: chain.id,\n      });\n      // return account\n      return account;\n    },\n    connect: async (options) => {\n      const { connectSmartWallet } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        _smartWallet,\n        options,\n        createOptions,\n      );\n      // set the states\n      adminAccount = options.personalAccount;\n      lastConnectOptions = options;\n      account = connectedAccount;\n      chain = connectedChain;\n      trackConnect({\n        client: options.client,\n        walletType: \"smart\",\n        walletAddress: account.address,\n        chainId: chain.id,\n      });\n      // return account\n      emitter.emit(\"accountChanged\", account);\n      return account;\n    },\n    disconnect: async () => {\n      account = undefined;\n      chain = undefined;\n      const { disconnectSmartWallet } = await import(\"./index.js\");\n      await disconnectSmartWallet(_smartWallet);\n      emitter.emit(\"disconnect\", undefined);\n    },\n    switchChain: async (newChain: Chain) => {\n      if (!lastConnectOptions) {\n        throw new Error(\"Cannot switch chain without a previous connection\");\n      }\n      const isZksyncChain = await isZkSyncChain(newChain);\n      if (!isZksyncChain) {\n        // check if factory is deployed\n        const factory = getContract({\n          address:\n            createOptions.factoryAddress ||\n            getDefaultAccountFactory(\n              createOptions.overrides?.entrypointAddress,\n            ),\n          chain: newChain,\n          client: lastConnectOptions.client,\n        });\n        const isDeployed = await isContractDeployed(factory);\n        if (!isDeployed) {\n          throw new Error(\n            `Factory contract not deployed on chain: ${newChain.id}`,\n          );\n        }\n      }\n      const { connectSmartWallet } = await import(\"./index.js\");\n      const [connectedAccount, connectedChain] = await connectSmartWallet(\n        _smartWallet,\n        { ...lastConnectOptions, chain: newChain },\n        createOptions,\n      );\n      // set the states\n      account = connectedAccount;\n      chain = connectedChain;\n      emitter.emit(\"chainChanged\", newChain);\n    },\n  };\n\n  return _smartWallet;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAmIM,SAAU,YACd,eAA2C;AAE3C,QAAM,UAAU,oBAAmB;AACnC,MAAI,UAA+B;AACnC,MAAI,eAAoC;AACxC,MAAI,QAA2B;AAC/B,MAAI;AAEJ,QAAM,eAAgC;IACpC,IAAI;IACJ,WAAW,QAAQ;IACnB,WAAQ;AACN,UAAI,CAAC,OAAO;AACV,eAAO;MACT;AAEA,cAAQ,uBAAuB,MAAM,EAAE,KAAK;AAC5C,aAAO;IACT;IACA,WAAW,MAAM;IACjB,YAAY,MAAM;IAClB,iBAAiB,MAAM;IACvB,aAAa,OAAO,YAAW;AAC7B,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,qBAAY;AACxD,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,cACA,SACA,aAAa;AAGf,2BAAqB;AACrB,gBAAU;AACV,cAAQ;AACR,mBAAa;QACX,QAAQ,QAAQ;QAChB,YAAY;QACZ,eAAe,QAAQ;QACvB,SAAS,MAAM;OAChB;AAED,aAAO;IACT;IACA,SAAS,OAAO,YAAW;AACzB,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,qBAAY;AACxD,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,cACA,SACA,aAAa;AAGf,qBAAe,QAAQ;AACvB,2BAAqB;AACrB,gBAAU;AACV,cAAQ;AACR,mBAAa;QACX,QAAQ,QAAQ;QAChB,YAAY;QACZ,eAAe,QAAQ;QACvB,SAAS,MAAM;OAChB;AAED,cAAQ,KAAK,kBAAkB,OAAO;AACtC,aAAO;IACT;IACA,YAAY,YAAW;AACrB,gBAAU;AACV,cAAQ;AACR,YAAM,EAAE,sBAAqB,IAAK,MAAM,OAAO,qBAAY;AAC3D,YAAM,sBAAsB,YAAY;AACxC,cAAQ,KAAK,cAAc,MAAS;IACtC;IACA,aAAa,OAAO,aAAmB;AA3M3C;AA4MM,UAAI,CAAC,oBAAoB;AACvB,cAAM,IAAI,MAAM,mDAAmD;MACrE;AACA,YAAM,gBAAgB,MAAM,cAAc,QAAQ;AAClD,UAAI,CAAC,eAAe;AAElB,cAAM,UAAU,YAAY;UAC1B,SACE,cAAc,kBACd,0BACE,mBAAc,cAAd,mBAAyB,iBAAiB;UAE9C,OAAO;UACP,QAAQ,mBAAmB;SAC5B;AACD,cAAM,aAAa,MAAM,mBAAmB,OAAO;AACnD,YAAI,CAAC,YAAY;AACf,gBAAM,IAAI,MACR,2CAA2C,SAAS,EAAE,EAAE;QAE5D;MACF;AACA,YAAM,EAAE,mBAAkB,IAAK,MAAM,OAAO,qBAAY;AACxD,YAAM,CAAC,kBAAkB,cAAc,IAAI,MAAM,mBAC/C,cACA,EAAE,GAAG,oBAAoB,OAAO,SAAQ,GACxC,aAAa;AAGf,gBAAU;AACV,cAAQ;AACR,cAAQ,KAAK,gBAAgB,QAAQ;IACvC;;AAGF,SAAO;AACT;",
  "names": []
}
