{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/bigint.ts", "../../node_modules/viem/zksync/constants/number.ts", "../../node_modules/viem/zksync/errors/transaction.ts", "../../node_modules/viem/zksync/utils/isEip712Transaction.ts", "../../node_modules/viem/zksync/utils/assertEip712Transaction.ts", "../../node_modules/viem/zksync/serializers.ts", "../../node_modules/viem/zksync/errors/bytecode.ts", "../../node_modules/viem/zksync/utils/hashBytecode.ts", "../../node_modules/viem/zksync/formatters.ts", "../../node_modules/viem/zksync/utils/getEip712Domain.ts", "../../node_modules/viem/zksync/chainConfig.ts", "../../node_modules/viem/chains/definitions/zksync.ts", "../../node_modules/viem/chains/definitions/zksyncInMemoryNode.ts", "../../node_modules/viem/chains/definitions/zksyncLocalNode.ts", "../../node_modules/viem/chains/definitions/zksyncSepoliaTestnet.ts", "../../node_modules/thirdweb/src/transaction/actions/zksync/getEip721Domain.ts", "../../node_modules/thirdweb/src/transaction/actions/zksync/send-eip712-transaction.ts"],
  "sourcesContent": ["import { uint8ArrayToHex } from \"./encoding/hex.js\";\n\n/**\n * Returns the minimum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The smaller of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * min(1n, 2n)\n * // 1n\n */\nexport function min(a: bigint, b: bigint) {\n  return a < b ? a : b;\n}\n\n/**\n * Returns the maximum of two BigInt values.\n * @param a - The first BigInt value.\n * @param b - The second BigInt value.\n * @returns The larger of the two BigInt values.\n * @utils\n * @example\n * ```ts\n * max(1n, 2n)\n * // 2n\n */\nexport function max(a: bigint, b: bigint) {\n  return a > b ? a : b;\n}\n\n/**\n * Provides error checking on string or number bigint inputs.\n * @param value - A possibly integer-like string, number, or bigint.\n * @returns The bigint representation of the input.\n * @example\n * ```ts\n * toBigInt(\"2\")\n * // 2n\n */\nexport function toBigInt(value: string | number | bigint | Uint8Array): bigint {\n  if (\n    [\"string\", \"number\"].includes(typeof value) &&\n    !Number.isInteger(Number(value))\n  ) {\n    throw new Error(\n      `Expected value to be an integer to convert to a bigint, got ${value} of type ${typeof value}`,\n    );\n  }\n\n  if (value instanceof Uint8Array) {\n    return BigInt(uint8ArrayToHex(value));\n  }\n\n  return BigInt(value);\n}\n\n// replaceBigInts courtesy of ponder.sh:\n// https://github.com/ponder-sh/ponder/blob/bc65b865898b6145e87031314192c59f9e8b621f/packages/utils/src/replaceBigInts.ts\ntype _ReplaceBigInts<\n  arr extends readonly unknown[],\n  type,\n  result extends readonly unknown[] = [],\n> = arr extends [infer first, ...infer rest]\n  ? _ReplaceBigInts<\n      rest,\n      type,\n      readonly [...result, first extends bigint ? type : first]\n    >\n  : result;\n\nexport type ReplaceBigInts<obj, type> = obj extends bigint\n  ? type\n  : obj extends unknown[]\n    ? _ReplaceBigInts<Readonly<obj>, type>\n    : obj extends readonly []\n      ? _ReplaceBigInts<obj, type>\n      : obj extends object\n        ? { [key in keyof obj]: ReplaceBigInts<obj[key], type> }\n        : obj;\n\nexport const replaceBigInts = <const T, const type>(\n  obj: T,\n  replacer: (x: bigint) => type,\n): ReplaceBigInts<T, type> => {\n  if (typeof obj === \"bigint\") return replacer(obj) as ReplaceBigInts<T, type>;\n  if (Array.isArray(obj))\n    return obj.map((x) => replaceBigInts(x, replacer)) as ReplaceBigInts<\n      T,\n      type\n    >;\n  if (obj && typeof obj === \"object\")\n    return Object.fromEntries(\n      Object.entries(obj).map(([k, v]) => [k, replaceBigInts(v, replacer)]),\n    ) as ReplaceBigInts<T, type>;\n  return obj as ReplaceBigInts<T, type>;\n};\n", "import { maxUint16 } from '../../constants/number.js'\n\nexport const gasPerPubdataDefault = 50000n\nexport const maxBytecodeSize = maxUint16 * 32n\n", "import { BaseError } from '../../errors/base.js'\n\nexport type InvalidEip712TransactionErrorType =\n  InvalidEip712TransactionError & {\n    name: 'InvalidEip712TransactionError'\n  }\nexport class InvalidEip712TransactionError extends BaseError {\n  constructor() {\n    super(\n      [\n        'Transaction is not an EIP712 transaction.',\n        '',\n        'Transaction must:',\n        '  - include `type: \"eip712\"`',\n        '  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`',\n      ].join('\\n'),\n      { name: 'InvalidEip712TransactionError' },\n    )\n  }\n}\n", "import type { ExactPartial, OneOf } from '../../types/utils.js'\nimport type {\n  ZksyncTransactionRequest,\n  ZksyncTransactionSerializable,\n} from '../types/transaction.js'\n\nexport function isEIP712Transaction(\n  transaction: ExactPartial<\n    OneOf<ZksyncTransactionRequest | ZksyncTransactionSerializable>\n  >,\n) {\n  if (transaction.type === 'eip712') return true\n  if (\n    ('customSignature' in transaction && transaction.customSignature) ||\n    ('paymaster' in transaction && transaction.paymaster) ||\n    ('paymasterInput' in transaction && transaction.paymasterInput) ||\n    ('gasPerPubdata' in transaction &&\n      typeof transaction.gasPerPubdata === 'bigint') ||\n    ('factoryDeps' in transaction && transaction.factoryDeps)\n  )\n    return true\n  return false\n}\n", "import { InvalidAddressError } from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { InvalidChainIdError } from '../../errors/chain.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../../utils/address/isAddress.js'\nimport { InvalidEip712TransactionError } from '../errors/transaction.js'\nimport type {\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n} from '../types/transaction.js'\nimport { isEIP712Transaction } from './isEip712Transaction.js'\n\nexport function assertEip712Transaction(\n  transaction: ExactPartial<ZksyncTransactionSerializable>,\n) {\n  const { chainId, to, from, paymaster, paymasterInput } =\n    transaction as ZksyncTransactionSerializableEIP712\n\n  if (!isEIP712Transaction(transaction))\n    throw new InvalidEip712TransactionError()\n  if (!chainId || chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (paymaster && !isAddress(paymaster))\n    throw new InvalidAddressError({ address: paymaster })\n  if (paymaster && !paymasterInput) {\n    throw new BaseError(\n      '`paymasterInput` must be provided when `paymaster` is defined',\n    )\n  }\n  if (!paymaster && paymasterInput) {\n    throw new BaseError(\n      '`paymaster` must be provided when `paymasterInput` is defined',\n    )\n  }\n}\n", "import type { Signature } from '../index.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { TransactionSerializable } from '../types/transaction.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js'\nimport { gasPerPubdataDefault } from './constants/number.js'\nimport type {\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n  ZksyncTransactionSerializedEIP712,\n} from './types/transaction.js'\nimport { assertEip712Transaction } from './utils/assertEip712Transaction.js'\nimport { isEIP712Transaction } from './utils/isEip712Transaction.js'\n\nexport function serializeTransaction(\n  transaction: ZksyncTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isEIP712Transaction(transaction))\n    return serializeTransactionEIP712(\n      transaction as ZksyncTransactionSerializableEIP712,\n    )\n  return serializeTransaction_(\n    transaction as TransactionSerializable,\n    signature,\n  )\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\ntype SerializeTransactionEIP712ReturnType = ZksyncTransactionSerializedEIP712\n\nfunction serializeTransactionEIP712(\n  transaction: ZksyncTransactionSerializableEIP712,\n): SerializeTransactionEIP712ReturnType {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  assertEip712Transaction(transaction)\n\n  const serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x0',\n    toHex(chainId),\n    toHex(''),\n    toHex(''),\n    toHex(chainId),\n    from ?? '0x',\n    gasPerPubdata ? toHex(gasPerPubdata) : toHex(gasPerPubdataDefault),\n    factoryDeps ?? [],\n    customSignature ?? '0x', // EIP712 signature\n    paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n  ]\n\n  return concatHex([\n    '0x71',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionEIP712ReturnType\n}\n", "import { BaseError } from '../../errors/base.js'\n\nexport type BytecodeLengthExceedsMaxSizeErrorType =\n  BytecodeLengthExceedsMaxSizeError & {\n    name: 'BytecodeLengthExceedsMaxSizeError'\n  }\n\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor({\n    givenLength,\n    maxBytecodeSize,\n  }: { givenLength: number; maxBytecodeSize: bigint }) {\n    super(\n      `Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthExceedsMaxSizeError' },\n    )\n  }\n}\n\nexport type BytecodeLengthInWordsMustBeOddErrorType =\n  BytecodeLengthInWordsMustBeOddError & {\n    name: 'BytecodeLengthInWordsMustBeOddError'\n  }\n\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor({ givenLengthInWords }: { givenLengthInWords: number }) {\n    super(\n      `Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`,\n      { name: 'BytecodeLengthInWordsMustBeOddError' },\n    )\n  }\n}\n\nexport type BytecodeLengthMustBeDivisibleBy32ErrorType =\n  BytecodeLengthMustBeDivisibleBy32Error & {\n    name: 'BytecodeLengthMustBeDivisibleBy32Error'\n  }\n\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor({ givenLength }: { givenLength: number }) {\n    super(\n      `The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthMustBeDivisibleBy32Error' },\n    )\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { pad } from '../../utils/data/pad.js'\nimport { type ToBytesErrorType, toBytes } from '../../utils/encoding/toBytes.js'\nimport { type Sha256ErrorType, sha256 } from '../../utils/hash/sha256.js'\nimport { maxBytecodeSize } from '../constants/number.js'\nimport {\n  BytecodeLengthExceedsMaxSizeError,\n  type BytecodeLengthExceedsMaxSizeErrorType,\n  BytecodeLengthInWordsMustBeOddError,\n  type BytecodeLengthInWordsMustBeOddErrorType,\n  BytecodeLengthMustBeDivisibleBy32Error,\n  type BytecodeLengthMustBeDivisibleBy32ErrorType,\n} from '../errors/bytecode.js'\n\nexport type HashBytecodeErrorType =\n  | BytecodeLengthExceedsMaxSizeErrorType\n  | BytecodeLengthInWordsMustBeOddErrorType\n  | BytecodeLengthMustBeDivisibleBy32ErrorType\n  | Sha256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashBytecode(bytecode: Hex): Uint8Array {\n  const bytecodeBytes = toBytes(bytecode)\n  if (bytecodeBytes.length % 32 !== 0)\n    throw new BytecodeLengthMustBeDivisibleBy32Error({\n      givenLength: bytecodeBytes.length,\n    })\n\n  if (bytecodeBytes.length > maxBytecodeSize)\n    throw new BytecodeLengthExceedsMaxSizeError({\n      givenLength: bytecodeBytes.length,\n      maxBytecodeSize,\n    })\n\n  const hashStr = sha256(bytecodeBytes)\n  const hash = toBytes(hashStr)\n\n  // Note that the length of the bytecode\n  // should be provided in 32-byte words.\n  const bytecodeLengthInWords = bytecodeBytes.length / 32\n  if (bytecodeLengthInWords % 2 === 0) {\n    throw new BytecodeLengthInWordsMustBeOddError({\n      givenLengthInWords: bytecodeLengthInWords,\n    })\n  }\n\n  const bytecodeLength = toBytes(bytecodeLengthInWords)\n\n  // The bytecode should always take the first 2 bytes of the bytecode hash,\n  // so we pad it from the left in case the length is smaller than 2 bytes.\n  const bytecodeLengthPadded = pad(bytecodeLength, { size: 2 })\n\n  const codeHashVersion = new Uint8Array([1, 0])\n  hash.set(codeHashVersion, 0)\n  hash.set(bytecodeLengthPadded, 2)\n\n  return hash\n}\n", "import type { ChainFormatters } from '../types/chain.js'\nimport { hexToBigInt, hexToNumber } from '../utils/encoding/fromHex.js'\nimport { hexToBytes } from '../utils/encoding/toBytes.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport { formatLog } from '../utils/formatters/log.js'\nimport { defineTransaction } from '../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js'\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js'\nimport { gasPerPubdataDefault } from './constants/number.js'\nimport type { ZksyncBlock, ZksyncRpcBlock } from './types/block.js'\nimport type { ZksyncL2ToL1Log, ZksyncLog } from './types/log.js'\nimport type {\n  ZksyncRpcTransaction,\n  ZksyncRpcTransactionReceipt,\n  ZksyncRpcTransactionRequest,\n  ZksyncTransaction,\n  ZksyncTransactionReceipt,\n  ZksyncTransactionRequest,\n} from './types/transaction.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: ZksyncRpcBlock): ZksyncBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatters.transaction?.format(\n          transaction as ZksyncRpcTransaction,\n        ) as ZksyncTransaction\n        if (formatted.typeHex === '0x71') formatted.type = 'eip712'\n        else if (formatted.typeHex === '0xff') formatted.type = 'priority'\n        return formatted\n      })\n      return {\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTimestamp: args.l1BatchTimestamp\n          ? hexToBigInt(args.l1BatchTimestamp)\n          : null,\n        transactions,\n      } as ZksyncBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: ZksyncRpcTransaction): ZksyncTransaction {\n      const transaction = {} as ZksyncTransaction\n      if (args.type === '0x71') transaction.type = 'eip712'\n      else if (args.type === '0xff') transaction.type = 'priority'\n      return {\n        ...transaction,\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTxIndex: args.l1BatchTxIndex\n          ? hexToBigInt(args.l1BatchTxIndex)\n          : null,\n      } as ZksyncTransaction\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(args: ZksyncRpcTransactionReceipt): ZksyncTransactionReceipt {\n      return {\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTxIndex: args.l1BatchTxIndex\n          ? hexToBigInt(args.l1BatchTxIndex)\n          : null,\n        logs: args.logs.map((log) => {\n          return {\n            ...formatLog(log),\n            l1BatchNumber: log.l1BatchNumber\n              ? hexToBigInt(log.l1BatchNumber)\n              : null,\n            transactionLogIndex: hexToNumber(log.transactionLogIndex),\n            logType: log.logType,\n          }\n        }) as ZksyncLog[],\n        l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {\n          return {\n            blockNumber: hexToBigInt(l2ToL1Log.blockHash),\n            blockHash: l2ToL1Log.blockHash,\n            l1BatchNumber: hexToBigInt(l2ToL1Log.l1BatchNumber),\n            transactionIndex: hexToBigInt(l2ToL1Log.transactionIndex),\n            shardId: hexToBigInt(l2ToL1Log.shardId),\n            isService: l2ToL1Log.isService,\n            sender: l2ToL1Log.sender,\n            key: l2ToL1Log.key,\n            value: l2ToL1Log.value,\n            transactionHash: l2ToL1Log.transactionHash,\n            logIndex: hexToBigInt(l2ToL1Log.logIndex),\n          }\n        }) as ZksyncL2ToL1Log[],\n      } as ZksyncTransactionReceipt\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    exclude: [\n      'customSignature',\n      'factoryDeps',\n      'gasPerPubdata',\n      'paymaster',\n      'paymasterInput',\n    ],\n    format(args: ZksyncTransactionRequest): ZksyncRpcTransactionRequest {\n      if (\n        args.gasPerPubdata ||\n        (args.paymaster && args.paymasterInput) ||\n        args.factoryDeps ||\n        args.customSignature\n      )\n        return {\n          eip712Meta: {\n            ...(args.gasPerPubdata\n              ? { gasPerPubdata: toHex(args.gasPerPubdata) }\n              : { gasPerPubdata: toHex(gasPerPubdataDefault) }),\n            ...(args.paymaster && args.paymasterInput\n              ? {\n                  paymasterParams: {\n                    paymaster: args.paymaster,\n                    paymasterInput: Array.from(hexToBytes(args.paymasterInput)),\n                  },\n                }\n              : {}),\n            ...(args.factoryDeps\n              ? {\n                  factoryDeps: args.factoryDeps.map((dep) =>\n                    Array.from(hexToBytes(dep)),\n                  ),\n                }\n              : {}),\n            ...(args.customSignature\n              ? {\n                  customSignature: Array.from(hexToBytes(args.customSignature)),\n                }\n              : {}),\n          },\n          type: '0x71',\n        } as unknown as ZksyncRpcTransactionRequest\n      return {} as ZksyncRpcTransactionRequest\n    },\n  }),\n} as const satisfies ChainFormatters\n", "import { toHex } from '../../utils/encoding/toHex.js'\nimport { gasPerPubdataDefault } from '../constants/number.js'\nimport type { EIP712DomainFn } from '../types/eip712.js'\nimport type {\n  ZksyncEIP712TransactionSignable,\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n} from '../types/transaction.js'\nimport { assertEip712Transaction } from './assertEip712Transaction.js'\nimport { hashBytecode } from './hashBytecode.js'\n\nexport const getEip712Domain: EIP712DomainFn<\n  ZksyncTransactionSerializable,\n  ZksyncEIP712TransactionSignable\n> = (transaction) => {\n  assertEip712Transaction(transaction)\n\n  const message = transactionToMessage(\n    transaction as ZksyncTransactionSerializableEIP712,\n  )\n\n  return {\n    domain: {\n      name: 'zkSync',\n      version: '2',\n      chainId: transaction.chainId,\n    },\n    types: {\n      Transaction: [\n        { name: 'txType', type: 'uint256' },\n        { name: 'from', type: 'uint256' },\n        { name: 'to', type: 'uint256' },\n        { name: 'gasLimit', type: 'uint256' },\n        { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n        { name: 'maxFeePerGas', type: 'uint256' },\n        { name: 'maxPriorityFeePerGas', type: 'uint256' },\n        { name: 'paymaster', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n        { name: 'factoryDeps', type: 'bytes32[]' },\n        { name: 'paymasterInput', type: 'bytes' },\n      ],\n    },\n    primaryType: 'Transaction',\n    message: message,\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n\nfunction transactionToMessage(\n  transaction: ZksyncTransactionSerializableEIP712,\n): ZksyncEIP712TransactionSignable {\n  const {\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  return {\n    txType: 113n,\n    from: BigInt(from),\n    to: to ? BigInt(to) : 0n,\n    gasLimit: gas ?? 0n,\n    gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n    maxFeePerGas: maxFeePerGas ?? 0n,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n    paymaster: paymaster ? BigInt(paymaster) : 0n,\n    nonce: nonce ? BigInt(nonce) : 0n,\n    value: value ?? 0n,\n    data: data ? data : '0x0',\n    factoryDeps: factoryDeps?.map((dep) => toHex(hashBytecode(dep))) ?? [],\n    paymasterInput: paymasterInput ? paymasterInput : '0x',\n  }\n}\n", "import { formatters } from './formatters.js'\nimport { serializers } from './serializers.js'\nimport { getEip712Domain } from './utils/getEip712Domain.js'\n\nexport const chainConfig = {\n  formatters,\n  serializers,\n  custom: {\n    getEip712Domain,\n  },\n} as const\n", "import { defineChain } from '../../utils/chain/defineChain.js'\nimport { chainConfig } from '../../zksync/chainConfig.js'\n\nexport const zksync = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 324,\n  name: 'ZKsync Era',\n  network: 'zksync-era',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ether',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://mainnet.era.zksync.io'],\n      webSocket: ['wss://mainnet.era.zksync.io/ws'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Etherscan',\n      url: 'https://era.zksync.network/',\n      apiUrl: 'https://api-era.zksync.network/api',\n    },\n    native: {\n      name: 'ZKsync Explorer',\n      url: 'https://explorer.zksync.io/',\n      apiUrl: 'https://block-explorer-api.mainnet.zksync.io/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n    },\n    universalSignatureVerifier: {\n      address: '0xfB688330379976DA81eB64Fe4BF50d7401763B9C',\n      blockCreated: 45659388,\n    },\n  },\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\nimport { chainConfig } from '../../zksync/chainConfig.js'\n\nexport const zksyncInMemoryNode = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 260,\n  name: 'ZKsync InMemory Node',\n  network: 'zksync-in-memory-node',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['http://localhost:8011'],\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\nimport { chainConfig } from '../../zksync/chainConfig.js'\n\nexport const zksyncLocalNode = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 270,\n  name: 'ZKsync CLI Local Node',\n  network: 'zksync-cli-local-node',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['http://localhost:3050'],\n    },\n  },\n  testnet: true,\n})\n", "import { defineChain } from '../../utils/chain/defineChain.js'\nimport { chainConfig } from '../../zksync/chainConfig.js'\n\nexport const zksyncSepoliaTestnet = /*#__PURE__*/ defineChain({\n  ...chainConfig,\n  id: 300,\n  name: 'ZKsync Sepolia Testnet',\n  network: 'zksync-sepolia-testnet',\n  nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: ['https://sepolia.era.zksync.dev'],\n      webSocket: ['wss://sepolia.era.zksync.dev/ws'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'Etherscan',\n      url: 'https://sepolia-era.zksync.network/',\n      apiUrl: 'https://api-sepolia-era.zksync.network/api',\n    },\n    native: {\n      name: 'ZKsync Explorer',\n      url: 'https://sepolia.explorer.zksync.io/',\n      blockExplorerApi: 'https://block-explorer-api.sepolia.zksync.dev/api',\n    },\n  },\n  contracts: {\n    multicall3: {\n      address: '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n    },\n    universalSignatureVerifier: {\n      address: '0xfB688330379976DA81eB64Fe4BF50d7401763B9C',\n      blockCreated: 3855712,\n    },\n  },\n  testnet: true,\n})\n", "import type { TransactionSerializable } from \"viem\";\nimport { hashBytecode } from \"viem/zksync\";\nimport type { Address } from \"../../../utils/address.js\";\nimport { toHex } from \"../../../utils/encoding/hex.js\";\nimport type {\n  EIP712SerializedTransaction,\n  EIP712TransactionOptions,\n} from \"../../prepare-transaction.js\";\n\nexport type EIP721TransactionSerializable = TransactionSerializable & {\n  from: Address;\n} & EIP712TransactionOptions;\nexport const gasPerPubdataDefault = 50000n;\n\nexport const getEip712Domain = (transaction: EIP721TransactionSerializable) => {\n  const message = transactionToMessage(transaction);\n\n  return {\n    domain: {\n      name: \"zkSync\",\n      version: \"2\",\n      chainId: transaction.chainId,\n    },\n    types: {\n      Transaction: [\n        { name: \"txType\", type: \"uint256\" },\n        { name: \"from\", type: \"uint256\" },\n        { name: \"to\", type: \"uint256\" },\n        { name: \"gasLimit\", type: \"uint256\" },\n        { name: \"gasPerPubdataByteLimit\", type: \"uint256\" },\n        { name: \"maxFeePerGas\", type: \"uint256\" },\n        { name: \"maxPriorityFeePerGas\", type: \"uint256\" },\n        { name: \"paymaster\", type: \"uint256\" },\n        { name: \"nonce\", type: \"uint256\" },\n        { name: \"value\", type: \"uint256\" },\n        { name: \"data\", type: \"bytes\" },\n        { name: \"factoryDeps\", type: \"bytes32[]\" },\n        { name: \"paymasterInput\", type: \"bytes\" },\n      ],\n    },\n    primaryType: \"Transaction\",\n    message: message,\n  };\n};\n\nfunction transactionToMessage(\n  transaction: EIP721TransactionSerializable,\n): EIP712SerializedTransaction {\n  const {\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n    factoryDeps,\n  } = transaction;\n\n  return {\n    txType: 113n,\n    from: BigInt(from),\n    to: to ? BigInt(to) : 0n,\n    gasLimit: gas ?? 0n,\n    gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n    maxFeePerGas: maxFeePerGas ?? 0n,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n    paymaster: paymaster ? BigInt(paymaster) : 0n,\n    nonce: nonce ? BigInt(nonce) : 0n,\n    value: value ?? 0n,\n    data: data ? data : \"0x0\",\n    factoryDeps: factoryDeps?.map((dep) => toHex(hashBytecode(dep))) ?? [],\n    paymasterInput: paymasterInput ? paymasterInput : \"0x\",\n  };\n}\n", "import { hexToBytes, toRlp } from \"viem\";\nimport { eth_sendRawTransaction } from \"../../../rpc/actions/eth_sendRawTransaction.js\";\nimport { getRpcClient } from \"../../../rpc/rpc.js\";\nimport { type Address, getAddress } from \"../../../utils/address.js\";\nimport { replaceBigInts, toBigInt } from \"../../../utils/bigint.js\";\nimport { concatHex } from \"../../../utils/encoding/helpers/concat-hex.js\";\nimport { type Hex, toHex } from \"../../../utils/encoding/hex.js\";\nimport { resolvePromisedValue } from \"../../../utils/promise/resolve-promised-value.js\";\nimport type { Account } from \"../../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../../prepare-transaction.js\";\nimport { encode } from \"../encode.js\";\nimport { toSerializableTransaction } from \"../to-serializable-transaction.js\";\nimport type { WaitForReceiptOptions } from \"../wait-for-tx-receipt.js\";\nimport {\n  type EIP721TransactionSerializable,\n  gasPerPubdataDefault,\n  getEip712Domain,\n} from \"./getEip721Domain.js\";\n\ntype SendEip712TransactionOptions = {\n  account: Account;\n  // TODO: update this to `Transaction<\"prepared\">` once the type is available to ensure only prepared transactions are accepted\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n};\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction hash.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction\n * });\n * ```\n */\nexport async function sendEip712Transaction(\n  options: SendEip712TransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  const { account, transaction } = options;\n\n  const eip712Transaction = await populateEip712Transaction(options);\n\n  const hash = await signEip712Transaction({\n    account,\n    eip712Transaction,\n    chainId: transaction.chain.id,\n  });\n\n  const rpc = getRpcClient(transaction);\n  const result = await eth_sendRawTransaction(rpc, hash);\n\n  return {\n    transactionHash: result,\n    chain: transaction.chain,\n    client: transaction.client,\n  };\n}\n\nexport async function signEip712Transaction(options: {\n  account: Account;\n  eip712Transaction: EIP721TransactionSerializable;\n  chainId: number;\n}): Promise<Hex> {\n  const { account, eip712Transaction, chainId } = options;\n  // EIP712 signing of the serialized tx\n  const eip712Domain = getEip712Domain(eip712Transaction);\n\n  const customSignature = await account.signTypedData({\n    // biome-ignore lint/suspicious/noExplicitAny: TODO type properly\n    ...(eip712Domain as any),\n  });\n\n  return serializeTransactionEIP712({\n    ...eip712Transaction,\n    chainId,\n    customSignature,\n  });\n}\n\nexport async function populateEip712Transaction(\n  options: SendEip712TransactionOptions,\n): Promise<EIP721TransactionSerializable> {\n  const { account, transaction } = options;\n  const { gas, maxFeePerGas, maxPriorityFeePerGas, gasPerPubdata } =\n    await getZkGasFees({ transaction, from: getAddress(account.address) });\n\n  // serialize the transaction (with fees, gas, nonce)\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: {\n      ...transaction,\n      gas,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    },\n    from: account.address,\n  });\n\n  return {\n    ...serializableTransaction,\n    ...transaction.eip712,\n    gasPerPubdata,\n    from: account.address as Hex,\n  };\n}\n\nfunction serializeTransactionEIP712(\n  transaction: EIP721TransactionSerializable & {\n    chainId: number;\n    customSignature: Hex;\n  },\n): Hex {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction;\n\n  const serializedTransaction = [\n    nonce ? toHex(nonce) : \"0x\",\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : \"0x\",\n    maxFeePerGas ? toHex(maxFeePerGas) : \"0x\",\n    gas ? toHex(gas) : \"0x\",\n    to ?? \"0x\",\n    value ? toHex(value) : \"0x\",\n    data ?? \"0x0\",\n    toHex(chainId),\n    toHex(\"\"),\n    toHex(\"\"),\n    toHex(chainId),\n    from ?? \"0x\",\n    gasPerPubdata ? toHex(gasPerPubdata) : toHex(gasPerPubdataDefault),\n    factoryDeps ?? [],\n    customSignature ?? \"0x\", // EIP712 signature\n    paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n  ];\n\n  // @ts-ignore - TODO: fix types\n  return concatHex([\"0x71\", toRlp(serializedTransaction)]);\n}\n\nexport async function getZkGasFees(args: {\n  transaction: PreparedTransaction;\n  from?: Address;\n}) {\n  const { transaction, from } = args;\n  let [gas, maxFeePerGas, maxPriorityFeePerGas, eip712] = await Promise.all([\n    resolvePromisedValue(transaction.gas),\n    resolvePromisedValue(transaction.maxFeePerGas),\n    resolvePromisedValue(transaction.maxPriorityFeePerGas),\n    resolvePromisedValue(transaction.eip712),\n  ]);\n  let gasPerPubdata = eip712?.gasPerPubdata;\n  if (!gas || !maxFeePerGas || !maxPriorityFeePerGas) {\n    const rpc = getRpcClient(transaction);\n    const params = await formatTransaction({ transaction, from });\n    const result = (await rpc({\n      // biome-ignore lint/suspicious/noExplicitAny: TODO add to RPC method types\n      method: \"zks_estimateFee\" as any,\n      // biome-ignore lint/suspicious/noExplicitAny: TODO add to RPC method types\n      params: [replaceBigInts(params, toHex)] as any,\n    })) as {\n      gas_limit: string;\n      max_fee_per_gas: string;\n      max_priority_fee_per_gas: string;\n      gas_per_pubdata_limit: string;\n    };\n    gas = toBigInt(result.gas_limit) * 2n; // overestimating to avoid issues when not accounting for paymaster extra gas ( we should really pass the paymaster input above for better accuracy )\n    const baseFee = toBigInt(result.max_fee_per_gas);\n    maxFeePerGas = baseFee * 2n; // bumping the base fee per gas to ensure fast inclusion\n    maxPriorityFeePerGas = toBigInt(result.max_priority_fee_per_gas) || 1n;\n    gasPerPubdata = toBigInt(result.gas_per_pubdata_limit) * 2n; // doubling for fast inclusion;\n    if (gasPerPubdata < 50000n) {\n      // enforce a minimum gas per pubdata limit\n      gasPerPubdata = 50000n;\n    }\n  }\n  return {\n    gas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    gasPerPubdata,\n  };\n}\n\nasync function formatTransaction(args: {\n  transaction: PreparedTransaction;\n  from?: Address;\n}) {\n  const { transaction, from } = args;\n  const [data, to, value, eip712] = await Promise.all([\n    encode(transaction),\n    resolvePromisedValue(transaction.to),\n    resolvePromisedValue(transaction.value),\n    resolvePromisedValue(transaction.eip712),\n  ]);\n  const gasPerPubdata = eip712?.gasPerPubdata;\n  return {\n    from,\n    to,\n    data,\n    value,\n    gasPerPubdata,\n    eip712Meta: {\n      ...eip712,\n      gasPerPubdata: gasPerPubdata || 50000n,\n      factoryDeps: eip712?.factoryDeps?.map((dep) =>\n        Array.from(hexToBytes(dep)),\n      ),\n    },\n    type: \"0x71\",\n  };\n}\n"],
  "mappings": "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",
  "names": ["serializeTransaction", "toHex", "maxBytecodeSize", "_a", "toHex", "getEip712Domain", "toHex", "getEip712Domain", "gasPerPubdataDefault", "getEip712Domain", "transactionToMessage", "sendEip712Transaction", "signEip712Transaction", "getEip712Domain", "serializeTransactionEIP712", "gasPerPubdataDefault", "concatHex"]
}
