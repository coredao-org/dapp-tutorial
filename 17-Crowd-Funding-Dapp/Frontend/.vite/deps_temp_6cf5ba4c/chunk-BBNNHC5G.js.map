{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/encoding/helpers/is-hex.ts", "../../node_modules/thirdweb/src/utils/encoding/hex.ts"],
  "sourcesContent": ["import * as ox__Hex from \"ox/Hex\";\nimport type { Hex } from \"../hex.js\";\n\nexport type IsHexOptions = ox__Hex.assert.Options;\n\n/**\n * Checks if a value is a valid hexadecimal string.\n * @param value - The value to be checked.\n * @param options - Optional configuration for the validation.\n * @returns True if the value is a valid hexadecimal string, false otherwise.\n * @example\n * ```ts\n * import { isHex } from \"thirdweb/utils\";\n * const result = isHex(\"0x1a4\");\n * console.log(result); // true\n * ```\n * @utils\n */\nexport function isHex(\n  value: unknown,\n  options: IsHexOptions = {},\n): value is Hex {\n  return ox__Hex.validate(value, options);\n}\n", "import * as ox__Hex from \"ox/Hex\";\nexport { isHex, type IsHexOptions } from \"./helpers/is-hex.js\";\n\nexport type Hex = ox__Hex.Hex;\n\ntype PadOptions = {\n  dir?: \"left\" | \"right\";\n  size?: number | null;\n};\n\n/**\n * Pads a hexadecimal string with zeros to a specified size.\n * @param hex_ The hexadecimal string to pad.\n * @param options The padding options.\n * @returns The padded hexadecimal string.\n * @throws Error if the resulting padded string exceeds the specified size.\n * @example\n * ```ts\n * import { padHex } from \"thirdweb/utils\";\n * const paddedHex = padHex(\"0x1a4\", { size: 32 });\n * console.log(paddedHex); // \"0x000000000000000000000000000001a4\"\n * ```\n * @utils\n */\nexport function padHex(hex_: Hex, options: PadOptions = {}) {\n  const { dir, size = 32 } = options;\n  if (size === null) {\n    return hex_;\n  }\n  if (dir === \"right\") {\n    return ox__Hex.padRight(hex_, size);\n  }\n  return ox__Hex.padLeft(hex_, size);\n}\n\n//--------------------------------------------------------------------------\n// FROM HEX\n//--------------------------------------------------------------------------\n\nexport type HexToStringOpts = ox__Hex.toString.Options;\n\n/**\n * Converts a hexadecimal string to a UTF-8 string.\n * @param hex The hexadecimal string to convert.\n * @param opts The options for the conversion.\n * @returns The UTF-8 string representation of the hexadecimal string.\n * @example\n * ```ts\n * import { hexToString } from \"thirdweb/utils\";\n * const string = hexToString(\"0x48656c6c6f2c20776f726c6421\");\n * console.log(string); // \"Hello, world!\"\n * ```\n * @utils\n */\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\n  return ox__Hex.toString(hex, opts);\n}\n\nexport type HexToBigIntOpts = ox__Hex.toBigInt.Options;\n\n/**\n * Converts a hexadecimal string to a BigInt.\n * @param hex - The hexadecimal string to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The BigInt representation of the hexadecimal string.\n * @example\n * ```ts\n * import { hexToBigInt } from \"thirdweb/utils\";\n * const bigInt = hexToBigInt(\"0x1a4\");\n * console.log(bigInt); // 420n\n * ```\n * @utils\n */\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\n  return ox__Hex.toBigInt(hex, opts);\n}\n\nexport type HexToNumberOpts = HexToBigIntOpts;\n/**\n * Converts a hexadecimal string to a number.\n * @param hex The hexadecimal string to convert.\n * @param opts Optional options for the conversion.\n * @returns The converted number.\n * @example\n * ```ts\n * import { hexToNumber } from \"thirdweb/utils\";\n * const number = hexToNumber(\"0x1a4\");\n * console.log(number); // 420\n * ```\n * @utils\n */\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\n  return ox__Hex.toNumber(hex, opts);\n}\n\nexport type HexToBoolOpts = ox__Hex.toBoolean.Options;\n\n/**\n * Converts a hexadecimal string to a boolean value.\n * @param hex The hexadecimal string to convert.\n * @param opts Optional options for the conversion.\n * @returns The boolean value corresponding to the hexadecimal string.\n * @throws Error if the hexadecimal string is invalid.\n * @example\n * ```ts\n * import { hexToBool } from \"thirdweb/utils\";\n * const bool = hexToBool(\"0x01\");\n * console.log(bool); // true\n * ```\n * @utils\n */\nexport function hexToBool(hex: Hex, opts: HexToBoolOpts = {}): boolean {\n  return ox__Hex.toBoolean(hex, opts);\n}\n\nexport type HexToUint8ArrayOpts = ox__Hex.toBytes.Options;\n\n/**\n * Converts a hexadecimal string to a Uint8Array.\n * @param hex The hexadecimal string to convert.\n * @param opts Options for the conversion.\n * @returns The Uint8Array representation of the hexadecimal string.\n * @example\n * ```ts\n * import { hexToUint8Array } from \"thirdweb/utils\";\n * const bytes = hexToUint8Array(\"0x48656c6c6f2c20776f726c6421\");\n * console.log(bytes); // Uint8Array([72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33])\n * ```\n * @utils\n */\nexport function hexToUint8Array(\n  hex: Hex,\n  opts: HexToUint8ArrayOpts = {},\n): Uint8Array {\n  return ox__Hex.toBytes(hex, opts);\n}\n\nexport type FromHexParameters<\n  TTo extends \"string\" | \"bigint\" | \"number\" | \"bytes\" | \"boolean\",\n> =\n  | TTo\n  | {\n      /** Size (in bytes) of the hex value. */\n      size?: number;\n      /** Type to convert to. */\n      to: TTo;\n    };\n\nexport type FromHexReturnType<TTo> = TTo extends \"string\"\n  ? string\n  : TTo extends \"bigint\"\n    ? bigint\n    : TTo extends \"number\"\n      ? number\n      : TTo extends \"bytes\"\n        ? Uint8Array\n        : TTo extends \"boolean\"\n          ? boolean\n          : never;\n\n/**\n * Converts a hexadecimal string to the specified type.\n * @param hex - The hexadecimal string to convert.\n * @param toOrOpts - The target type or conversion options.\n * @returns The converted value of the specified type.\n * @example\n * ```ts\n * import { fromHex } from \"thirdweb/utils\";\n * const string = fromHex(\"0x48656c6c6f2c20776f726c6421\", \"string\");\n * console.log(string); // \"Hello, world!\"\n * ```\n * @utils\n */\nexport function fromHex<\n  TTo extends \"string\" | \"bigint\" | \"number\" | \"bytes\" | \"boolean\",\n>(hex: Hex, toOrOpts: FromHexParameters<TTo>): FromHexReturnType<TTo> {\n  const opts = typeof toOrOpts === \"string\" ? { to: toOrOpts } : toOrOpts;\n\n  switch (opts.to) {\n    case \"number\":\n      return hexToNumber(hex, opts) as FromHexReturnType<TTo>;\n    case \"bigint\":\n      return hexToBigInt(hex, opts) as FromHexReturnType<TTo>;\n    case \"string\":\n      return hexToString(hex, opts) as FromHexReturnType<TTo>;\n    case \"boolean\":\n      return hexToBool(hex, opts) as FromHexReturnType<TTo>;\n    default:\n      return hexToUint8Array(hex, opts) as FromHexReturnType<TTo>;\n  }\n}\n\n//--------------------------------------------------------------------------\n// TO HEX\n//--------------------------------------------------------------------------\n\nexport type BoolToHexOpts = ox__Hex.fromBoolean.Options;\n\n/**\n * Converts a boolean value to a hexadecimal string representation.\n * @param value - The boolean value to convert.\n * @param opts - Optional options for the conversion.\n * @returns The hexadecimal string representation of the boolean value.\n * @example\n * ```ts\n * import { boolToHex } from \"thirdweb/utils\";\n * const hex = boolToHex(true);\n * console.log(hex); // \"0x01\"\n * ```\n * @utils\n */\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\n  return ox__Hex.fromBoolean(value, opts);\n}\n\nexport type Uint8ArrayToHexOpts = ox__Hex.fromBoolean.Options;\n\n/**\n * Converts an array of bytes to a hexadecimal string.\n * @param value - The array of bytes to convert.\n * @param opts - Optional parameters for the conversion.\n * @returns The hexadecimal string representation of the bytes.\n * @example\n * ```ts\n * import { uint8arrayToHex } from \"thirdweb/utils\";\n * const hex = uint8arrayToHex(new Uint8Array([72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100]));\n * console.log(hex); // \"0x48656c6c6f2c20776f726c64\"\n * ```\n * @utils\n */\nexport function uint8ArrayToHex(\n  value: Uint8Array,\n  opts: Uint8ArrayToHexOpts = {},\n): Hex {\n  return ox__Hex.fromBytes(value, opts);\n}\n\nexport type NumberToHexOpts = ox__Hex.fromNumber.Options;\n\n/**\n * Converts a number or bigint to a hexadecimal string.\n * @param value_ - The number or bigint value to convert.\n * @param opts - Optional configuration options.\n * @returns The hexadecimal representation of the input value.\n * @throws An error if the input value is not within the safe integer range.\n * @example\n * ```ts\n * import { numberToHex } from \"thirdweb/utils\";\n * const hex = numberToHex(420);\n * console.log(hex); // \"0x1a4\"\n * ```\n * @utils\n */\nexport function numberToHex(\n  value_: number | bigint,\n  opts: NumberToHexOpts = {},\n): Hex {\n  return ox__Hex.fromNumber(value_, opts);\n}\n\nexport type StringToHexOpts = ox__Hex.fromString.Options;\n\n/**\n * Converts a string to its hexadecimal representation.\n * @param value_ The string to convert to hexadecimal.\n * @param opts Options for the conversion.\n * @returns The hexadecimal representation of the input string.\n * @example\n * ```ts\n * import { stringToHex } from \"thirdweb/utils\";\n * const hex = stringToHex(\"Hello, world!\");\n * console.log(hex); // \"0x48656c6c6f2c20776f726c6421\"\n * ```\n * @utils\n */\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\n  return ox__Hex.fromString(value_, opts);\n}\n\nexport type ToHexParameters = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number;\n};\n\n/**\n * Converts a value to its hexadecimal representation.\n * @param value - The value to convert to hexadecimal.\n * @param opts - Optional parameters for the conversion.\n * @returns The hexadecimal representation of the value.\n * @example\n * ```ts\n * import { toHex } from \"thirdweb/utils\";\n * const hex = toHex(420);\n * console.log(hex); // \"0x1a4\"\n * ```\n * @utils\n */\nexport function toHex(\n  value: string | number | bigint | boolean | Uint8Array,\n  opts: ToHexParameters = {},\n): Hex {\n  switch (typeof value) {\n    case \"number\":\n    case \"bigint\":\n      return numberToHex(value, opts);\n    case \"string\":\n      return stringToHex(value, opts);\n    case \"boolean\":\n      return boolToHex(value, opts);\n    default:\n      return uint8ArrayToHex(value, opts);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAkBM,SAAU,MACd,OACA,UAAwB,CAAA,GAAE;AAE1B,SAAe,SAAS,OAAO,OAAO;AACxC;;;ACCM,SAAU,OAAO,MAAW,UAAsB,CAAA,GAAE;AACxD,QAAM,EAAE,KAAK,OAAO,GAAE,IAAK;AAC3B,MAAI,SAAS,MAAM;AACjB,WAAO;EACT;AACA,MAAI,QAAQ,SAAS;AACnB,WAAe,SAAS,MAAM,IAAI;EACpC;AACA,SAAe,QAAQ,MAAM,IAAI;AACnC;AAqBM,SAAU,YAAY,KAAU,OAAwB,CAAA,GAAE;AAC9D,SAAe,SAAS,KAAK,IAAI;AACnC;AAiBM,SAAU,YAAY,KAAU,OAAwB,CAAA,GAAE;AAC9D,SAAe,SAAS,KAAK,IAAI;AACnC;AAgBM,SAAU,YAAY,KAAU,OAAwB,CAAA,GAAE;AAC9D,SAAe,SAAS,KAAK,IAAI;AACnC;AAkBM,SAAU,UAAU,KAAU,OAAsB,CAAA,GAAE;AAC1D,SAAe,UAAU,KAAK,IAAI;AACpC;AAiBM,SAAU,gBACd,KACA,OAA4B,CAAA,GAAE;AAE9B,SAAe,QAAQ,KAAK,IAAI;AAClC;AAsCM,SAAU,QAEd,KAAU,UAAgC;AAC1C,QAAM,OAAO,OAAO,aAAa,WAAW,EAAE,IAAI,SAAQ,IAAK;AAE/D,UAAQ,KAAK,IAAI;IACf,KAAK;AACH,aAAO,YAAY,KAAK,IAAI;IAC9B,KAAK;AACH,aAAO,YAAY,KAAK,IAAI;IAC9B,KAAK;AACH,aAAO,YAAY,KAAK,IAAI;IAC9B,KAAK;AACH,aAAO,UAAU,KAAK,IAAI;IAC5B;AACE,aAAO,gBAAgB,KAAK,IAAI;EACpC;AACF;AAqBM,SAAU,UAAU,OAAgB,OAAsB,CAAA,GAAE;AAChE,SAAe,YAAY,OAAO,IAAI;AACxC;AAiBM,SAAU,gBACd,OACA,OAA4B,CAAA,GAAE;AAE9B,SAAe,UAAU,OAAO,IAAI;AACtC;AAkBM,SAAU,YACd,QACA,OAAwB,CAAA,GAAE;AAE1B,SAAe,WAAW,QAAQ,IAAI;AACxC;AAiBM,SAAU,YAAY,QAAgB,OAAwB,CAAA,GAAE;AACpE,SAAe,WAAW,QAAQ,IAAI;AACxC;AAoBM,SAAU,MACd,OACA,OAAwB,CAAA,GAAE;AAE1B,UAAQ,OAAO,OAAO;IACpB,KAAK;IACL,KAAK;AACH,aAAO,YAAY,OAAO,IAAI;IAChC,KAAK;AACH,aAAO,YAAY,OAAO,IAAI;IAChC,KAAK;AACH,aAAO,UAAU,OAAO,IAAI;IAC9B;AACE,aAAO,gBAAgB,OAAO,IAAI;EACtC;AACF;",
  "names": []
}
