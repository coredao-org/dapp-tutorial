{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/config.ts", "../../node_modules/thirdweb/src/transaction/actions/send-transaction.ts"],
  "sourcesContent": ["import type { PreparedTransaction } from \"../transaction/prepare-transaction.js\";\nimport type { Account } from \"../wallets/interfaces/wallet.js\";\n\nlet transactionDecorator:\n  | ((args: {\n      account: Account;\n      transaction: PreparedTransaction;\n    }) => Promise<{ account: Account; transaction: PreparedTransaction }>)\n  | null = null;\n\nexport function setTransactionDecorator(\n  decoratorFunction: (args: {\n    account: Account;\n    transaction: PreparedTransaction;\n  }) => Promise<{ account: Account; transaction: PreparedTransaction }>,\n) {\n  transactionDecorator = decoratorFunction;\n}\n\nexport function clearTransactionDecorator() {\n  transactionDecorator = null;\n}\n\nexport function getTransactionDecorator() {\n  return transactionDecorator;\n}\n", "import { getTransactionDecorator } from \"../../utils/config.js\";\nimport type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\nimport { addTransactionToStore } from \"../transaction-store.js\";\nimport type { GaslessOptions } from \"./gasless/types.js\";\nimport { toSerializableTransaction } from \"./to-serializable-transaction.js\";\nimport type { WaitForReceiptOptions } from \"./wait-for-tx-receipt.js\";\n\n/** Send transaction options */\nexport interface SendTransactionOptions {\n  /**\n   * The account to send the transaction with\n   */\n  account: Account;\n  /**\n   * The prepared transaction to send\n   */\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n  /**\n   * Gasless options for the transaction, if applicable\n   */\n  gasless?: GaslessOptions;\n}\n\n/**\n * Sends a transaction using the provided account.\n *\n * You can send a transaction with a [prepared contract call](https://portal.thirdweb.com/references/typescript/v5/prepareContractCall), a [prepared transaction](https://portal.thirdweb.com/references/typescript/v5/prepareTransaction), or using a write [Extension](https://portal.thirdweb.com/typescript/v5/extensions/use).\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the transaction result.\n * @throws An error if the transaction reverts.\n * @transaction\n * @example\n *\n * ### Using a prepared contract call\n *\n * ```ts\n * import { sendTransaction, getContract, prepareContractCall } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = prepareContractCall({\n *   contract,\n *   method: \"function transfer(address to, uint256 value)\",\n *   params: [to, value],\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Using a write extension\n *\n * ```ts\n * import { sendTransaction, getContract } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { mintTo } from \"thirdweb/extensions/erc721\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = mintTo({\n *   contract,\n *   to: \"0x...\",\n *   nft: {\n *     name: \"NFT Name\",\n *     description: \"NFT Description\",\n *     image: \"https://example.com/image.png\",\n *   },\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Using a prepared transaction\n *\n * ```ts\n * import { sendTransaction, getContract, prepareTransaction } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const transaction = prepareTransaction({\n *   contract,\n *   to: \"0x...\",\n *   value: toWei(\"0.1\"),\n * });\n *\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n * });\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```ts\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"engine\",\n *    relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```ts\n * const { transactionHash } = await sendTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"openzeppelin\",\n *    relayerUrl: \"https://...\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n */\nexport async function sendTransaction(\n  options: SendTransactionOptions,\n): Promise<WaitForReceiptOptions> {\n  let { account, transaction, gasless } = options;\n\n  const decorator = getTransactionDecorator();\n  if (decorator) {\n    const { account: decoratedAccount, transaction: decoratedTransaction } =\n      await decorator({ account, transaction });\n    account = decoratedAccount;\n    transaction = decoratedTransaction;\n  }\n\n  if (account.onTransactionRequested) {\n    await account.onTransactionRequested(transaction);\n  }\n\n  // if zksync transaction params are set, send with eip712\n  if (transaction.eip712) {\n    const { sendEip712Transaction } = await import(\n      \"./zksync/send-eip712-transaction.js\"\n    );\n    return sendEip712Transaction({\n      account,\n      transaction,\n    });\n  }\n\n  const serializableTransaction = await toSerializableTransaction({\n    transaction: transaction,\n    from: account.address,\n  });\n\n  // branch for gasless transactions\n  if (gasless) {\n    // lazy load the gasless tx function because it's only needed for gasless transactions\n    const { sendGaslessTransaction } = await import(\n      \"./gasless/send-gasless-transaction.js\"\n    );\n    return sendGaslessTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  const result = await account.sendTransaction(serializableTransaction);\n  // Store the transaction\n  addTransactionToStore({\n    address: account.address,\n    transactionHash: result.transactionHash,\n    chainId: transaction.chain.id,\n  });\n  return { ...result, chain: transaction.chain, client: transaction.client };\n}\n"],
  "mappings": ";;;;;;;;AAGA,IAAI,uBAKO;AAeL,SAAU,0BAAuB;AACrC,SAAO;AACT;;;ACiHA,eAAsB,gBACpB,SAA+B;AAE/B,MAAI,EAAE,SAAS,aAAa,QAAO,IAAK;AAExC,QAAM,YAAY,wBAAuB;AACzC,MAAI,WAAW;AACb,UAAM,EAAE,SAAS,kBAAkB,aAAa,qBAAoB,IAClE,MAAM,UAAU,EAAE,SAAS,YAAW,CAAE;AAC1C,cAAU;AACV,kBAAc;EAChB;AAEA,MAAI,QAAQ,wBAAwB;AAClC,UAAM,QAAQ,uBAAuB,WAAW;EAClD;AAGA,MAAI,YAAY,QAAQ;AACtB,UAAM,EAAE,sBAAqB,IAAK,MAAM,OACtC,uCAAqC;AAEvC,WAAO,sBAAsB;MAC3B;MACA;KACD;EACH;AAEA,QAAM,0BAA0B,MAAM,0BAA0B;IAC9D;IACA,MAAM,QAAQ;GACf;AAGD,MAAI,SAAS;AAEX,UAAM,EAAE,uBAAsB,IAAK,MAAM,OACvC,wCAAuC;AAEzC,WAAO,uBAAuB;MAC5B;MACA;MACA;MACA;KACD;EACH;AAEA,QAAM,SAAS,MAAM,QAAQ,gBAAgB,uBAAuB;AAEpE,wBAAsB;IACpB,SAAS,QAAQ;IACjB,iBAAiB,OAAO;IACxB,SAAS,YAAY,MAAM;GAC5B;AACD,SAAO,EAAE,GAAG,QAAQ,OAAO,YAAY,OAAO,QAAQ,YAAY,OAAM;AAC1E;",
  "names": []
}
