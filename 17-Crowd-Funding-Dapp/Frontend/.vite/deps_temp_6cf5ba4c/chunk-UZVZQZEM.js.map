{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/contract/fetchContractMetadata.ts", "../../node_modules/thirdweb/src/extensions/common/__generated__/IContractMetadata/read/contractURI.ts", "../../node_modules/thirdweb/src/extensions/common/read/getContractMetadata.ts"],
  "sourcesContent": ["import type { ThirdwebClient } from \"../../client/client.js\";\nimport { isBase64JSON, parseBase64String } from \"../base64/base64.js\";\n\n/**\n * @internal\n */\nexport type FetchContractMetadata = {\n  client: ThirdwebClient;\n  uri: string;\n};\n\n/**\n * Fetches the metadata for a token.\n *\n * @param options - The options for fetching the token metadata.\n * @returns The token metadata.\n * @internal\n */\nexport async function fetchContractMetadata(\n  options: FetchContractMetadata,\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n): Promise<{ [key: string]: any } | undefined> {\n  const { client, uri } = options;\n\n  // handle case where the URI is a base64 encoded JSON\n  if (isBase64JSON(uri)) {\n    try {\n      return JSON.parse(parseBase64String(uri));\n    } catch (e) {\n      console.error(\n        \"Failed to decode base64 encoded contract metadata\",\n        { uri },\n        e,\n      );\n      return undefined;\n    }\n  }\n\n  // in all other cases we will need the `download` function from storage\n\n  const { download } = await import(\"../../storage/download.js\");\n  return await (await download({ client, uri })).json();\n}\n", "import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0xe8a3d485\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `contractURI` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `contractURI` method is supported.\n * @extension COMMON\n * @example\n * ```ts\n * import { isContractURISupported } from \"thirdweb/extensions/common\";\n * const supported = isContractURISupported([\"0x...\"]);\n * ```\n */\nexport function isContractURISupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the contractURI function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension COMMON\n * @example\n * ```ts\n * import { decodeContractURIResult } from \"thirdweb/extensions/common\";\n * const result = decodeContractURIResultResult(\"...\");\n * ```\n */\nexport function decodeContractURIResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"contractURI\" function on the contract.\n * @param options - The options for the contractURI function.\n * @returns The parsed result of the function call.\n * @extension COMMON\n * @example\n * ```ts\n * import { contractURI } from \"thirdweb/extensions/common\";\n *\n * const result = await contractURI({\n *  contract,\n * });\n *\n * ```\n */\nexport async function contractURI(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n", "import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { fetchContractMetadata } from \"../../../utils/contract/fetchContractMetadata.js\";\nimport { contractURI } from \"../__generated__/IContractMetadata/read/contractURI.js\";\nimport { name } from \"./name.js\";\nimport { symbol } from \"./symbol.js\";\n\nexport { isContractURISupported as isGetContractMetadataSupported } from \"../__generated__/IContractMetadata/read/contractURI.js\";\n\n/**\n * Retrieves the contract metadata including name and symbol.\n * @param options The transaction options.\n * @returns A promise that resolves to an object containing the resolved metadata, name, and symbol.\n * @extension COMMON\n * @example\n * ```ts\n * import { getContractMetadata } from \"thirdweb/extensions/common\";\n * const metadata = await getContractMetadata({ contract });\n * ```\n */\nexport async function getContractMetadata(\n  options: BaseTransactionOptions,\n): Promise<{\n  name: string;\n  symbol: string;\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  [key: string]: any;\n}> {\n  const [resolvedMetadata, resolvedName, resolvedSymbol] = await Promise.all([\n    contractURI(options)\n      .then((uri) => {\n        if (uri) {\n          return fetchContractMetadata({\n            client: options.contract.client,\n            uri,\n          });\n        }\n        return null;\n      })\n      .catch(() => null),\n    name(options).catch(() => null),\n    symbol(options).catch(() => null),\n  ]);\n\n  // TODO: basic parsing?\n  return {\n    ...resolvedMetadata,\n    name: resolvedMetadata?.name ?? resolvedName,\n    symbol: resolvedMetadata?.symbol ?? resolvedSymbol,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAkBA,eAAsB,sBACpB,SAA8B;AAG9B,QAAM,EAAE,QAAQ,IAAG,IAAK;AAGxB,MAAI,aAAa,GAAG,GAAG;AACrB,QAAI;AACF,aAAO,KAAK,MAAM,kBAAkB,GAAG,CAAC;IAC1C,SAAS,GAAG;AACV,cAAQ,MACN,qDACA,EAAE,IAAG,GACL,CAAC;AAEH,aAAO;IACT;EACF;AAIA,QAAM,EAAE,SAAQ,IAAK,MAAM,OAAO,wBAA2B;AAC7D,SAAO,OAAO,MAAM,SAAS,EAAE,QAAQ,IAAG,CAAE,GAAG,KAAI;AACrD;;;ACnCO,IAAM,cAAc;AAC3B,IAAM,YAAY,CAAA;AAClB,IAAM,aAAa;EACjB;IACE,MAAM;;;AAeJ,SAAU,uBAAuB,oBAA4B;AACjE,SAAO,aAAa;IAClB;IACA,QAAQ,CAAC,aAAa,WAAW,UAAU;GAC5C;AACH;AAgCA,eAAsB,YAAY,SAA+B;AAC/D,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAA;GACT;AACH;;;AClDA,eAAsB,oBACpB,SAA+B;AAO/B,QAAM,CAAC,kBAAkB,cAAc,cAAc,IAAI,MAAM,QAAQ,IAAI;IACzE,YAAY,OAAO,EAChB,KAAK,CAAC,QAAO;AACZ,UAAI,KAAK;AACP,eAAO,sBAAsB;UAC3B,QAAQ,QAAQ,SAAS;UACzB;SACD;MACH;AACA,aAAO;IACT,CAAC,EACA,MAAM,MAAM,IAAI;IACnB,KAAK,OAAO,EAAE,MAAM,MAAM,IAAI;IAC9B,OAAO,OAAO,EAAE,MAAM,MAAM,IAAI;GACjC;AAGD,SAAO;IACL,GAAG;IACH,OAAM,qDAAkB,SAAQ;IAChC,SAAQ,qDAAkB,WAAU;;AAExC;",
  "names": []
}
