{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/transaction/actions/encode.ts"],
  "sourcesContent": ["import type { Abi, AbiFunction } from \"abitype\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport type { PreparedTransaction } from \"../prepare-transaction.js\";\n\nconst encodeWeakMap = new WeakMap<\n  PreparedTransaction<Abi, AbiFunction>,\n  Promise<Hex>\n>();\n\n/**\n * Encodes a transaction object into a hexadecimal string representation of the encoded data.\n * @param transaction - The transaction object to encode.\n * @returns A promise that resolves to the encoded data as a hexadecimal string.\n * @transaction\n * @example\n * ```ts\n * import { encode } from \"thirdweb\";\n * const encodedData = await encode(transaction);\n * ```\n */\nexport async function encode<abi extends Abi, abiFn extends AbiFunction>(\n  transaction: PreparedTransaction<abi, abiFn>,\n): Promise<Hex> {\n  if (encodeWeakMap.has(transaction)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return encodeWeakMap.get(transaction)!;\n  }\n  const promise = (async () => {\n    const [data, extraData, { concatHex }] = await Promise.all([\n      getDataFromTx(transaction),\n      getExtraCallDataFromTx(transaction),\n      import(\"../../utils/encoding/helpers/concat-hex.js\"),\n    ]);\n    if (extraData) {\n      return concatHex([data, extraData]);\n    }\n    return data;\n  })();\n  encodeWeakMap.set(transaction, promise);\n  return promise;\n}\n\n/**\n * Get the transaction.data (from a PreparedTransaction)\n * If the transaction does not have `data`, we default to \"0x\"\n * @internal\n */\nexport async function getDataFromTx<abi extends Abi, abiFn extends AbiFunction>(\n  transaction: PreparedTransaction<abi, abiFn>,\n): Promise<Hex> {\n  if (transaction.data === undefined) {\n    return \"0x\";\n  }\n  if (typeof transaction.data === \"function\") {\n    const data = await transaction.data();\n    if (!data) {\n      return \"0x\";\n    }\n    return data;\n  }\n  return transaction.data;\n}\n\n/**\n * Get the extraCallData from a PreparedTransaction\n * @internal\n * If extraCallData is \"0x\", we will return `undefined`\n * to simplify the code, since concatenating \"0x\" doesn't do anything\n */\nexport async function getExtraCallDataFromTx<\n  abi extends Abi,\n  abiFn extends AbiFunction,\n>(transaction: PreparedTransaction<abi, abiFn>): Promise<Hex | undefined> {\n  if (!transaction.extraCallData) {\n    return undefined;\n  }\n  if (typeof transaction.extraCallData === \"function\") {\n    const extraData = await transaction.extraCallData();\n    if (!extraData) return undefined;\n    if (!extraData.startsWith(\"0x\")) {\n      throw Error(\"Invalid extra calldata - must be a hex string\");\n    }\n    if (extraData === \"0x\") {\n      return undefined;\n    }\n    return extraData;\n  }\n  if (!transaction.extraCallData.startsWith(\"0x\")) {\n    throw Error(\"Invalid extra calldata - must be a hex string\");\n  }\n  return transaction.extraCallData;\n}\n"],
  "mappings": ";AAIA,IAAM,gBAAgB,oBAAI,QAAO;AAgBjC,eAAsB,OACpB,aAA4C;AAE5C,MAAI,cAAc,IAAI,WAAW,GAAG;AAElC,WAAO,cAAc,IAAI,WAAW;EACtC;AACA,QAAM,WAAW,YAAW;AAC1B,UAAM,CAAC,MAAM,WAAW,EAAE,UAAS,CAAE,IAAI,MAAM,QAAQ,IAAI;MACzD,cAAc,WAAW;MACzB,uBAAuB,WAAW;MAClC,OAAO,0BAA4C;KACpD;AACD,QAAI,WAAW;AACb,aAAO,UAAU,CAAC,MAAM,SAAS,CAAC;IACpC;AACA,WAAO;EACT,GAAE;AACF,gBAAc,IAAI,aAAa,OAAO;AACtC,SAAO;AACT;AAOA,eAAsB,cACpB,aAA4C;AAE5C,MAAI,YAAY,SAAS,QAAW;AAClC,WAAO;EACT;AACA,MAAI,OAAO,YAAY,SAAS,YAAY;AAC1C,UAAM,OAAO,MAAM,YAAY,KAAI;AACnC,QAAI,CAAC,MAAM;AACT,aAAO;IACT;AACA,WAAO;EACT;AACA,SAAO,YAAY;AACrB;AAQA,eAAsB,uBAGpB,aAA4C;AAC5C,MAAI,CAAC,YAAY,eAAe;AAC9B,WAAO;EACT;AACA,MAAI,OAAO,YAAY,kBAAkB,YAAY;AACnD,UAAM,YAAY,MAAM,YAAY,cAAa;AACjD,QAAI,CAAC;AAAW,aAAO;AACvB,QAAI,CAAC,UAAU,WAAW,IAAI,GAAG;AAC/B,YAAM,MAAM,+CAA+C;IAC7D;AACA,QAAI,cAAc,MAAM;AACtB,aAAO;IACT;AACA,WAAO;EACT;AACA,MAAI,CAAC,YAAY,cAAc,WAAW,IAAI,GAAG;AAC/C,UAAM,MAAM,+CAA+C;EAC7D;AACA,SAAO,YAAY;AACrB;",
  "names": []
}
