{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/promise/withCache.ts"],
  "sourcesContent": ["// copy of: https://github.com/wevm/viem/blob/6cf2c3b5fe608bce9c828af867dfaa65103753a6/src/utils/promise/withCache.ts\n// with slight adjustments made to comply with our linting rules\n// TODO: explore extracting this from viem and instead having a separate general purpose library for this kind of thing\n// alternatively viem could maybe export this helpful util\n// TODO: explore using a LRU cache instead of a Map\n\nconst promiseCache = /*#__PURE__*/ new Map();\nconst responseCache = /*#__PURE__*/ new Map();\n\n/**\n *@internal\n */\nexport function getCache<TData>(cacheKey: string) {\n  const buildCache = <TData>(cacheKey_: string, cache: Map<string, TData>) => ({\n    clear: () => cache.delete(cacheKey_),\n    get: () => cache.get(cacheKey_),\n    set: (data: TData) => cache.set(cacheKey_, data),\n  });\n\n  const promise = buildCache<Promise<TData>>(cacheKey, promiseCache);\n  const response = buildCache<{ created: Date; data: TData }>(\n    cacheKey,\n    responseCache,\n  );\n\n  return {\n    clear: () => {\n      promise.clear();\n      response.clear();\n    },\n    promise,\n    response,\n  };\n}\n\ntype WithCacheParameters = {\n  /** The key to cache the data against. */\n  cacheKey: string;\n  /** The time that cached data will remain in memory. Default: Infinity (no expiry) */\n  cacheTime?: number;\n};\n\n/**\n * Returns the result of a given promise, and caches the result for\n * subsequent invocations against a provided cache key.\n * @internal\n */\nexport async function withCache<TData>(\n  fn: () => Promise<TData>,\n  { cacheKey, cacheTime = Number.POSITIVE_INFINITY }: WithCacheParameters,\n) {\n  const cache = getCache<TData>(cacheKey);\n\n  // If a response exists in the cache, and it's not expired, return it\n  // and do not invoke the promise.\n  // If the max age is 0, the cache is disabled.\n  const response = cache.response.get();\n  if (response && cacheTime > 0) {\n    const age = new Date().getTime() - response.created.getTime();\n    if (age < cacheTime) {\n      return response.data;\n    }\n  }\n\n  let promise = cache.promise.get();\n  if (!promise) {\n    promise = fn();\n\n    // Store the promise in the cache so that subsequent invocations\n    // will wait for the same promise to resolve (deduping).\n    cache.promise.set(promise);\n  }\n\n  try {\n    const data = await promise;\n\n    // Store the response in the cache so that subsequent invocations\n    // will return the same response.\n    cache.response.set({ created: new Date(), data });\n\n    return data;\n  } finally {\n    // Clear the promise cache so that subsequent invocations will\n    // invoke the promise again.\n    cache.promise.clear();\n  }\n}\n"],
  "mappings": ";AAMA,IAAM,eAA6B,oBAAI,IAAG;AAC1C,IAAM,gBAA8B,oBAAI,IAAG;AAKrC,SAAU,SAAgB,UAAgB;AAC9C,QAAM,aAAa,CAAQ,WAAmB,WAA+B;IAC3E,OAAO,MAAM,MAAM,OAAO,SAAS;IACnC,KAAK,MAAM,MAAM,IAAI,SAAS;IAC9B,KAAK,CAAC,SAAgB,MAAM,IAAI,WAAW,IAAI;;AAGjD,QAAM,UAAU,WAA2B,UAAU,YAAY;AACjE,QAAM,WAAW,WACf,UACA,aAAa;AAGf,SAAO;IACL,OAAO,MAAK;AACV,cAAQ,MAAK;AACb,eAAS,MAAK;IAChB;IACA;IACA;;AAEJ;AAcA,eAAsB,UACpB,IACA,EAAE,UAAU,YAAY,OAAO,kBAAiB,GAAuB;AAEvE,QAAM,QAAQ,SAAgB,QAAQ;AAKtC,QAAM,WAAW,MAAM,SAAS,IAAG;AACnC,MAAI,YAAY,YAAY,GAAG;AAC7B,UAAM,OAAM,oBAAI,KAAI,GAAG,QAAO,IAAK,SAAS,QAAQ,QAAO;AAC3D,QAAI,MAAM,WAAW;AACnB,aAAO,SAAS;IAClB;EACF;AAEA,MAAI,UAAU,MAAM,QAAQ,IAAG;AAC/B,MAAI,CAAC,SAAS;AACZ,cAAU,GAAE;AAIZ,UAAM,QAAQ,IAAI,OAAO;EAC3B;AAEA,MAAI;AACF,UAAM,OAAO,MAAM;AAInB,UAAM,SAAS,IAAI,EAAE,SAAS,oBAAI,KAAI,GAAI,KAAI,CAAE;AAEhD,WAAO;EACT;AAGE,UAAM,QAAQ,MAAK;EACrB;AACF;",
  "names": []
}
