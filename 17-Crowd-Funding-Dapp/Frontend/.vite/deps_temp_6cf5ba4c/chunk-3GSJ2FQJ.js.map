{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/version.ts", "../../node_modules/thirdweb/src/utils/jwt/is-jwt.ts", "../../node_modules/thirdweb/src/utils/process.ts", "../../node_modules/thirdweb/src/utils/fetch.ts"],
  "sourcesContent": ["export const version = \"5.68.0\";\n", "import type { JWTString } from \"./types.js\";\n\nexport function isJWT(str: string): str is JWTString {\n  return str.split(\".\").length === 3;\n}\n", "export const IS_DEV =\n  // biome-ignore lint/nursery/noProcessEnv: ok in this file\n  process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\";\n", "import type { ThirdwebClient } from \"../client/client.js\";\nimport { version } from \"../version.js\";\nimport type { Ecosystem } from \"../wallets/in-app/core/wallet/types.js\";\nimport { LruMap } from \"./caching/lru.js\";\nimport {\n  type OperatingSystem,\n  detectOS,\n  detectPlatform,\n} from \"./detect-platform.js\";\nimport { isJWT } from \"./jwt/is-jwt.js\";\nimport { IS_DEV } from \"./process.js\";\n\nconst DEFAULT_REQUEST_TIMEOUT = 60000;\n\n/**\n * @internal\n */\nexport function getClientFetch(client: ThirdwebClient, ecosystem?: Ecosystem) {\n  /**\n   * @internal\n   */\n  async function fetchWithHeaders(\n    url: string,\n    init?: Omit<RequestInit, \"signal\"> & { requestTimeoutMs?: number },\n  ): Promise<Response> {\n    const { requestTimeoutMs = DEFAULT_REQUEST_TIMEOUT, ...restInit } =\n      init || {};\n\n    let headers = restInit.headers ? new Headers(restInit.headers) : undefined;\n\n    // check if we are making a request to a thirdweb service (we don't want to send any headers to non-thirdweb services)\n    if (isThirdwebUrl(url)) {\n      if (!headers) {\n        headers = new Headers();\n      }\n      // auth token if secret key === jwt\n      const authToken =\n        client.secretKey && isJWT(client.secretKey)\n          ? client.secretKey\n          : undefined;\n      // secret key if secret key !== jwt\n      const secretKey =\n        client.secretKey && !isJWT(client.secretKey)\n          ? client.secretKey\n          : undefined;\n      const clientId = client.clientId;\n\n      // if we have an auth token set, use that (thirdweb dashboard sets this for the user)\n      // pay urls should never send the auth token, because we always want the \"developer\" to be the one making the request, not the \"end user\"\n      if (\n        authToken &&\n        !isPayUrl(url) &&\n        !isInAppWalletUrl(url) &&\n        !isBundlerUrl(url)\n      ) {\n        headers.set(\"authorization\", `Bearer ${authToken}`);\n      } else if (secretKey) {\n        headers.set(\"x-secret-key\", secretKey);\n      } else if (clientId) {\n        headers.set(\"x-client-id\", clientId);\n      }\n\n      if (ecosystem) {\n        headers.set(\"x-ecosystem-id\", ecosystem.id);\n        if (ecosystem.partnerId) {\n          headers.set(\"x-ecosystem-partner-id\", ecosystem.partnerId);\n        }\n      }\n      // this already internally caches\n      for (const [key, value] of getPlatformHeaders()) {\n        (headers as Headers).set(key, value);\n      }\n    }\n\n    let controller: AbortController | undefined;\n    let abortTimeout: ReturnType<typeof setTimeout> | undefined;\n    if (requestTimeoutMs) {\n      controller = new AbortController();\n      abortTimeout = setTimeout(() => {\n        controller?.abort(\"timeout\");\n      }, requestTimeoutMs);\n    }\n\n    return fetch(url, {\n      ...restInit,\n      headers,\n      signal: controller?.signal,\n    }).finally(() => {\n      if (abortTimeout) {\n        clearTimeout(abortTimeout);\n      }\n    });\n  }\n  return fetchWithHeaders;\n}\n\n// NOTE: these all start with \".\" because we want to make sure we don't match (for example) \"otherthirdweb.com\"\nconst THIRDWEB_DOMAINS = [\n  \".thirdweb.com\",\n  \".ipfscdn.io\",\n  // dev domains\n  \".thirdweb.dev\",\n  \".thirdweb-dev.com\",\n] as const;\n\nexport const IS_THIRDWEB_URL_CACHE = new LruMap<boolean>(4096);\n\n/**\n * @internal\n */\nexport function isThirdwebUrl(url: string): boolean {\n  if (IS_THIRDWEB_URL_CACHE.has(url)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return IS_THIRDWEB_URL_CACHE.get(url)!;\n  }\n  try {\n    const { hostname } = new URL(url);\n\n    try {\n      // special case for localhost in development only\n      if (IS_DEV) {\n        if (hostname === \"localhost\") {\n          IS_THIRDWEB_URL_CACHE.set(url, true);\n          return true;\n        }\n      }\n    } catch {}\n\n    const is = THIRDWEB_DOMAINS.some((domain) => hostname.endsWith(domain));\n    IS_THIRDWEB_URL_CACHE.set(url, is);\n    return is;\n  } catch {\n    IS_THIRDWEB_URL_CACHE.set(url, false);\n    return false;\n  }\n}\n\nfunction isPayUrl(url: string): boolean {\n  try {\n    const { hostname } = new URL(url);\n    // pay service hostname always starts with \"pay.\"\n    return hostname.startsWith(\"pay.\");\n  } catch {\n    return false;\n  }\n}\n\nfunction isInAppWalletUrl(url: string): boolean {\n  try {\n    const { hostname } = new URL(url);\n    // in app wallet service hostname always starts with \"in-app-wallet.\" or \"embedded-wallet.\"\n    return (\n      hostname.startsWith(\"in-app-wallet.\") ||\n      hostname.startsWith(\"embedded-wallet.\")\n    );\n  } catch {\n    return false;\n  }\n}\n\nfunction isBundlerUrl(url: string): boolean {\n  try {\n    const { hostname } = new URL(url);\n    return (\n      hostname.endsWith(\".bundler.thirdweb.com\") ||\n      hostname.endsWith(\".bundler.thirdweb-dev.com\")\n    );\n  } catch {\n    return false;\n  }\n}\n\nconst SDK_NAME = \"unified-sdk\";\n\nlet previousPlatform: [string, string][] | undefined;\n/**\n * @internal\n */\nexport function getPlatformHeaders() {\n  if (previousPlatform) {\n    return previousPlatform;\n  }\n\n  let os: OperatingSystem | null = null;\n  if (typeof navigator !== \"undefined\") {\n    os = detectOS(navigator.userAgent);\n  }\n\n  let bundleId: string | undefined = undefined;\n  if (typeof globalThis !== \"undefined\" && \"Application\" in globalThis) {\n    // shims use wallet connect RN module which injects Application info in globalThis\n    // biome-ignore lint/suspicious/noExplicitAny: get around globalThis typing\n    bundleId = (globalThis as any).Application.applicationId;\n  }\n\n  previousPlatform = Object.entries({\n    \"x-sdk-platform\": detectPlatform(),\n    \"x-sdk-version\": version,\n    \"x-sdk-os\": os ? parseOs(os) : \"unknown\",\n    \"x-sdk-name\": SDK_NAME,\n    ...(bundleId ? { \"x-bundle-id\": bundleId } : {}),\n  });\n\n  return previousPlatform;\n}\n\n/**\n * @internal\n */\nfunction parseOs(os: OperatingSystem | NodeJS.Platform) {\n  const osLowerCased = os.toLowerCase();\n  if (osLowerCased.startsWith(\"win\")) {\n    return \"win\";\n  }\n  // we do NOT use the lowercase here\n  switch (os) {\n    case \"Mac OS\":\n      return \"mac\";\n    case \"iOS\":\n      return \"ios\";\n    case \"Android OS\":\n      return \"android\";\n    default:\n      // if we somehow fall through here, just replace all spaces with underscores and send it\n      return osLowerCased.replace(/\\s/gi, \"_\");\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
