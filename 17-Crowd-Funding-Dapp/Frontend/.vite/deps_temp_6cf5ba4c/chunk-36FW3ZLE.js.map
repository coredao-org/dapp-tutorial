{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/extensions/erc721/__generated__/IERC721A/read/tokenURI.ts", "../../node_modules/thirdweb/src/extensions/erc721/read/getNFT.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"tokenURI\" function.\n */\nexport type TokenURIParams = {\n  tokenId: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"_tokenId\" }>;\n};\n\nexport const FN_SELECTOR = \"0xc87b56dd\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"uint256\",\n    name: \"_tokenId\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `tokenURI` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `tokenURI` method is supported.\n * @extension ERC721\n * @example\n * ```ts\n * import { isTokenURISupported } from \"thirdweb/extensions/erc721\";\n * const supported = isTokenURISupported([\"0x...\"]);\n * ```\n */\nexport function isTokenURISupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"tokenURI\" function.\n * @param options - The options for the tokenURI function.\n * @returns The encoded ABI parameters.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenURIParams } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenURIParams({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeTokenURIParams(options: TokenURIParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.tokenId]);\n}\n\n/**\n * Encodes the \"tokenURI\" function into a Hex string with its parameters.\n * @param options - The options for the tokenURI function.\n * @returns The encoded hexadecimal string.\n * @extension ERC721\n * @example\n * ```ts\n * import { encodeTokenURI } from \"thirdweb/extensions/erc721\";\n * const result = encodeTokenURI({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeTokenURI(options: TokenURIParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeTokenURIParams(options).slice(2)) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the tokenURI function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC721\n * @example\n * ```ts\n * import { decodeTokenURIResult } from \"thirdweb/extensions/erc721\";\n * const result = decodeTokenURIResultResult(\"...\");\n * ```\n */\nexport function decodeTokenURIResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"tokenURI\" function on the contract.\n * @param options - The options for the tokenURI function.\n * @returns The parsed result of the function call.\n * @extension ERC721\n * @example\n * ```ts\n * import { tokenURI } from \"thirdweb/extensions/erc721\";\n *\n * const result = await tokenURI({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nexport async function tokenURI(\n  options: BaseTransactionOptions<TokenURIParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.tokenId],\n  });\n}\n", "import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { fetchTokenMetadata } from \"../../../utils/nft/fetchTokenMetadata.js\";\nimport { type NFT, parseNFT } from \"../../../utils/nft/parseNft.js\";\nimport type { Prettify } from \"../../../utils/type-utils.js\";\nimport {\n  type TokenURIParams,\n  tokenURI,\n} from \"../__generated__/IERC721A/read/tokenURI.js\";\n\nexport { isTokenURISupported as isGetNFTSupported } from \"../__generated__/IERC721A/read/tokenURI.js\";\n\n/**\n * Parameters for getting an NFT.\n * @extension ERC721\n */\nexport type GetNFTParams = Prettify<\n  TokenURIParams & {\n    /**\n     * Whether to include the owner of the NFT.\n     */\n    includeOwner?: boolean;\n  }\n>;\n\n/**\n * Retrieves information about a specific ERC721 non-fungible token (NFT).\n * @param options - The options for retrieving the NFT.\n * @returns A promise that resolves to the NFT object.\n * @extension ERC721\n * @example\n * ```ts\n * import { getNFT } from \"thirdweb/extensions/erc721\";\n * const nft = await getNFT({\n *  contract,\n *  tokenId: 1n,\n * });\n * ```\n */\nexport async function getNFT(\n  options: BaseTransactionOptions<GetNFTParams>,\n): Promise<NFT> {\n  const [uri, owner] = await Promise.all([\n    tokenURI(options).catch(() => null),\n    options.includeOwner\n      ? import(\"../__generated__/IERC721A/read/ownerOf.js\")\n          .then((m) => m.ownerOf(options))\n          .catch(() => null)\n      : null,\n  ]);\n\n  if (!uri?.trim()) {\n    return parseNFT(\n      {\n        id: options.tokenId,\n        type: \"ERC721\",\n        uri: \"\",\n      },\n      {\n        tokenId: options.tokenId,\n        tokenUri: \"\",\n        type: \"ERC721\",\n        owner,\n      },\n    );\n  }\n\n  return parseNFT(\n    await fetchTokenMetadata({\n      client: options.contract.client,\n      tokenId: options.tokenId,\n      tokenUri: uri,\n    }).catch(() => ({\n      id: options.tokenId,\n      type: \"ERC721\",\n      uri,\n    })),\n    {\n      tokenId: options.tokenId,\n      tokenUri: uri,\n      type: \"ERC721\",\n      owner,\n    },\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAeO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAeJ,SAAU,oBAAoB,oBAA4B;AAC9D,SAAO,aAAa;IAClB;IACA,QAAQ,CAAC,aAAa,WAAW,UAAU;GAC5C;AACH;AAsEA,eAAsB,SACpB,SAA+C;AAE/C,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,OAAO;GACzB;AACH;;;ACpFA,eAAsB,OACpB,SAA6C;AAE7C,QAAM,CAAC,KAAK,KAAK,IAAI,MAAM,QAAQ,IAAI;IACrC,SAAS,OAAO,EAAE,MAAM,MAAM,IAAI;IAClC,QAAQ,eACJ,OAAO,uBAA2C,EAC/C,KAAK,CAAC,MAAM,EAAE,QAAQ,OAAO,CAAC,EAC9B,MAAM,MAAM,IAAI,IACnB;GACL;AAED,MAAI,EAAC,2BAAK,SAAQ;AAChB,WAAO,SACL;MACE,IAAI,QAAQ;MACZ,MAAM;MACN,KAAK;OAEP;MACE,SAAS,QAAQ;MACjB,UAAU;MACV,MAAM;MACN;KACD;EAEL;AAEA,SAAO,SACL,MAAM,mBAAmB;IACvB,QAAQ,QAAQ,SAAS;IACzB,SAAS,QAAQ;IACjB,UAAU;GACX,EAAE,MAAM,OAAO;IACd,IAAI,QAAQ;IACZ,MAAM;IACN;IACA,GACF;IACE,SAAS,QAAQ;IACjB,UAAU;IACV,MAAM;IACN;GACD;AAEL;",
  "names": []
}
