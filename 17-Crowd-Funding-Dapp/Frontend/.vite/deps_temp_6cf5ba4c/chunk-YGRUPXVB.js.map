{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/storage/walletStorage.ts"],
  "sourcesContent": ["import { stringify } from \"../json.js\";\nimport type { AsyncStorage } from \"./AsyncStorage.js\";\n\nconst CONNECT_PARAMS_MAP_KEY = \"tw:connected-wallet-params\";\n\n/**\n * Save the connection params to storage for given wallet id\n * It saves an object with wallet id as key and params as value to storage on CONNECT_PARAMS_MAP_KEY\n * CONNECT_PARAMS_MAP_KEY: { walletId1: walletId1Params, walletId2: walletId2Params, ... }\n *\n * @param walletId\n * @param params\n * @internal\n */\nexport async function saveConnectParamsToStorage<T extends object>(\n  storage: AsyncStorage,\n  walletId: string,\n  params: T,\n) {\n  // params must be stringifiable\n  if (!isStringifiable(params)) {\n    throw new Error(\"given params are not stringifiable\");\n  }\n\n  const currentValueStr = await storage.getItem(CONNECT_PARAMS_MAP_KEY);\n\n  let value: Record<string, T>;\n\n  if (currentValueStr) {\n    try {\n      value = JSON.parse(currentValueStr);\n    } catch {\n      value = {};\n    }\n\n    value[walletId] = params;\n  } else {\n    value = {\n      [walletId]: params,\n    };\n  }\n\n  storage.setItem(CONNECT_PARAMS_MAP_KEY, stringify(value));\n}\n\n/**\n * Save the connection params to storage for given wallet id\n * It saves an object with wallet id as key and params as value to storage on CONNECT_PARAMS_MAP_KEY\n * CONNECT_PARAMS_MAP_KEY: { walletId1: walletId1Params, walletId2: walletId2Params, ... }\n *\n * @param walletId\n * @param params\n * @internal\n */\nexport async function deleteConnectParamsFromStorage(\n  storage: AsyncStorage,\n  walletId: string,\n) {\n  const currentValueStr = await storage.getItem(CONNECT_PARAMS_MAP_KEY);\n\n  let value: Record<string, object>;\n\n  if (currentValueStr) {\n    try {\n      value = JSON.parse(currentValueStr);\n    } catch {\n      value = {};\n    }\n\n    delete value[walletId];\n    storage.setItem(CONNECT_PARAMS_MAP_KEY, stringify(value));\n  }\n}\n\n/**\n * Get the saved connection params from storage for given wallet id\n * @internal\n */\nexport async function getSavedConnectParamsFromStorage<T extends object>(\n  storage: AsyncStorage,\n  walletId: string,\n): Promise<T | null> {\n  const valueStr = await storage.getItem(CONNECT_PARAMS_MAP_KEY);\n\n  if (!valueStr) {\n    return null;\n  }\n\n  try {\n    const value = JSON.parse(valueStr);\n\n    if (value?.[walletId]) {\n      return value[walletId];\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\nfunction isStringifiable(value: unknown): boolean {\n  try {\n    stringify(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],
  "mappings": ";;;;;AAGA,IAAM,yBAAyB;AAW/B,eAAsB,2BACpB,SACA,UACA,QAAS;AAGT,MAAI,CAAC,gBAAgB,MAAM,GAAG;AAC5B,UAAM,IAAI,MAAM,oCAAoC;EACtD;AAEA,QAAM,kBAAkB,MAAM,QAAQ,QAAQ,sBAAsB;AAEpE,MAAI;AAEJ,MAAI,iBAAiB;AACnB,QAAI;AACF,cAAQ,KAAK,MAAM,eAAe;IACpC,QAAQ;AACN,cAAQ,CAAA;IACV;AAEA,UAAM,QAAQ,IAAI;EACpB,OAAO;AACL,YAAQ;MACN,CAAC,QAAQ,GAAG;;EAEhB;AAEA,UAAQ,QAAQ,wBAAwB,UAAU,KAAK,CAAC;AAC1D;AAWA,eAAsB,+BACpB,SACA,UAAgB;AAEhB,QAAM,kBAAkB,MAAM,QAAQ,QAAQ,sBAAsB;AAEpE,MAAI;AAEJ,MAAI,iBAAiB;AACnB,QAAI;AACF,cAAQ,KAAK,MAAM,eAAe;IACpC,QAAQ;AACN,cAAQ,CAAA;IACV;AAEA,WAAO,MAAM,QAAQ;AACrB,YAAQ,QAAQ,wBAAwB,UAAU,KAAK,CAAC;EAC1D;AACF;AAMA,eAAsB,iCACpB,SACA,UAAgB;AAEhB,QAAM,WAAW,MAAM,QAAQ,QAAQ,sBAAsB;AAE7D,MAAI,CAAC,UAAU;AACb,WAAO;EACT;AAEA,MAAI;AACF,UAAM,QAAQ,KAAK,MAAM,QAAQ;AAEjC,QAAI,+BAAQ,WAAW;AACrB,aAAO,MAAM,QAAQ;IACvB;AAEA,WAAO;EACT,QAAQ;AACN,WAAO;EACT;AACF;AAEA,SAAS,gBAAgB,OAAc;AACrC,MAAI;AACF,cAAU,KAAK;AACf,WAAO;EACT,QAAQ;AACN,WAAO;EACT;AACF;",
  "names": []
}
