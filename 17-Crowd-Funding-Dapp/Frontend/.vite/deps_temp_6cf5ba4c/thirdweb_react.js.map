{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/react/web/ui/ConnectWallet/Modal/ConnectEmbed.tsx", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useIsAutoConnecting.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/transaction-button-utils.ts", "../../node_modules/thirdweb/src/react/web/hooks/transaction/useSendTransaction.tsx", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSendTransaction.ts", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/TransactionModal.tsx", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/ExecutingScreen.tsx", "../../node_modules/thirdweb/src/react/web/ui/TransactionButton/index.tsx", "../../node_modules/thirdweb/src/react/web/providers/thirdweb-provider.tsx", "../../node_modules/thirdweb/src/react/core/providers/thirdweb-provider.tsx", "../../node_modules/thirdweb/src/react/core/utils/structuralSharing.ts", "../../node_modules/thirdweb/src/wallets/eip5792/get-capabilities.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useCapabilities.ts", "../../node_modules/thirdweb/src/wallets/eip5792/send-calls.ts", "../../node_modules/thirdweb/src/wallets/eip5792/get-calls-status.ts", "../../node_modules/thirdweb/src/wallets/eip5792/wait-for-bundle.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useSendCalls.ts", "../../node_modules/thirdweb/src/react/core/hooks/wallets/useCallsStatus.ts", "../../node_modules/thirdweb/src/react/web/hooks/wallets/useLinkProfile.ts", "../../node_modules/thirdweb/src/utils/function-id.ts", "../../node_modules/thirdweb/src/react/core/hooks/contract/useReadContract.ts", "../../node_modules/thirdweb/src/react/core/hooks/contract/useContractEvents.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSimulateTransaction.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSendBatchTransaction.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useSendAndConfirmTransaction.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useEstimateGas.ts", "../../node_modules/thirdweb/src/react/core/hooks/transaction/useEstimateGasCost.ts", "../../node_modules/thirdweb/src/react/core/hooks/rpc/useBlockNumber.ts", "../../node_modules/thirdweb/src/react/core/utils/createQuery.ts", "../../node_modules/thirdweb/src/react/core/hooks/others/useInvalidateQueries.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithCryptoHistory.ts", "../../node_modules/thirdweb/src/pay/buyWithFiat/getHistory.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithFiatHistory.ts", "../../node_modules/thirdweb/src/react/core/hooks/pay/usePostOnrampQuote.ts", "../../node_modules/thirdweb/src/react/web/ui/PayEmbed.tsx", "../../node_modules/thirdweb/src/react/web/ui/ConnectWallet/useConnectModal.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/thirdweb/ClaimButton/index.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/thirdweb/BuyDirectListingButton/index.tsx", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/thirdweb/CreateDirectListingButton/index.tsx", "../../node_modules/thirdweb/src/extensions/marketplace/__generated__/IDirectListings/write/createListing.ts", "../../node_modules/thirdweb/src/extensions/marketplace/direct-listings/write/createListing.ts", "../../node_modules/thirdweb/src/react/web/ui/prebuilt/NFT/NFT.tsx", "../../node_modules/thirdweb/src/react/web/ui/SiteEmbed.tsx", "../../node_modules/thirdweb/src/react/web/ui/SiteLink.tsx"],
  "sourcesContent": ["\"use client\";\nimport { useEffect, useMemo } from \"react\";\nimport type { Chain } from \"../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type { Wallet } from \"../../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../../wallets/smart/types.js\";\nimport {\n  CustomThemeProvider,\n  useCustomTheme,\n} from \"../../../../core/design-system/CustomThemeProvider.js\";\nimport { radius } from \"../../../../core/design-system/index.js\";\nimport {\n  type SiweAuthOptions,\n  useSiweAuth,\n} from \"../../../../core/hooks/auth/useSiweAuth.js\";\nimport type { ConnectEmbedProps } from \"../../../../core/hooks/connection/ConnectEmbedProps.js\";\nimport { useActiveAccount } from \"../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useIsAutoConnecting } from \"../../../../core/hooks/wallets/useIsAutoConnecting.js\";\nimport { useConnectionManager } from \"../../../../core/providers/connection-manager.js\";\nimport { WalletUIStatesProvider } from \"../../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../../utils/canFitWideModal.js\";\nimport { usePreloadWalletProviders } from \"../../../utils/usePreloadWalletProviders.js\";\nimport { getDefaultWallets } from \"../../../wallets/defaultWallets.js\";\nimport { LoadingScreen } from \"../../../wallets/shared/LoadingScreen.js\";\nimport { AutoConnect } from \"../../AutoConnect/AutoConnect.js\";\nimport { DynamicHeight } from \"../../components/DynamicHeight.js\";\nimport { StyledDiv } from \"../../design-system/elements.js\";\nimport type { LocaleId } from \"../../types.js\";\nimport {\n  modalMaxWidthCompact,\n  modalMaxWidthWide,\n  reservedScreens,\n  wideModalMaxHeight,\n} from \"../constants.js\";\nimport { useConnectLocale } from \"../locale/getConnectLocale.js\";\nimport type { ConnectLocale } from \"../locale/types.js\";\nimport type { WelcomeScreen } from \"../screens/types.js\";\nimport { ConnectModalContent } from \"./ConnectModalContent.js\";\nimport { useSetupScreen } from \"./screen.js\";\n\n/**\n * An inline wallet connection component that allows to:\n *\n * - Connect to 350+ external wallets\n * - Connect with email, phone, passkey or socials\n * - Convert any wallet to a ERC4337 smart wallet for gasless transactions\n * - Sign in with ethereum (Auth)\n *\n * It renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v5/ConnectButton) component's modal - but directly inline in the page instead of being in a modal.\n *\n * Once connected, the component does not render any UI. It only renders UI if wallet is not connected.\n *\n * @example\n *\n * ## Default setup\n *\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { ConnectEmbed } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * <ConnectEmbed\n *    client={client}\n * />\n * ```\n *\n * [View all available config options](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps)\n *\n *  ## Customization options\n *\n * ### Customizing wallet options\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    wallets={[\n *      createWallet(\"io.metamask\"),\n *      createWallet(\"com.coinbase.wallet\"),\n *      createWallet(\"me.rainbow\"),\n *    ]}\n * />\n * ```\n *\n * [View all available wallets](https://portal.thirdweb.com/typescript/v5/supported-wallets)\n *\n *  ### Customizing the default chain to connect to\n *\n * ```tsx\n * import { base } from \"thirdweb/chains\";\n *\n * <ConnectEmbed\n *   client={client}\n *   chain={base}\n * />\n * ```\n *\n * ### Enabling Account Abstraction\n *\n * By passing the `accountAbstraction` prop, ALL connected wallets will be converted to smart accounts.\n * And by setting `sponsorGas` to `true`, all transactions done with those smart accounts will be sponsored.\n *\n * ```tsx\n * <ConnectEmbed\n * client={client}\n * accountAbstraction={{\n *   chain: sepolia,\n *   sponsorGas: true,\n * }}\n * />;\n * ```\n *\n * ### Enabling sign in with ethereum (Auth)\n *\n * ```tsx\n * <ConnectEmbed\n * client={client}\n * auth={{\n *   isLoggedIn: async (address) => {\n *     console.log(\"checking if logged in!\", { address });\n *     return await isLoggedIn();\n *   },\n *   doLogin: async (params) => {\n *     console.log(\"logging in!\");\n *     await login(params);\n *   },\n *   getLoginPayload: async ({ address }) =>\n *     generatePayload({ address }),\n *   doLogout: async () => {\n *     console.log(\"logging out!\");\n *     await logout();\n *   },\n * }}\n * />;\n * ```\n *\n * ### Customizing the theme\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    theme=\"light\"\n * />\n * ```\n *\n * For more granular control, you can also pass a custom theme object:\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    theme={lightTheme({\n *      colors: {\n *        modalBg: \"red\",\n *      },\n *    })}\n * />\n * ```\n *\n * [View all available themes properties](https://portal.thirdweb.com/references/typescript/v5/Theme)\n *\n * ### Changing the display language\n *\n * ```tsx\n * <ConnectEmbed\n *    client={client}\n *    locale=\"ja_JP\"\n * />\n * ```\n *\n * [View all available locales](https://portal.thirdweb.com/references/typescript/v5/LocaleId)\n *\n * @param props -\n * The props for the `ConnectEmbed` component.\n *\n * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details\n *\n * @returns A JSX element that renders the <ConnectEmbed> component.\n * @component\n */\nexport function ConnectEmbed(props: ConnectEmbedProps) {\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n  const show =\n    !activeAccount || (siweAuth.requiresAuth && !siweAuth.isLoggedIn);\n  const connectionManager = useConnectionManager();\n\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.chain) {\n      connectionManager.defineChains([props.chain]);\n    }\n  }, [props.chain, connectionManager]);\n\n  useEffect(() => {\n    if (props.chains) {\n      connectionManager.defineChains(props.chains);\n    }\n  }, [props.chains, connectionManager]);\n\n  const wallets = useMemo(\n    () =>\n      props.wallets ||\n      getDefaultWallets({\n        appMetadata: props.appMetadata,\n        chains: props.chains,\n      }),\n    [props.wallets, props.appMetadata, props.chains],\n  );\n  const localeId = props.locale || \"en_US\";\n  const localeQuery = useConnectLocale(localeId);\n\n  usePreloadWalletProviders({\n    wallets,\n    client: props.client,\n  });\n\n  const modalSize = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1\n      ? \"compact\"\n      : props.modalSize || (\"compact\" as const);\n  }, [wallets.length, props.modalSize]);\n\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      showThirdwebBranding: props.showThirdwebBranding !== false,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: undefined,\n      titleIconUrl: undefined,\n      requireApproval: props.requireApproval,\n    };\n  }, [\n    props.privacyPolicyUrl,\n    props.showThirdwebBranding,\n    props.termsOfServiceUrl,\n    props.requireApproval,\n  ]);\n\n  const preferredChain =\n    props.accountAbstraction?.chain || props.chain || props.chains?.[0];\n\n  const autoConnectComp = props.autoConnect !== false && (\n    <AutoConnect\n      chain={preferredChain}\n      appMetadata={props.appMetadata}\n      client={props.client}\n      wallets={wallets}\n      accountAbstraction={props.accountAbstraction}\n      timeout={\n        typeof props.autoConnect === \"boolean\"\n          ? undefined\n          : props.autoConnect?.timeout\n      }\n      onConnect={props.onConnect}\n    />\n  );\n\n  if (show) {\n    if (!localeQuery.data) {\n      return (\n        <>\n          {autoConnectComp}\n          <CustomThemeProvider theme={props.theme}>\n            <EmbedContainer modalSize={modalSize}>\n              <LoadingScreen />\n            </EmbedContainer>\n          </CustomThemeProvider>\n        </>\n      );\n    }\n\n    return (\n      <WalletUIStatesProvider theme={props.theme} isOpen={true}>\n        <ConnectEmbedContent\n          auth={props.auth}\n          accountAbstraction={props.accountAbstraction}\n          chain={preferredChain}\n          chains={props.chains}\n          client={props.client}\n          connectLocale={localeQuery.data}\n          size={modalSize}\n          meta={meta}\n          header={props.header}\n          localeId={props.locale || \"en_US\"}\n          onConnect={props.onConnect}\n          recommendedWallets={props.recommendedWallets}\n          showAllWallets={props.showAllWallets}\n          walletConnect={props.walletConnect}\n          wallets={wallets}\n          className={props.className}\n          modalSize={modalSize}\n          style={props.style}\n          welcomeScreen={props.welcomeScreen}\n        />\n        {autoConnectComp}\n      </WalletUIStatesProvider>\n    );\n  }\n\n  return <div>{autoConnectComp}</div>;\n}\n\n/**\n * @internal\n */\nconst ConnectEmbedContent = (props: {\n  modalSize?: \"compact\" | \"wide\";\n  className?: string;\n  style?: React.CSSProperties;\n  // ---\n  accountAbstraction: SmartWalletOptions | undefined;\n  auth: SiweAuthOptions | undefined;\n  chain: Chain | undefined;\n  chains: Chain[] | undefined;\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  meta: {\n    title?: string;\n    titleIconUrl?: string;\n    showThirdwebBranding?: boolean;\n    termsOfServiceUrl?: string;\n    privacyPolicyUrl?: string;\n  };\n  size: \"compact\" | \"wide\";\n  header:\n    | {\n        title?: string;\n        titleIcon?: string;\n      }\n    | true\n    | undefined;\n  localeId: LocaleId;\n  onConnect: ((wallet: Wallet) => void) | undefined;\n  recommendedWallets: Wallet[] | undefined;\n  showAllWallets: boolean | undefined;\n  walletConnect:\n    | {\n        projectId?: string;\n      }\n    | undefined;\n  wallets: Wallet[];\n  welcomeScreen: WelcomeScreen | undefined;\n}) => {\n  // const requiresSignIn = false;\n  const screenSetup = useSetupScreen({\n    size: props.size,\n    welcomeScreen: undefined,\n    wallets: props.wallets,\n  });\n  const { setScreen, initialScreen, screen } = screenSetup;\n  const activeWallet = useActiveWallet();\n  const activeAccount = useActiveAccount();\n  const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);\n\n  const isAutoConnecting = useIsAutoConnecting();\n\n  let content = null;\n\n  // if sign in is required but connect embed is showing the initial screen - change to sign in screen\n  useEffect(() => {\n    if (\n      siweAuth.requiresAuth &&\n      !siweAuth.isLoggedIn &&\n      activeAccount &&\n      screen === initialScreen\n    ) {\n      setScreen(reservedScreens.signIn);\n    }\n  }, [siweAuth, setScreen, activeAccount, screen, initialScreen]);\n\n  const modalSize = !canFitWideModal()\n    ? \"compact\"\n    : props.modalSize || (\"compact\" as const);\n\n  // show spinner on page load and during auto connecting a wallet\n  if (isAutoConnecting) {\n    content = <LoadingScreen />;\n  } else {\n    content = (\n      <ConnectModalContent\n        shouldSetActive={true}\n        screenSetup={screenSetup}\n        isOpen={true}\n        onClose={() => {\n          setScreen(initialScreen);\n        }}\n        setModalVisibility={() => {\n          // no op\n        }}\n        accountAbstraction={props.accountAbstraction}\n        auth={props.auth}\n        chain={props.chain}\n        chains={props.chains}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        meta={{\n          ...props.meta,\n          title:\n            typeof props.header === \"object\" ? props.header.title : undefined,\n          titleIconUrl:\n            typeof props.header === \"object\"\n              ? props.header.titleIcon\n              : undefined,\n        }}\n        size={props.size}\n        welcomeScreen={props.welcomeScreen}\n        hideHeader={!props.header}\n        onConnect={props.onConnect}\n        recommendedWallets={props.recommendedWallets}\n        showAllWallets={props.showAllWallets}\n        walletConnect={props.walletConnect}\n        wallets={props.wallets}\n        modalHeader={undefined}\n        walletIdsToHide={undefined}\n      />\n    );\n  }\n\n  return (\n    <EmbedContainer\n      modalSize={modalSize}\n      className={props.className}\n      style={props.style}\n    >\n      {modalSize === \"wide\" ? (\n        content\n      ) : (\n        <DynamicHeight> {content} </DynamicHeight>\n      )}\n    </EmbedContainer>\n  );\n};\n\nexport const EmbedContainer = /* @__PURE__ */ StyledDiv<{\n  modalSize: \"compact\" | \"wide\";\n}>((props) => {\n  const { modalSize } = props;\n  const theme = useCustomTheme();\n  return {\n    color: theme.colors.primaryText,\n    background: theme.colors.modalBg,\n    height: modalSize === \"compact\" ? \"auto\" : wideModalMaxHeight,\n    width: modalSize === \"compact\" ? modalMaxWidthCompact : modalMaxWidthWide,\n    boxSizing: \"border-box\",\n    position: \"relative\",\n    lineHeight: \"normal\",\n    borderRadius: radius.xl,\n    border: `1px solid ${theme.colors.borderColor}`,\n    overflow: \"hidden\",\n    fontFamily: theme.fontFamily,\n    \"& *::selection\": {\n      backgroundColor: theme.colors.selectedTextBg,\n      color: theme.colors.selectedTextColor,\n    },\n    \"& *\": {\n      boxSizing: \"border-box\",\n    },\n  };\n});\n", "\"use client\";\n\nimport { useSyncExternalStore } from \"react\";\nimport { useConnectionManagerCtx } from \"../../providers/connection-manager.js\";\n\n/**\n * A hook to check if the auto connect is in progress.\n * @example\n * ```jsx\n * function Example() {\n *   const isAutoConnecting = useIsAutoConnecting();\n *\n *   return <div> ... </div>;\n * }\n * ```\n * @returns A boolean indicating if the auto connect is in progress.\n * @walletConnection\n */\nexport function useIsAutoConnecting() {\n  const manager = useConnectionManagerCtx(\"useIsAutoConnecting\");\n  const store = manager.isAutoConnecting;\n  return useSyncExternalStore(store.subscribe, store.getValue, store.getValue);\n}\n", "import { useMutation } from \"@tanstack/react-query\";\nimport type { TransactionReceipt } from \"viem\";\nimport type { GaslessOptions } from \"../../../../transaction/actions/gasless/types.js\";\nimport {\n  type WaitForReceiptOptions,\n  waitForReceipt,\n} from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { stringify } from \"../../../../utils/json.js\";\nimport type { Theme } from \"../../design-system/index.js\";\nimport type {\n  SendTransactionPayModalConfig,\n  useSendTransactionCore,\n} from \"./useSendTransaction.js\";\n\n/**\n * Props for the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton) component.\n * @transaction\n */\nexport type TransactionButtonProps = {\n  /**\n   * The a function returning a prepared transaction of type [`PreparedTransaction`](https://portal.thirdweb.com/references/typescript/v5/PreparedTransaction) to be sent when the button is clicked\n   */\n  transaction: () => // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n    | PreparedTransaction<any>\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n    | Promise<PreparedTransaction<any>>;\n\n  /**\n   * Callback that will be called when the transaction is submitted onchain\n   * @param transactionResult - The object of type [`WaitForReceiptOptions`](https://portal.thirdweb.com/references/typescript/v5/WaitForReceiptOptions)\n   */\n  onTransactionSent?: (transactionResult: WaitForReceiptOptions) => void;\n  /**\n   *\n   * Callback that will be called when the transaction is confirmed onchain.\n   * If this callback is set, the component will wait for the transaction to be confirmed.\n   * @param receipt - The transaction receipt object of type [`TransactionReceipt`](https://portal.thirdweb.com/references/typescript/v5/TransactionReceipt)\n   */\n  onTransactionConfirmed?: (receipt: TransactionReceipt) => void;\n  /**\n   * The Error thrown when trying to send the transaction\n   * @param error - The `Error` object thrown\n   */\n  onError?: (error: Error) => void;\n  /**\n   * Callback to be called when the button is clicked\n   * This function is provoked before the transaction is sent\n   */\n  onClick?: () => void;\n  /**\n   * The className to apply to the button element for custom styling\n   */\n  className?: string;\n  /**\n   * The style to apply to the button element for custom styling\n   */\n  style?: React.CSSProperties;\n  /**\n   * Remove all default styling from the button\n   */\n  unstyled?: boolean;\n  /**\n   * The `React.ReactNode` to be rendered inside the button\n   */\n  children: React.ReactNode;\n\n  /**\n   * Configuration for gasless transactions.\n   * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.\n   */\n  gasless?: GaslessOptions;\n\n  /**\n   * The button's disabled state\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the \"Pay Modal\" that opens when the user doesn't have enough funds to send a transaction.\n   * Set `payModal: false` to disable the \"Pay Modal\" popup\n   *\n   * This configuration object includes the following properties to configure the \"Pay Modal\" UI:\n   *\n   * ### `locale`\n   * The language to use for the \"Pay Modal\" UI. Defaults to `\"en_US\"`.\n   *\n   * ### `supportedTokens`\n   * An object of type [`SupportedTokens`](https://portal.thirdweb.com/references/typescript/v5/SupportedTokens) to configure the tokens to show for a chain.\n   *\n   * ### `theme`\n   * The theme to use for the \"Pay Modal\" UI. Defaults to `\"dark\"`.\n   *\n   * It can be set to `\"light\"` or `\"dark\"` or an object of type [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) for a custom theme.\n   *\n   * Refer to [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme) helper functions to use the default light or dark theme and customize it.\n   */\n  payModal?: SendTransactionPayModalConfig;\n\n  /**\n   * The theme to use for the button\n   */\n  theme?: \"dark\" | \"light\" | Theme;\n\n  /**\n   * Set the type attribute of the button element.\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)\n   */\n  type?: HTMLButtonElement[\"type\"];\n};\n\nexport const useTransactionButtonMutation = (\n  props: TransactionButtonProps,\n  sendTransactionFn: ReturnType<typeof useSendTransactionCore>[\"mutateAsync\"],\n) => {\n  const {\n    transaction,\n    onTransactionSent,\n    onTransactionConfirmed,\n    onError,\n    onClick,\n  } = props;\n  return useMutation({\n    mutationFn: async () => {\n      if (onClick) {\n        onClick();\n      }\n      try {\n        const resolvedTx = await transaction();\n        const result = await sendTransactionFn(resolvedTx);\n\n        if (onTransactionSent) {\n          onTransactionSent(result);\n        }\n\n        if (onTransactionConfirmed) {\n          const receipt = await waitForReceipt(result);\n          if (receipt.status === \"reverted\") {\n            throw new Error(\n              `Execution reverted: ${stringify(receipt, null, 2)}`,\n            );\n          }\n          onTransactionConfirmed(receipt);\n        }\n      } catch (error) {\n        if (onError) {\n          onError(error as Error);\n        }\n      } finally {\n      }\n    },\n  });\n};\n", "import { useContext } from \"react\";\nimport {\n  type SendTransactionConfig,\n  type ShowModalData,\n  useSendTransactionCore,\n} from \"../../../core/hooks/transaction/useSendTransaction.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useSwitchActiveWalletChain } from \"../../../core/hooks/wallets/useSwitchActiveWalletChain.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { TransactionModal } from \"../../ui/TransactionButton/TransactionModal.js\";\n\n/**\n * A hook to send a transaction with from the user's connected wallet.\n *\n * You can send a transaction with a [prepared contract call](https://portal.thirdweb.com/references/typescript/v5/prepareContractCall), a [prepared transaction](https://portal.thirdweb.com/references/typescript/v5/prepareTransaction), or using a write [Extension](https://portal.thirdweb.com/react/v5/extensions).\n *\n * @returns A UseMutationResult object to send a transaction.\n * @param config Configuration for the `useSendTransaction` hook.\n * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.\n * @example\n *\n * ### Sending a prepared contract call\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { getContract, prepareContractCall } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: sepolia,\n *   client,\n * });\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   const transaction = prepareContractCall({\n *     contract,\n *     method: \"function transfer(address to, uint256 value)\",\n *     params: [to, value],\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * ### Using a write extension\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { mintTo } from \"thirdweb/extensions/erc721\";\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   const transaction = mintTo({\n *     contract,\n *     to: \"0x...\",\n *     nft: {\n *       name: \"NFT Name\",\n *       description: \"NFT Description\",\n *       image: \"https://example.com/image.png\",\n *     },\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * ### Sending a prepared transaction\n *\n * ```tsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * import { prepareTransaction } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n *\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * const onClick = () => {\n *   // Send 0.1 SepoliaETH to an address\n *   const transaction = prepareTransaction({\n *     to: \"0x...\",\n *     value: toWei(\"0.1\"),\n *     chain: sepolia,\n *     client: thirdwebClient,\n *   });\n *   sendTx(transaction);\n * };\n * ```\n *\n * @transaction\n */\nexport function useSendTransaction(config: SendTransactionConfig = {}) {\n  const switchChain = useSwitchActiveWalletChain();\n  const wallet = useActiveWallet();\n  const setRootEl = useContext(SetRootElementContext);\n  const payModal = config.payModal;\n\n  let payModalEnabled = true;\n\n  if (payModal === false || config.gasless) {\n    payModalEnabled = false;\n  }\n\n  const showPayModal = (data: ShowModalData) => {\n    if (payModal === false) return;\n    setRootEl(\n      <TransactionModal\n        title={payModal?.metadata?.name || \"Transaction\"}\n        tx={data.tx}\n        onComplete={data.sendTx}\n        onClose={() => {\n          setRootEl(null);\n          data.rejectTx(\n            new Error(\"User rejected transaction by closing modal\"),\n          );\n        }}\n        onTxSent={data.resolveTx}\n        client={data.tx.client}\n        localeId={payModal?.locale || \"en_US\"}\n        supportedTokens={payModal?.supportedTokens}\n        theme={payModal?.theme || \"dark\"}\n        payOptions={{\n          buyWithCrypto: payModal?.buyWithCrypto,\n          buyWithFiat: payModal?.buyWithFiat,\n          purchaseData: payModal?.purchaseData,\n          mode: \"transaction\",\n          transaction: data.tx,\n          metadata: payModal?.metadata,\n          onPurchaseSuccess: payModal?.onPurchaseSuccess,\n        }}\n      />,\n    );\n  };\n\n  return useSendTransactionCore({\n    showPayModal:\n      !payModalEnabled || payModal === false ? undefined : showPayModal,\n    gasless: config.gasless,\n    switchChain,\n    wallet,\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport { getGasPrice } from \"../../../../gas/get-gas-price.js\";\nimport type { BuyWithCryptoStatus } from \"../../../../pay/buyWithCrypto/getStatus.js\";\nimport type { BuyWithFiatStatus } from \"../../../../pay/buyWithFiat/getStatus.js\";\nimport type { FiatProvider } from \"../../../../pay/utils/commonTypes.js\";\nimport { estimateGasCost } from \"../../../../transaction/actions/estimate-gas-cost.js\";\nimport type { GaslessOptions } from \"../../../../transaction/actions/gasless/types.js\";\nimport { sendTransaction } from \"../../../../transaction/actions/send-transaction.js\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { resolvePromisedValue } from \"../../../../utils/promise/resolve-promised-value.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { getTokenBalance } from \"../../../../wallets/utils/getTokenBalance.js\";\nimport { getWalletBalance } from \"../../../../wallets/utils/getWalletBalance.js\";\nimport { fetchBuySupportedDestinations } from \"../../../web/ui/ConnectWallet/screens/Buy/swap/useSwapSupportedChains.js\";\nimport type { LocaleId } from \"../../../web/ui/types.js\";\nimport type { Theme } from \"../../design-system/index.js\";\nimport type { SupportedTokens } from \"../../utils/defaultTokens.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../utils/wallet.js\";\n\n/**\n * Configuration for the \"Pay Modal\" that opens when the user doesn't have enough funds to send a transaction.\n * Set `payModal: false` to disable the \"Pay Modal\" popup\n *\n * This configuration object includes the following properties to configure the \"Pay Modal\" UI:\n *\n * ### `locale`\n * The language to use for the \"Pay Modal\" UI. Defaults to `\"en_US\"`.\n *\n * ### `supportedTokens`\n * An object of type [`SupportedTokens`](https://portal.thirdweb.com/references/typescript/v5/SupportedTokens) to configure the tokens to show for a chain.\n *\n * ### `theme`\n * The theme to use for the \"Pay Modal\" UI. Defaults to `\"dark\"`.\n *\n * It can be set to `\"light\"` or `\"dark\"` or an object of type [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) for a custom theme.\n *\n * Refer to [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme) helper functions to use the default light or dark theme and customize it.\n */\nexport type SendTransactionPayModalConfig =\n  | {\n      metadata?: {\n        name?: string;\n        image?: string;\n      };\n      locale?: LocaleId;\n      supportedTokens?: SupportedTokens;\n      theme?: Theme | \"light\" | \"dark\";\n      buyWithCrypto?:\n        | false\n        | {\n            testMode?: boolean;\n          };\n      buyWithFiat?:\n        | false\n        | {\n            prefillSource?: {\n              currency?: \"USD\" | \"CAD\" | \"GBP\" | \"EUR\" | \"JPY\";\n            };\n            testMode?: boolean;\n            preferredProvider?: FiatProvider;\n          };\n      purchaseData?: object;\n      /**\n       * Callback to be called when the user successfully completes the purchase.\n       */\n      onPurchaseSuccess?: (\n        info:\n          | {\n              type: \"crypto\";\n              status: BuyWithCryptoStatus;\n            }\n          | {\n              type: \"fiat\";\n              status: BuyWithFiatStatus;\n            },\n      ) => void;\n    }\n  | false;\n\n/**\n * Configuration for the `useSendTransaction` hook.\n */\nexport type SendTransactionConfig = {\n  /**\n   * Refer to [`SendTransactionPayModalConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionPayModalConfig) for more details.\n   */\n  payModal?: SendTransactionPayModalConfig;\n\n  /**\n   * Configuration for gasless transactions.\n   * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.\n   */\n  gasless?: GaslessOptions;\n};\n\nexport type ShowModalData = {\n  tx: PreparedTransaction;\n  sendTx: () => void;\n  rejectTx: (reason: Error) => void;\n  resolveTx: (data: WaitForReceiptOptions) => void;\n};\n\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendTransaction } from \"thirdweb/react\";\n * const { mutate: sendTx, data: transactionResult } = useSendTransaction();\n *\n * // later\n * sendTx(tx);\n * ```\n * @internal\n */\nexport function useSendTransactionCore(args: {\n  showPayModal?: (data: ShowModalData) => void;\n  gasless?: GaslessOptions;\n  wallet: Wallet | undefined;\n  switchChain: (chain: Chain) => Promise<void>;\n}): UseMutationResult<WaitForReceiptOptions, Error, PreparedTransaction> {\n  const { showPayModal, gasless, wallet, switchChain } = args;\n  let _account = wallet?.getAccount();\n\n  return useMutation({\n    mutationFn: async (tx) => {\n      // switch chain if needed\n      if (wallet && tx.chain.id !== wallet.getChain()?.id) {\n        await switchChain(tx.chain);\n        // in smart wallet case, account may change after chain switch\n        _account = wallet.getAccount();\n      }\n\n      const account = _account;\n\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n\n      if (!showPayModal) {\n        return sendTransaction({\n          transaction: tx,\n          account,\n          gasless,\n        });\n      }\n\n      return new Promise<WaitForReceiptOptions>((resolve, reject) => {\n        const sendTx = async () => {\n          try {\n            const res = await sendTransaction({\n              transaction: tx,\n              account,\n              gasless,\n            });\n\n            resolve(res);\n          } catch (e) {\n            reject(e);\n          }\n        };\n\n        (async () => {\n          try {\n            const [_nativeValue, _erc20Value, supportedDestinations] =\n              await Promise.all([\n                resolvePromisedValue(tx.value),\n                resolvePromisedValue(tx.erc20Value),\n                fetchBuySupportedDestinations(tx.client).catch(() => null),\n              ]);\n\n            if (!supportedDestinations) {\n              // could not fetch supported destinations, just send the tx\n              sendTx();\n              return;\n            }\n\n            if (\n              !supportedDestinations\n                .map((x) => x.chain.id)\n                .includes(tx.chain.id) ||\n              (_erc20Value &&\n                !supportedDestinations.some(\n                  (x) =>\n                    x.chain.id === tx.chain.id &&\n                    x.tokens.find(\n                      (t) =>\n                        t.address.toLowerCase() ===\n                        _erc20Value.tokenAddress.toLowerCase(),\n                    ),\n                ))\n            ) {\n              // chain/token not supported, just send the tx\n              sendTx();\n              return;\n            }\n\n            const nativeValue = _nativeValue || 0n;\n            const erc20Value = _erc20Value?.amountWei || 0n;\n\n            const [nativeBalance, erc20Balance, gasCost] = await Promise.all([\n              getWalletBalance({\n                client: tx.client,\n                address: account.address,\n                chain: tx.chain,\n              }),\n              _erc20Value?.tokenAddress\n                ? getTokenBalance({\n                    client: tx.client,\n                    account,\n                    chain: tx.chain,\n                    tokenAddress: _erc20Value.tokenAddress,\n                  })\n                : undefined,\n              getTotalTxCostForBuy(tx, account.address),\n            ]);\n\n            const gasSponsored = hasSponsoredTransactionsEnabled(wallet);\n            const txGasCost = gasSponsored ? 0n : gasCost;\n            const nativeCost = nativeValue + txGasCost;\n\n            const shouldShowModal =\n              (erc20Value > 0n &&\n                erc20Balance &&\n                erc20Balance.value < erc20Value) ||\n              (nativeCost > 0n && nativeBalance.value < nativeCost);\n\n            if (shouldShowModal) {\n              showPayModal({\n                tx,\n                sendTx,\n                rejectTx: reject,\n                resolveTx: resolve,\n              });\n            } else {\n              sendTx();\n            }\n          } catch (e) {\n            console.error(\"Failed to estimate cost\", e);\n            // send it anyway?\n            sendTx();\n          }\n        })();\n      });\n    },\n  });\n}\n\nasync function getTotalTxCostForBuy(tx: PreparedTransaction, from?: string) {\n  try {\n    const gasCost = await estimateGasCost({\n      transaction: tx,\n      from,\n    });\n\n    const bufferCost = gasCost.wei / 10n;\n\n    // Note: get tx.value AFTER estimateGasCost\n    const txValue = await resolvePromisedValue(tx.value);\n\n    // add 10% extra gas cost to the estimate to ensure user buys enough to cover the tx cost\n    return gasCost.wei + bufferCost + (txValue || 0n);\n  } catch {\n    if (from) {\n      // try again without passing from\n      return await getTotalTxCostForBuy(tx);\n    }\n    // fallback if both fail, use the tx value + 2M * gas price\n    const value = await resolvePromisedValue(tx.value);\n\n    const gasPrice = await getGasPrice({\n      client: tx.client,\n      chain: tx.chain,\n    });\n\n    const buffer = 2_000_000n * gasPrice;\n\n    if (!value) {\n      return 0n + buffer;\n    }\n    return value + buffer;\n  }\n}\n", "import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { trackPayEvent } from \"../../../../analytics/track/pay.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\nimport type { PayUIOptions } from \"../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../core/hooks/wallets/useActiveWallet.js\";\nimport type { SupportedTokens } from \"../../../core/utils/defaultTokens.js\";\nimport { LoadingScreen } from \"../../wallets/shared/LoadingScreen.js\";\nimport { useConnectLocale } from \"../ConnectWallet/locale/getConnectLocale.js\";\nimport { LazyBuyScreen } from \"../ConnectWallet/screens/Buy/LazyBuyScreen.js\";\nimport { Modal } from \"../components/Modal.js\";\nimport type { LocaleId } from \"../types.js\";\nimport { ExecutingTxScreen } from \"./ExecutingScreen.js\";\n\ntype ModalProps = {\n  title: string;\n  onComplete: () => void;\n  onClose: () => void;\n  client: ThirdwebClient;\n  localeId: LocaleId;\n  supportedTokens?: SupportedTokens;\n  theme: Theme | \"light\" | \"dark\";\n  tx: PreparedTransaction;\n  payOptions: PayUIOptions;\n  onTxSent: (data: WaitForReceiptOptions) => void;\n};\n\nexport function TransactionModal(props: ModalProps) {\n  const account = useActiveAccount();\n  const wallet = useActiveWallet();\n\n  useQuery({\n    queryKey: [\"transaction-modal-event\"],\n    queryFn: () => {\n      if (!account || !wallet) return;\n      trackPayEvent({\n        client: props.client,\n        walletAddress: account.address,\n        walletType: wallet.id,\n        dstChainId: props.tx.chain.id,\n        event: \"open_pay_transaction_modal\",\n      });\n    },\n    enabled: !!wallet,\n  });\n\n  return (\n    <CustomThemeProvider theme={props.theme}>\n      <Modal\n        open={true}\n        size=\"compact\"\n        setOpen={(_open) => {\n          if (!_open) {\n            props.onClose();\n          }\n        }}\n      >\n        <TransactionModalContent {...props} />\n      </Modal>\n    </CustomThemeProvider>\n  );\n}\n\nfunction TransactionModalContent(props: ModalProps & { onBack?: () => void }) {\n  const localeQuery = useConnectLocale(props.localeId);\n  const [screen, setScreen] = useState<\"buy\" | \"execute-tx\">(\"buy\");\n\n  if (!localeQuery.data) {\n    return <LoadingScreen />;\n  }\n\n  if (screen === \"execute-tx\") {\n    return (\n      <ExecutingTxScreen\n        tx={props.tx}\n        closeModal={props.onClose}\n        onTxSent={props.onTxSent}\n      />\n    );\n  }\n\n  return (\n    <LazyBuyScreen\n      title={props.title}\n      isEmbed={false}\n      client={props.client}\n      onBack={props.onBack}\n      supportedTokens={props.supportedTokens}\n      connectLocale={localeQuery.data}\n      theme={typeof props.theme === \"string\" ? props.theme : props.theme.type}\n      payOptions={props.payOptions}\n      onDone={() => {\n        setScreen(\"execute-tx\");\n      }}\n      connectOptions={undefined}\n    />\n  );\n}\n", "import { CheckCircledIcon, ExternalLinkIcon } from \"@radix-ui/react-icons\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport type { Hex } from \"viem\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { formatExplorerTxUrl } from \"../../../../utils/url.js\";\nimport { iconSize } from \"../../../core/design-system/index.js\";\nimport { useChainExplorers } from \"../../../core/hooks/others/useChainQuery.js\";\nimport { useSendTransaction } from \"../../hooks/transaction/useSendTransaction.js\";\nimport { AccentFailIcon } from \"../ConnectWallet/icons/AccentFailIcon.js\";\nimport { Spacer } from \"../components/Spacer.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Container, ModalHeader } from \"../components/basic.js\";\nimport { Button, ButtonLink } from \"../components/buttons.js\";\nimport { Text } from \"../components/text.js\";\n\nexport function ExecutingTxScreen(props: {\n  tx: PreparedTransaction;\n  closeModal: () => void;\n  onTxSent: (data: WaitForReceiptOptions) => void;\n  onBack?: () => void;\n}) {\n  const sendTxCore = useSendTransaction({\n    payModal: false,\n  });\n  const [txHash, setTxHash] = useState<Hex | undefined>();\n  const chainExplorers = useChainExplorers(props.tx.chain);\n  const [status, setStatus] = useState<\"loading\" | \"failed\" | \"sent\">(\n    \"loading\",\n  );\n\n  const sendTx = useCallback(async () => {\n    setStatus(\"loading\");\n    try {\n      const txData = await sendTxCore.mutateAsync(props.tx);\n      setTxHash(txData.transactionHash);\n      props.onTxSent(txData);\n      setStatus(\"sent\");\n    } catch (e) {\n      // Do not reject the transaction here, because the user may want to try again\n      // we only reject on modal close\n      console.error(e);\n      setStatus(\"failed\");\n    }\n  }, [sendTxCore, props.tx, props.onTxSent]);\n\n  const done = useRef(false);\n  useEffect(() => {\n    if (done.current) {\n      return;\n    }\n\n    done.current = true;\n    sendTx();\n  }, [sendTx]);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title=\"Transaction\" onBack={props.onBack} />\n\n      <Spacer y=\"xxl\" />\n      <Spacer y=\"xxl\" />\n\n      <Container flex=\"row\" center=\"x\">\n        {status === \"loading\" && <Spinner size=\"xxl\" color=\"accentText\" />}\n        {status === \"failed\" && <AccentFailIcon size={iconSize[\"3xl\"]} />}\n        {status === \"sent\" && (\n          <Container color=\"success\" flex=\"row\" center=\"both\">\n            <CheckCircledIcon\n              width={iconSize[\"3xl\"]}\n              height={iconSize[\"3xl\"]}\n            />\n          </Container>\n        )}\n      </Container>\n      <Spacer y=\"lg\" />\n\n      <Text color=\"primaryText\" center size=\"lg\">\n        {status === \"loading\" && \"Sending transaction\"}\n        {status === \"failed\" && \"Transaction failed\"}\n        {status === \"sent\" && \"Transaction sent\"}\n      </Text>\n      <Spacer y=\"sm\" />\n      <Text color=\"danger\" center size=\"sm\">\n        {status === \"failed\" && sendTxCore.error\n          ? sendTxCore.error.message\n          : \"\"}\n      </Text>\n\n      <Spacer y=\"xxl\" />\n      <Spacer y=\"xxl\" />\n\n      {status === \"failed\" && (\n        <Button variant=\"accent\" fullWidth onClick={sendTx}>\n          Try Again\n        </Button>\n      )}\n\n      {status === \"sent\" && (\n        <>\n          <Button variant=\"accent\" fullWidth onClick={props.closeModal}>\n            Done\n          </Button>\n          {txHash && (\n            <>\n              <Spacer y=\"sm\" />\n              <ButtonLink\n                fullWidth\n                variant=\"outline\"\n                href={formatExplorerTxUrl(\n                  chainExplorers.explorers[0]?.url ?? \"\",\n                  txHash,\n                )}\n                target=\"_blank\"\n                as=\"a\"\n                gap=\"xs\"\n                style={{\n                  textDecoration: \"none\",\n                  color: \"inherit\",\n                }}\n              >\n                View on Explorer\n                <ExternalLinkIcon width={iconSize.sm} height={iconSize.sm} />\n              </ButtonLink>\n            </>\n          )}\n        </>\n      )}\n    </Container>\n  );\n}\n", "\"use client\";\nimport { CustomThemeProvider } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  type TransactionButtonProps,\n  useTransactionButtonMutation,\n} from \"../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useActiveAccount } from \"../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useSendTransaction } from \"../../hooks/transaction/useSendTransaction.js\";\nimport { Spinner } from \"../components/Spinner.js\";\nimport { Button } from \"../components/buttons.js\";\n\n/**\n * TransactionButton component is used to render a button that triggers a transaction.\n * It shows a \"Switch Network\" button if the connected wallet is on a different chain than the transaction.\n * @param props - The props for this component.\n * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.\n * @example\n *\n * ### Basic usage\n * ```tsx\n * <TransactionButton\n *   transaction={() => {}}\n *   onTransactionConfirmed={handleSuccess}\n *   onError={handleError}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Customize the styling by passing the `unstyled` prop and your inline styles and/or classes:\n * ```tsx\n * <TransactionButton\n *   transaction={() => {}}\n *   unstyled\n *   className=\"bg-white text-black rounded-md p-4 flex items-center justify-center\"\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Handle errors\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onError={(err) => {\n *     alert(err.message);\n *     // Add your own logic here\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Alert when a transaction is sent\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onTransactionSent={(tx) => {\n *     alert(\"transaction sent!\");\n *     // Add your own logic here. For example, a toast\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### Alert when a transaction is completed\n * ```tsx\n * <TransactionButton\n *   transaction={() => ...}\n *   onTransactionConfirmed={(tx) => {\n *     alert(\"transaction sent!\");\n *     console.log(tx);\n *     // Add your own logic here. For example, a toast\n *   }}\n * >\n *   Confirm Transaction\n * </TransactionButton>\n * ```\n *\n * ### The onClick prop, if provided, will be called before the transaction is sent.\n * ```tsx\n * <TransactionButton\n *   onClick={() => alert(\"Transaction is about to be sent\")}\n *   transaction={...}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Attach custom Pay metadata\n * ```tsx\n * <TransactionButton\n *   payModal={{\n *     // This image & title will show up in the Pay modal\n *     metadata: {\n *       name: \"Van Gogh Starry Night\",\n *       image: \"https://unsplash.com/starry-night.png\"\n *     }\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```tsx\n * <TransactionButton\n *   gasless={{\n *     provider: \"engine\",\n *     relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *     relayerForwarderAddress: \"0x...\",\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```tsx\n * <TransactionButton\n *   gasless={{\n *     provider: \"openzeppelin\",\n *     relayerUrl: \"https://...\",\n *     relayerForwarderAddress: \"0x...\",\n *   }}\n * >\n *   ...\n * </TransactionButton>\n * ```\n * @component\n */\nexport function TransactionButton(props: TransactionButtonProps) {\n  const {\n    children,\n    transaction,\n    onTransactionSent,\n    onTransactionConfirmed,\n    onError,\n    onClick,\n    gasless,\n    payModal,\n    disabled,\n    unstyled,\n    ...buttonProps\n  } = props;\n  const account = useActiveAccount();\n  const sendTransaction = useSendTransaction({ gasless, payModal });\n  const { mutate: handleClick, isPending } = useTransactionButtonMutation(\n    props,\n    sendTransaction.mutateAsync,\n  );\n\n  return (\n    <CustomThemeProvider theme={props.theme}>\n      <Button\n        gap=\"xs\"\n        disabled={!account || disabled || isPending}\n        variant=\"primary\"\n        unstyled={unstyled}\n        data-is-loading={isPending}\n        onClick={() => handleClick()}\n        {...buttonProps}\n        style={\n          !unstyled\n            ? {\n                opacity: !account || disabled ? 0.5 : 1,\n                minWidth: \"165px\",\n                position: \"relative\",\n                ...buttonProps.style,\n              }\n            : {\n                position: \"relative\",\n                ...buttonProps.style,\n              }\n        }\n      >\n        <span style={{ visibility: isPending ? \"hidden\" : \"visible\" }}>\n          {children}\n        </span>\n        {isPending && (\n          <div\n            style={{\n              position: \"absolute\",\n              display: \"flex\",\n              alignItems: \"center\",\n              height: \"100%\",\n              top: 0,\n              bottom: 0,\n              margin: \"auto\",\n            }}\n          >\n            <Spinner size=\"md\" color=\"primaryButtonText\" />\n          </div>\n        )}\n      </Button>\n    </CustomThemeProvider>\n  );\n}\n", "\"use client\";\nimport { useMemo } from \"react\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport {\n  type ConnectionManager,\n  createConnectionManager,\n} from \"../../../wallets/manager/index.js\";\nimport { ThirdwebProviderCore } from \"../../core/providers/thirdweb-provider.js\";\n\n/**\n * The ThirdwebProvider is component is a provider component that sets up the React Query client.\n * @param props - The props for the ThirdwebProvider\n * @example\n * ```jsx\n * import { ThirdwebProvider } from \"thirdweb/react\";\n *\n * function Example() {\n *  return (\n *    <ThirdwebProvider>\n *      <App />\n *    </ThirdwebProvider>\n *   )\n * }\n * ```\n * @component\n */\nexport function ThirdwebProvider(\n  props: React.PropsWithChildren<{\n    connectionManager?: ConnectionManager;\n  }>,\n) {\n  const connectionManager = useMemo(\n    () => props.connectionManager || createConnectionManager(webLocalStorage),\n    [props.connectionManager],\n  );\n\n  return (\n    <ThirdwebProviderCore manager={connectionManager}>\n      {props.children}\n    </ThirdwebProviderCore>\n  );\n}\n", "\"use client\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { waitForReceipt } from \"../../../transaction/actions/wait-for-tx-receipt.js\";\nimport { isBaseTransactionOptions } from \"../../../transaction/types.js\";\nimport type { Hex } from \"../../../utils/encoding/hex.js\";\nimport { isObjectWithKeys } from \"../../../utils/type-guards.js\";\nimport type { ConnectionManager } from \"../../../wallets/manager/index.js\";\nimport { structuralSharing } from \"../utils/structuralSharing.js\";\nimport { SetRootElementContext } from \"./RootElementContext.js\";\nimport { ConnectionManagerCtx } from \"./connection-manager.js\";\nimport { invalidateWalletBalance } from \"./invalidateWalletBalance.js\";\n\n/**\n * @internal\n */\nexport function ThirdwebProviderCore(props: {\n  manager: ConnectionManager;\n  children: React.ReactNode;\n}) {\n  const [el, setEl] = useState<React.ReactNode>(null);\n  const [queryClient] = useState(\n    () =>\n      new QueryClient({\n        defaultOptions: {\n          mutations: {\n            onSettled: (data, _error, variables) => {\n              if (isBaseTransactionOptions(variables)) {\n                if (\n                  isObjectWithKeys(data, [\"transactionHash\"]) &&\n                  isObjectWithKeys(variables, [\"client\", \"chain\"])\n                ) {\n                  waitForReceipt({\n                    transactionHash: data.transactionHash as Hex, // We know it exists from the if\n                    client: variables.client,\n                    chain: variables.chain,\n                  })\n                    .catch((e) => {\n                      // swallow errors for receipts, but log\n                      console.error(\"[Transaction Error]\", e);\n                    })\n                    .then(() => {\n                      return Promise.all([\n                        queryClient.invalidateQueries({\n                          queryKey:\n                            // invalidate any readContract queries for this chainId:contractAddress\n                            [\n                              \"readContract\",\n                              variables.__contract?.chain.id,\n                              variables.__contract?.address,\n                            ] as const,\n                        }),\n                        invalidateWalletBalance(\n                          queryClient,\n                          variables.__contract?.chain.id,\n                        ),\n                      ]);\n                    });\n                }\n              }\n            },\n          },\n          queries: {\n            // With SSR, we usually want to set some default staleTime\n            // above 0 to avoid refetching immediately on the client\n            staleTime: 60 * 1000,\n            structuralSharing,\n          },\n        },\n      }),\n  );\n\n  return (\n    <ConnectionManagerCtx.Provider value={props.manager}>\n      <QueryClientProvider client={queryClient}>\n        <SetRootElementContext.Provider value={setEl}>\n          {props.children}\n        </SetRootElementContext.Provider>\n        {el}\n      </QueryClientProvider>\n    </ConnectionManagerCtx.Provider>\n  );\n}\n", "import { replaceEqualDeep } from \"@tanstack/react-query\";\n\n/** Forked from https://github.com/epoberezkin/fast-deep-equal */\n// biome-ignore lint/suspicious/noExplicitAny: This function by nature takes any object\nfunction deepEqual(a: any, b: any) {\n  if (a === b) return true;\n\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor) return false;\n\n    let length: number;\n    let i: number;\n\n    if (Array.isArray(a) && Array.isArray(b)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n\n    const keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0; )\n      // biome-ignore lint/style/noNonNullAssertion: We know its there\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i]!)) return false;\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i];\n\n      if (key && !deepEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  // biome-ignore lint/suspicious/noSelfCompare: <explanation>\n  return a !== a && b !== b;\n}\n\nexport function structuralSharing<T>(oldData: T | undefined, newData: T) {\n  if (deepEqual(oldData, newData)) {\n    return oldData as T;\n  }\n  return replaceEqualDeep(oldData, newData) as T;\n}\n", "import type { Prettify } from \"../../utils/type-utils.js\";\nimport { isCoinbaseSDKWallet } from \"../coinbase/coinbaseWebSDK.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { isSmartWallet } from \"../smart/index.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport type { WalletCapabilities, WalletCapabilitiesRecord } from \"./types.js\";\n\nexport type GetCapabilitiesOptions<ID extends WalletId = WalletId> = {\n  wallet: Wallet<ID>;\n};\n\nexport type GetCapabilitiesResult = Prettify<\n  WalletCapabilitiesRecord<WalletCapabilities, number>\n>;\n\n/**\n * Get the capabilities of a wallet based on the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) specification.\n *\n * @note This function is dependent on the wallet's support for EIP-5792, but will not throw.\n * **The returned object contains a `message` field detailing any issues with the wallet's support for EIP-5792.**\n *\n * @param {GetCapabilitiesOptions} options\n * @param {Wallet} options.wallet - The wallet to get the capabilities of.\n * @returns {Promise<GetCapabilitiesResult>} - A promise that resolves to the capabilities of the wallet based on the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) spec.\n * @beta\n * @example\n * ```ts\n * import { getCapabilities } from \"thirdweb/wallets/eip5792\";\n *\n * const wallet = createWallet(\"com.coinbase.wallet\");\n * const capabilities = await getCapabilities({ wallet });\n * ```\n *\n * @extension EIP5792\n */\nexport async function getCapabilities<const ID extends WalletId = WalletId>({\n  wallet,\n}: GetCapabilitiesOptions<ID>): Promise<GetCapabilitiesResult> {\n  const account = wallet.getAccount();\n  if (!account) {\n    return {\n      message: `Can't get capabilities, no account connected for wallet: ${wallet.id}`,\n    };\n  }\n\n  if (isSmartWallet(wallet)) {\n    const { smartWalletGetCapabilities } = await import(\n      \"../smart/lib/smart-wallet-capabilities.js\"\n    );\n    return smartWalletGetCapabilities({ wallet });\n  }\n\n  if (isInAppWallet(wallet)) {\n    const { inAppWalletGetCapabilities } = await import(\n      \"../in-app/core/eip5972/in-app-wallet-capabilities.js\"\n    );\n    return inAppWalletGetCapabilities({ wallet });\n  }\n\n  if (isCoinbaseSDKWallet(wallet)) {\n    const { coinbaseSDKWalletGetCapabilities } = await import(\n      \"../coinbase/coinbaseWebSDK.js\"\n    );\n    return coinbaseSDKWalletGetCapabilities({ wallet });\n  }\n\n  // TODO: Add Wallet Connect support\n  if (isWalletConnect(wallet)) {\n    return {\n      message: \"getCapabilities is not yet supported with Wallet Connect\",\n    };\n  }\n\n  // Default to injected wallet\n  const provider = getInjectedProvider(wallet.id);\n\n  try {\n    return await provider.request({\n      method: \"wallet_getCapabilities\",\n      params: [account.address],\n    });\n  } catch (error: unknown) {\n    if (/unsupport|not support|not available/i.test((error as Error).message)) {\n      return {\n        message: `${wallet.id} does not support wallet_getCapabilities, reach out to them directly to request EIP-5792 support.`,\n      };\n    }\n    throw error;\n  }\n}\n", "import { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport {\n  type GetCapabilitiesResult,\n  getCapabilities,\n} from \"../../../../wallets/eip5792/get-capabilities.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook to get the current wallet's capabilities according to [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792).\n *\n * @note This function is dependent on the wallet's support for EIP-5792, but will not throw.\n * **The returned object contains a `message` field detailing any issues with the wallet's support for EIP-5792.**\n *\n * @returns a React Query object.\n * @beta\n * @example\n * ```tsx\n * import { useCapabilities } from \"thirdweb/react\";\n * const { data: capabilities, isLoading } = useCapabilities();\n * ```\n * @extension EIP5792\n */\nexport function useCapabilities(options?: {\n  queryOptions?: {\n    enabled?: boolean;\n    retry?: number;\n  };\n}): UseQueryResult<GetCapabilitiesResult> {\n  const wallet = useActiveWallet();\n  return useQuery({\n    queryKey: [\n      \"getCapabilities\",\n      wallet?.getChain()?.id || -1,\n      wallet?.id,\n    ] as const,\n    queryFn: async () => {\n      if (!wallet) {\n        return {\n          message: \"Can't get capabilities, no wallet connected\",\n        } as const;\n      }\n      return getCapabilities({ wallet });\n    },\n    retry: false,\n    ...options?.queryOptions,\n  });\n}\n", "import type { Abi, AbiFunction } from \"abitype\";\nimport type { WalletSendCallsParameters as ViemWalletSendCallsParameters } from \"viem\";\nimport type { Chain } from \"../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { encode } from \"../../transaction/actions/encode.js\";\nimport type { PreparedTransaction } from \"../../transaction/prepare-transaction.js\";\nimport { type Address, getAddress } from \"../../utils/address.js\";\nimport { type Hex, numberToHex } from \"../../utils/encoding/hex.js\";\nimport {\n  type PromisedObject,\n  resolvePromisedValue,\n} from \"../../utils/promise/resolve-promised-value.js\";\nimport type { OneOf } from \"../../utils/type-utils.js\";\nimport { isCoinbaseSDKWallet } from \"../coinbase/coinbaseWebSDK.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { isSmartWallet } from \"../smart/index.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\nimport type { WalletId } from \"../wallet-types.js\";\nimport type {\n  EIP5792Call,\n  WalletSendCallsId,\n  WalletSendCallsParameters,\n} from \"./types.js\";\n\ntype WalletCall = OneOf<{\n  to?: string | undefined; // TODO: Make this required but compatible with StaticPrepareTransactionOptions to prevent runtime error\n  data?: Hex | undefined;\n  value?: bigint | undefined;\n}>;\n\nexport type PreparedSendCall<\n  abi extends Abi = [],\n  abiFunction extends AbiFunction = AbiFunction,\n> = PreparedTransaction<abi, abiFunction, PrepareCallOptions>;\n\nexport type PrepareCallOptions = {\n  chain: Chain;\n  client: ThirdwebClient;\n} & PromisedObject<WalletCall>;\n\nexport type SendCallsOptions<\n  ID extends WalletId = WalletId,\n  abi extends Abi = [],\n  abiFunction extends AbiFunction = AbiFunction,\n> = {\n  wallet: Wallet<ID>;\n  calls: PreparedSendCall<abi, abiFunction>[];\n  capabilities?: WalletSendCallsParameters[number][\"capabilities\"];\n  version?: WalletSendCallsParameters[number][\"version\"];\n  chain?: Chain;\n};\n\nexport type SendCallsResult = WalletSendCallsId;\n\n/**\n * Send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This function works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n * @note This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {SendCallsOptions} options\n * @param {Wallet} options.wallet - The wallet to send the calls to.\n * @param {PreparedSendCall[]} options.calls - An array of prepared transactions to send.\n * @param {WalletSendCallsParameters[number][\"capabilities\"]} [options.capabilities] - Capabilities objects to use, see the [EIP-5792 spec](https://eips.ethereum.org/EIPS/eip-5792) for details.\n * @param {string} [options.version=\"1.0\"] - The `wallet_sendCalls` version to use, defaults to \"1.0\".\n * @param {Chain} [options.chain] - A {@link Chain} instance to override the wallet's current chain.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @see getCallsStatus for how to retrieve the status of the bundle.\n * @see getCapabilities for how to retrieve the capabilities of the wallet.\n * @beta\n * @example\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { sendCalls } from \"thirdweb/wallets/eip5792\";\n *\n * const client = createThirdwebClient({ clientId: ... });\n * const wallet = createWallet(\"com.coinbase.wallet\");\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const bundleId = await sendCalls({\n *   wallet,\n *   client,\n *   calls: [send1, send2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * @note We recommend proxying any paymaster calls via an API route you setup and control.\n * ```\n * @extension EIP5792\n */\nexport async function sendCalls<const ID extends WalletId>(\n  options: SendCallsOptions<ID>,\n): Promise<SendCallsResult> {\n  const {\n    wallet,\n    calls,\n    capabilities,\n    version = \"1.0\",\n    chain = wallet.getChain(),\n  } = options;\n\n  if (!chain) {\n    throw new Error(\n      `Cannot send calls, no active chain found for wallet: ${wallet.id}`,\n    );\n  }\n\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\n      `Cannot send calls, no account connected for wallet: ${wallet.id}`,\n    );\n  }\n\n  // These conveniently operate the same\n  if (isSmartWallet(wallet) || isInAppWallet(wallet)) {\n    const { inAppWalletSendCalls } = await import(\n      \"../in-app/core/eip5972/in-app-wallet-calls.js\"\n    );\n    return inAppWalletSendCalls({ account, calls });\n  }\n\n  const preparedCalls: EIP5792Call[] = await Promise.all(\n    calls.map(async (call) => {\n      const { to, value } = call;\n      if (to === undefined && call.data === undefined) {\n        throw new Error(\"Cannot send call, `to` or `data` must be provided.\");\n      }\n\n      const [_to, _data, _value] = await Promise.all([\n        resolvePromisedValue(to),\n        encode(call),\n        resolvePromisedValue(value),\n      ]);\n\n      return {\n        to: _to as Address,\n        data: _data as Hex,\n        value:\n          typeof _value === \"bigint\" || typeof _value === \"number\"\n            ? numberToHex(_value)\n            : undefined,\n      };\n    }),\n  );\n\n  const injectedWalletCallParams: WalletSendCallsParameters = [\n    {\n      from: getAddress(account.address),\n      calls: preparedCalls,\n      capabilities,\n      version,\n      chainId: numberToHex(chain.id),\n    },\n  ];\n\n  if (isCoinbaseSDKWallet(wallet)) {\n    const { coinbaseSDKWalletSendCalls } = await import(\n      \"../coinbase/coinbaseWebSDK.js\"\n    );\n    return coinbaseSDKWalletSendCalls({\n      wallet,\n      params: injectedWalletCallParams,\n    });\n  }\n\n  if (isWalletConnect(wallet)) {\n    throw new Error(\"sendCalls is not yet supported for Wallet Connect\");\n  }\n\n  // Default to injected wallet\n  const provider = getInjectedProvider(wallet.id);\n  try {\n    return await provider.request({\n      method: \"wallet_sendCalls\",\n      params: injectedWalletCallParams as ViemWalletSendCallsParameters, // The viem type definition is slightly different\n    });\n  } catch (error) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      throw new Error(\n        `${wallet.id} does not support wallet_sendCalls, reach out to them directly to request EIP-5792 support.`,\n      );\n    }\n    throw error;\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { isCoinbaseSDKWallet } from \"../coinbase/coinbaseWebSDK.js\";\nimport { isInAppWallet } from \"../in-app/core/wallet/index.js\";\nimport { getInjectedProvider } from \"../injected/index.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { isSmartWallet } from \"../smart/index.js\";\nimport { isWalletConnect } from \"../wallet-connect/controller.js\";\nimport type { GetCallsStatusResponse, WalletSendCallsId } from \"./types.js\";\n\nexport type GetCallsStatusOptions = {\n  wallet: Wallet;\n  client: ThirdwebClient;\n  bundleId: WalletSendCallsId;\n};\n\n/**\n * Get the status of an [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) bundle.\n *\n * @note This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param {GetCallsStatusOptions} options\n * @param {Wallet} options.wallet - The wallet that send the original calls.\n * @param {ThirdwebClient} options.client - A {@link ThirdwebClient} instance.\n * @param {WalletSendCallsId} options.bundleId - The ID of the bundle to get the status of.\n * @throws an error if the wallet does not support EIP-5792.\n * @returns {Promise<GetCallsStatusResponse>} - A promise that resolves to the bundle's status and receipts (if available). {@link GetCallsStatusResponse}\n * @beta\n * @example\n * ```ts\n *  import { createThirdwebClient } from \"thirdweb\";\n *  import { sendCalls, getCallsStatus } from \"thirdweb/wallets/eip5792\";\n *\n *  const client = createThirdwebClient({ clientId: ... });\n *\n *  const bundleId = await sendCalls({ wallet, client, calls });\n *\n *  let result;\n *  while (result.status !== \"CONFIRMED\") {\n *    result = await getCallsStatus({ wallet, client, bundleId });\n *  }\n * ```\n * @extension EIP5792\n * @extension EIP5792\n */\nexport async function getCallsStatus({\n  wallet,\n  client,\n  bundleId,\n}: GetCallsStatusOptions): Promise<GetCallsStatusResponse> {\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\n      `Failed to get call status, no account found for wallet ${wallet.id}`,\n    );\n  }\n\n  // These conveniently operate the same\n  if (isSmartWallet(wallet) || isInAppWallet(wallet)) {\n    const { inAppWalletGetCallsStatus } = await import(\n      \"../in-app/core/eip5972/in-app-wallet-calls.js\"\n    );\n    return inAppWalletGetCallsStatus({ wallet, client, bundleId });\n  }\n\n  if (isCoinbaseSDKWallet(wallet)) {\n    const { coinbaseSDKWalletGetCallsStatus } = await import(\n      \"../coinbase/coinbaseWebSDK.js\"\n    );\n    return coinbaseSDKWalletGetCallsStatus({ wallet, bundleId });\n  }\n\n  if (isWalletConnect(wallet)) {\n    throw new Error(\"getCallsStatus is not yet supported for Wallet Connect\");\n  }\n\n  // Default to injected wallet\n  const provider = getInjectedProvider(wallet.id);\n  try {\n    return await provider.request({\n      method: \"wallet_getCallsStatus\",\n      params: [bundleId],\n    });\n  } catch (error) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      throw new Error(\n        `${wallet.id} does not support wallet_getCallsStatus, reach out to them directly to request EIP-5792 support.`,\n      );\n    }\n    throw error;\n  }\n}\n", "import type { Chain } from \"../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { watchBlockNumber } from \"../../rpc/watchBlockNumber.js\";\nimport type { Prettify } from \"../../utils/type-utils.js\";\nimport type { Wallet } from \"../interfaces/wallet.js\";\nimport { getCallsStatus } from \"./get-calls-status.js\";\nimport type { GetCallsStatusResponse, WalletSendCallsId } from \"./types.js\";\n\nconst DEFAULT_MAX_BLOCKS_WAIT_TIME = 100;\n\nconst map = new Map<string, Promise<GetCallsStatusResponse>>();\n\nexport type WaitForBundleOptions = Prettify<{\n  bundleId: WalletSendCallsId;\n  wallet: Wallet;\n  client: ThirdwebClient;\n  chain: Chain;\n  maxBlocksWaitTime?: number;\n}>;\n\n/**\n * Waits for the [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) bundle to be confirmed.\n *\n * @note This function is dependent on the wallet's support for EIP-5792 and could fail.\n *\n * @param options - The options for waiting for the bundle.\n * By default, the max wait time is 100 blocks.\n * @returns A promise that resolves with the final {@link getCallsStatus} result.\n * @throws an error if the wallet does not support EIP-5792.\n * @beta\n * @example\n * ```ts\n * import { waitForBundle } from \"thirdweb/wallets/eip5792\";\n * const result = await waitForBundle({\n *   client,\n *   chain,\n *   wallet,\n *   bundleId: \"0x123...\",\n * });\n * ```\n * @extension EIP5792\n */\nexport function waitForBundle(\n  options: WaitForBundleOptions,\n): Promise<GetCallsStatusResponse> {\n  const { bundleId, chain, wallet, client } = options;\n\n  const chainId = chain.id;\n  const key = `${chainId}:calls_${bundleId}`;\n  const maxBlocksWaitTime =\n    options.maxBlocksWaitTime ?? DEFAULT_MAX_BLOCKS_WAIT_TIME;\n\n  if (map.has(key)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return map.get(key)!;\n  }\n  const promise = new Promise<GetCallsStatusResponse>((resolve, reject) => {\n    // start at -1 because the first block doesn't count\n    let blocksWaited = -1;\n\n    const unwatch = watchBlockNumber({\n      client: client,\n      chain: chain,\n      onNewBlockNumber: async () => {\n        blocksWaited++;\n        if (blocksWaited >= maxBlocksWaitTime) {\n          unwatch();\n          reject(\n            new Error(`Bundle not confirmed after ${maxBlocksWaitTime} blocks`),\n          );\n          return;\n        }\n        try {\n          const result = await getCallsStatus({\n            wallet,\n            client,\n            bundleId,\n          });\n\n          if (result.status === \"CONFIRMED\") {\n            // stop the polling\n            unwatch();\n            // resolve the top level promise with the result\n            resolve(result);\n          }\n        } catch {\n          // noop, we'll try again on the next blocks\n        }\n      },\n    });\n    // remove the promise from the map when it's done (one way or the other)\n  }).finally(() => {\n    map.delete(key);\n  });\n\n  map.set(key, promise);\n  return promise;\n}\n", "import {\n  type UseMutationResult,\n  useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport {\n  type SendCallsOptions,\n  sendCalls,\n} from \"../../../../wallets/eip5792/send-calls.js\";\nimport type {\n  GetCallsStatusResponse,\n  WalletSendCallsId,\n} from \"../../../../wallets/eip5792/types.js\";\nimport { waitForBundle } from \"../../../../wallets/eip5792/wait-for-bundle.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { invalidateWalletBalance } from \"../../providers/invalidateWalletBalance.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook to send [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) calls to a wallet.\n * This hook works with all Thirdweb wallets (in-app and smart) and certain injected wallets that already support EIP-5792.\n * Transactions will be bundled and sponsored when those capabilities are supported, otherwise they will be sent as individual transactions.\n *\n * When calls are sent, all contracts that are interacted with will have their corresponding reads revalidated via React Query.\n *\n * @note This hook is dependent on the wallet's support for EIP-5792 and could fail.\n * @note The mutatuon function will use your currently connected wallet by default, but you can pass it a specific wallet to use if you'd like.\n *\n * @returns A React Query mutatuon object to interact with {@link sendCalls}\n * @throws an error if the wallet does not support EIP-5792.\n * @returns The ID of the bundle of the calls.\n *\n * @beta\n * @example\n * ```tsx\n * import { useSendCalls } from \"thirdweb/react\";\n *\n * const sendTx1 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x33d9B8BEfE81027E2C859EDc84F5636cbb202Ed6\",\n    });\n * const sendTx2 = approve({\n      contract: USDT_CONTRACT,\n      amount: 100,\n      spender: \"0x2a4f24F935Eb178e3e7BA9B53A5Ee6d8407C0709\",\n    });\n * const { mutate: sendCalls, data: bundleId } = useSendCalls({ client });\n * await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Await the bundle's full confirmation:\n * ```tsx\n * const { mutate: sendCalls, data: bundleId } = useSendCalls({ client, waitForResult: true });\n * await sendCalls({\n *   wallet,\n *   client,\n *   calls: [sendTx1, sendTx2],\n * });\n * ```\n * Sponsor transactions with a paymaster:\n * ```ts\n * const { mutate: sendCalls, data: bundleId } = useSendCalls();\n * await sendCalls({\n *   client,\n *   calls: [sendTx1, sendTx2],\n *   capabilities: {\n *     paymasterService: {\n *       url: `https://${CHAIN.id}.bundler.thirdweb.com/${client.clientId}`\n *     }\n *   }\n * });\n * ```\n *\n * @note We recommend proxying any paymaster calls via an API route you setup and control.\n * @extension EIP5792\n */\nexport function useSendCalls({\n  client,\n  waitForResult = true,\n}: { client: ThirdwebClient; waitForResult?: boolean }): UseMutationResult<\n  GetCallsStatusResponse | WalletSendCallsId,\n  Error,\n  Omit<SendCallsOptions, \"chain\" | \"wallet\"> & { wallet?: Wallet } // Optional wallet override\n> {\n  const activeWallet = useActiveWallet();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (options) => {\n      const { wallet = activeWallet } = options;\n      const chain = wallet?.getChain();\n      if (!wallet || !chain) {\n        throw new Error(\n          \"Failed to send transactions, no connected wallet found.\",\n        );\n      }\n\n      const callsPromise = sendCalls({ ...options, wallet });\n      if (!waitForResult) {\n        return callsPromise;\n      }\n\n      const result = await waitForBundle({\n        bundleId: await callsPromise,\n        wallet,\n        client,\n        chain,\n      });\n      return result;\n    },\n    onSettled: async (_result, _error, variables) => {\n      // Attempt to invalidate any reads related to the sent transactions\n      const chain = activeWallet?.getChain();\n      if (!_result || !activeWallet || !chain) {\n        return;\n      }\n\n      if (typeof _result === \"string\") {\n        await waitForBundle({\n          bundleId: _result,\n          wallet: activeWallet,\n          client,\n          chain,\n        }).catch((error) => {\n          console.error(\n            \"Failed to confirm sent bundle and invalidate queries\",\n            _result,\n            error,\n          );\n          return undefined;\n        });\n      }\n\n      for (const call of variables.calls) {\n        queryClient.invalidateQueries({\n          queryKey: [\n            \"readContract\",\n            call.__contract?.chain.id,\n            call.__contract?.address,\n          ],\n        });\n      }\n      invalidateWalletBalance(queryClient, chain.id);\n    },\n  });\n}\n", "import { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { getCallsStatus } from \"../../../../wallets/eip5792/get-calls-status.js\";\nimport type { GetCallsStatusResponse } from \"../../../../wallets/eip5792/types.js\";\nimport { useActiveWallet } from \"./useActiveWallet.js\";\n\n/**\n * A hook to get a call bundle's current status according to [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792).\n *\n * @note This function is dependent on the wallet's support for EIP-5792 and could throw an error if it's not supported.\n *\n * @returns a React Query object.\n * @beta\n * @example\n * ```tsx\n * import { useCallsStatus } from \"thirdweb/react\";\n * const { data: status, isLoading } = useCallsStatus({ bundleId, client });\n * ```\n * @extension EIP5792\n */\nexport function useCallsStatus(options: {\n  bundleId: string;\n  client: ThirdwebClient;\n  queryOptions?: {\n    enabled?: boolean;\n    retry?: number;\n  };\n}): UseQueryResult<GetCallsStatusResponse> {\n  const { client, bundleId } = options;\n  const wallet = useActiveWallet();\n\n  return useQuery({\n    queryKey: [\n      \"getCapabilities\",\n      wallet?.getChain()?.id || -1,\n      wallet?.id,\n    ] as const,\n    queryFn: async () => {\n      if (!wallet) {\n        throw new Error(\"Failed to get calls status, no wallet connected\");\n      }\n      return getCallsStatus({ wallet, client, bundleId });\n    },\n    retry: false,\n    enabled: !!bundleId && wallet !== undefined,\n    ...options.queryOptions,\n  });\n}\n", "import { useMutation } from \"@tanstack/react-query\";\nimport { isEcosystemWallet } from \"../../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport type { AuthArgsType } from \"../../../../wallets/in-app/core/authentication/types.js\";\nimport type { Ecosystem } from \"../../../../wallets/in-app/core/wallet/types.js\";\nimport { linkProfile } from \"../../../../wallets/in-app/web/lib/auth/index.js\";\nimport { useAdminWallet } from \"../../../core/hooks/wallets/useAdminWallet.js\";\n\n/**\n * Links a web2 or web3 profile to the connected in-app or ecosystem account.\n * **When a profile is linked to the account, that profile can then be used to sign into the same account.**\n *\n * @example\n *\n * ### Linking a social profile\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * const onClick = () => {\n *   linkProfile({\n *     client,\n *     strategy: \"discord\", // or \"google\", \"x\", \"telegram\", etc\n *   });\n * };\n * ```\n *\n * ### Linking an email\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n * import { preAuthenticate } from \"thirdweb/wallets\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * // send a verification email first\n * const sendEmail = async () => {\n *   const email = await preAuthenticate({\n *     client,\n *     strategy: \"email\",\n *     email: \"john.doe@example.com\",\n *   });\n * };\n *\n * // then link the profile with the verification code\n * const onClick = (code: string) => {\n *   linkProfile({\n *     client,\n *     strategy: \"email\",\n *     email: \"john.doe@example.com\",\n *     verificationCode: code,\n *   });\n * };\n * ```\n *\n * The same process can be used for phone and email, simply swap out the `strategy` parameter.\n *\n * ### Linking a wallet\n *\n * ```jsx\n * import { useLinkProfile } from \"thirdweb/react\";\n *\n * const { mutate: linkProfile } = useLinkProfile();\n *\n * const onClick = () => {\n *   linkProfile({\n *     client,\n *     strategy: \"wallet\",\n *     wallet: createWallet(\"io.metamask\"), // autocompletion for 400+ wallet ids\n *     chain: sepolia, // any chain works, needed for SIWE signature\n *   });\n * };\n * ```\n *\n * @wallet\n */\nexport function useLinkProfile() {\n  const wallet = useAdminWallet();\n  return useMutation({\n    mutationKey: [\"profiles\"],\n    mutationFn: async (options: AuthArgsType) => {\n      const ecosystem: Ecosystem | undefined =\n        wallet && isEcosystemWallet(wallet)\n          ? { id: wallet.id, partnerId: wallet.getConfig()?.partnerId }\n          : undefined;\n      const optionsWithEcosystem = { ...options, ecosystem } as AuthArgsType;\n      return linkProfile(optionsWithEcosystem);\n    },\n  });\n}\n", "import { randomBytesHex } from \"./random.js\";\n\n// biome-ignore lint/suspicious/noExplicitAny: the whoel point here is to accept anything\ntype AnyFunction = (...args: any[]) => any;\n\nconst functionIdCache = new Map<AnyFunction, string>();\n\n/**\n * Retrieves the unique identifier for a given function.\n * If the function has been previously cached, the cached identifier is returned.\n * Otherwise, a new identifier is generated using the function's string representation.\n * @param fn - The function for which to retrieve the identifier.\n * @returns The unique identifier for the function.\n * @internal\n */\nexport function getFunctionId(fn: AnyFunction) {\n  if (functionIdCache.has(fn)) {\n    // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n    return functionIdCache.get(fn)!;\n  }\n  const id = randomBytesHex();\n  functionIdCache.set(fn, id);\n  return id;\n}\n", "import {\n  type UseQueryResult,\n  queryOptions as defineQuery,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport type { Abi, AbiFunction, ExtractAbiFunctionNames } from \"abitype\";\nimport type { ThirdwebContract } from \"../../../../contract/contract.js\";\nimport {\n  type ReadContractOptions,\n  type ReadContractResult,\n  readContract,\n} from \"../../../../transaction/read-contract.js\";\nimport type {\n  BaseTransactionOptions,\n  ParseMethod,\n} from \"../../../../transaction/types.js\";\nimport type { PreparedMethod } from \"../../../../utils/abi/prepare-method.js\";\nimport { getFunctionId } from \"../../../../utils/function-id.js\";\nimport { stringify } from \"../../../../utils/json.js\";\n\ntype PickedQueryOptions = {\n  enabled?: boolean;\n  refetchInterval?: number;\n  retry?: number;\n};\n\n/**\n * A hook to read state from a contract that automatically updates when the contract changes.\n *\n * You can use raw read calls or read [extensions](https://portal.thirdweb.com/react/v5/extensions) to read from a contract.\n *\n * @param options - The options for reading from a contract\n * @returns a UseQueryResult object.\n * @example\n * ```jsx\n * import { getContract } from \"thirdweb\";\n * import { sepolia } from \"thirdweb/chains\";\n * import { useReadContract } from \"thirdweb/react\";\n *\n * const contract = getContract({\n *   client,\n *   address: \"0x...\",\n *   chain: sepolia,\n * });\n *\n * const { data, isLoading } = useReadContract({\n *   contract,\n *   method: \"function tokenURI(uint256 tokenId) returns (string)\"\n *   params: [1n],\n * });\n * ```\n * @contract\n */\nexport function useReadContract<\n  const abi extends Abi,\n  const method extends abi extends { length: 0 }\n    ? AbiFunction | string\n    : ExtractAbiFunctionNames<abi>,\n>(\n  options: ReadContractOptions<abi, method> & {\n    queryOptions?: PickedQueryOptions;\n  },\n): UseQueryResult<\n  ReadContractResult<PreparedMethod<ParseMethod<abi, method>>[2]>\n>;\n/**\n * A hook to read state from a contract that automatically updates when the contract changes.\n * You can use raw read calls or read [extensions](https://portal.thirdweb.com/react/v5/extensions) to read from a contract.\n *\n * @param extension - An extension to call.\n * @param options - The read extension params.\n * @returns a UseQueryResult object.\n * @example\n *\n * Read a contract extension let you do complex contract queries with less code.\n *\n * ```jsx\n * import { useReadContract } from \"thirdweb/react\";\n * import { getOwnedNFTs } form \"thirdweb/extensions/erc721\";\n *\n * const { data, isLoading } = useReadContract(getOwnedNFTs, { contract, owner: address });\n * ```\n */\nexport function useReadContract<\n  const abi extends Abi,\n  const params extends object,\n  result,\n>(\n  extension: (options: BaseTransactionOptions<params, abi>) => Promise<result>,\n  options: BaseTransactionOptions<params, abi> & {\n    queryOptions?: PickedQueryOptions;\n  },\n): UseQueryResult<result>;\n\nexport function useReadContract<\n  const abi extends Abi,\n  const method extends abi extends {\n    length: 0;\n  }\n    ?\n        | AbiFunction\n        | `function ${string}`\n        | ((contract: ThirdwebContract<abi>) => Promise<AbiFunction>)\n    : ExtractAbiFunctionNames<abi>,\n  const params extends object,\n  result,\n>(\n  extensionOrOptions:\n    | ((options: BaseTransactionOptions<params, abi>) => Promise<result>)\n    | (ReadContractOptions<abi, method> & {\n        queryOptions?: PickedQueryOptions;\n      }),\n  options?: BaseTransactionOptions<params, abi> & {\n    queryOptions?: PickedQueryOptions;\n  },\n) {\n  // extension case\n  if (typeof extensionOrOptions === \"function\") {\n    if (!options) {\n      throw new Error(\n        `Missing second argument for \"useReadContract(<extension>, <options>)\" hook.`,\n      ) as never;\n    }\n    const { queryOptions, contract, ...params } = options;\n\n    const query = defineQuery({\n      queryKey: [\n        \"readContract\",\n        contract.chain.id,\n        contract.address,\n        getFunctionId(extensionOrOptions),\n        stringify(params),\n      ] as const,\n      // @ts-expect-error - TODO: clean up the type issues here\n      queryFn: () => extensionOrOptions({ ...params, contract }),\n      ...queryOptions,\n    });\n\n    // TODO - FIX LATER\n    // biome-ignore lint/correctness/useHookAtTopLevel: <explanation>\n    return useQuery(query);\n  }\n  // raw tx case\n  if (\"method\" in extensionOrOptions) {\n    const { queryOptions, ...tx } = extensionOrOptions;\n\n    const query = defineQuery({\n      queryKey: [\n        \"readContract\",\n        tx.contract.chain.id,\n        tx.contract.address,\n        tx.method,\n        stringify(tx.params),\n      ] as const,\n      queryFn: () => readContract(extensionOrOptions),\n      ...queryOptions,\n    });\n\n    // TODO - FIX LATER\n    // biome-ignore lint/correctness/useHookAtTopLevel: <explanation>\n    return useQuery(query);\n  }\n\n  throw new Error(\n    `Invalid \"useReadContract\" options. Expected either a read extension or a transaction object.`,\n  ) as never;\n}\n", "import {\n  type UseQueryResult,\n  useQuery,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport type { Abi, AbiEvent } from \"abitype\";\nimport { useEffect, useMemo, useRef } from \"react\";\nimport { getContractEvents } from \"../../../../event/actions/get-events.js\";\nimport type { ParseEventLogsResult } from \"../../../../event/actions/parse-logs.js\";\nimport {\n  type WatchContractEventsOptions,\n  watchContractEvents,\n} from \"../../../../event/actions/watch-events.js\";\nimport type { PreparedEvent } from \"../../../../event/prepare-event.js\";\nimport { eth_blockNumber } from \"../../../../rpc/actions/eth_blockNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\n\ntype UseContractEventsOptions<\n  abi extends Abi,\n  abiEvents extends PreparedEvent<AbiEvent>[],\n> = Omit<WatchContractEventsOptions<abi, abiEvents, true>, \"onEvents\"> & {\n  blockRange?: number;\n  enabled?: boolean;\n  watch?: boolean;\n};\n\n/**\n * Watches contract events and returns the parsed logs.\n * @param options - The options for watching contract events.\n * @param options.contract - The contract to watch events for.\n * @param options.events - The events to watch. Shuould be an array of [prepared events](https://portal.thirdweb.com/references/typescript/v5/prepareEvent).\n * @param options.blockRange - The number of blocks to search for events.\n * @param options.enabled - Whether to enable the query.\n * @param options.watch - Whether to watch for new events.\n * @returns The contract events of the watched contract events.\n * @example\n *\n * ### Using event extensions\n *\n * The `thirdweb/extesions` export contains event definitions for many popular contracts.\n * You can use these event definitions to watch for specific events with a type-safe API.\n *\n * ```jsx\n * import { useContractEvents } from \"thirdweb/react\";\n * import { tokensClaimedEvent } from \"thirdweb/extensions/erc721\";\n *\n * const account = useActiveAccount();\n * const contractEvents = useContractEvents({\n *  contract,\n *  events: [tokensClaimedEvent({ claimer: account?.address })],\n * });\n * ```\n *\n * ### Using custom events\n *\n * You can also watch for custom events by passing an array of [prepared events](https://portal.thirdweb.com/references/typescript/v5/prepareEvent).\n *\n * ```jsx\n * import { useContractEvents } from \"thirdweb/react\";\n * import { prepareEvent } from \"thirdweb\";\n *\n * const myEvent = prepareEvent({\n *  signature: \"event MyEvent(uint256 myArg)\",\n * });\n *\n * const contractEvents = useContractEvents({\n *  contract,\n *  events: [myEvent],\n * });\n * ```\n *\n * @contract\n */\nexport function useContractEvents<\n  const abi extends Abi,\n  const abiEvents extends PreparedEvent<AbiEvent>[],\n>(\n  options: UseContractEventsOptions<abi, abiEvents>,\n): UseQueryResult<ParseEventLogsResult<abiEvents, true>, Error> {\n  const {\n    contract,\n    events,\n    blockRange = 2000,\n    enabled = true,\n    watch = true,\n  } = options;\n  const latestBlockNumber = useRef<bigint>(undefined); // We use this to keep track of the latest block number when new pollers are spawned\n\n  const queryClient = useQueryClient();\n\n  const eventsKey = useMemo(\n    () =>\n      events?.reduce((acc, curr) => {\n        // we can use the event hash as a unique identifier?\n        return `${acc}${curr.hash}_`;\n      }, \"\") || \"__all__\",\n    [events],\n  );\n\n  const queryKey = useMemo(\n    () => [contract.chain.id, contract.address, \"logs\", eventsKey] as const,\n    [contract.address, contract.chain, eventsKey],\n  );\n\n  const query = useQuery({\n    queryKey,\n    queryFn: async () => {\n      const rpcRequest = getRpcClient(contract);\n      const currentBlockNumber = await eth_blockNumber(rpcRequest);\n      latestBlockNumber.current = currentBlockNumber;\n      const initialEvents = await getContractEvents({\n        contract,\n        events: events,\n        fromBlock: currentBlockNumber - BigInt(blockRange),\n      });\n      return initialEvents;\n    },\n    enabled,\n  });\n\n  useEffect(() => {\n    if (!enabled || !watch) {\n      // don't watch if not enabled or if watch is false\n      return;\n    }\n\n    // the return is important here because it will unwatch the events\n    return watchContractEvents<abi, abiEvents>({\n      contract,\n      onEvents: (newEvents) => {\n        if (newEvents.length > 0 && newEvents[0]) {\n          latestBlockNumber.current = newEvents[0].blockNumber; // Update the latest block number to avoid duplicate events if a new poller is spawned during this block\n        }\n        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n        queryClient.setQueryData(queryKey, (oldEvents: any = []) => [\n          ...oldEvents,\n          ...newEvents,\n        ]);\n      },\n      events,\n      latestBlockNumber: latestBlockNumber.current,\n    });\n  }, [contract, enabled, events, queryClient, queryKey, watch]);\n\n  return query;\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport type { Abi, AbiFunction } from \"abitype\";\nimport {\n  type SimulateOptions,\n  simulateTransaction,\n} from \"../../../../transaction/actions/simulate.js\";\n\n/**\n * A hook to simulate a transaction.\n * @returns A mutation object to simulate a transaction.\n * @example\n * ```jsx\n * import { useSimulateTransaction } from \"thirdweb/react\";\n * const { mutate: simulateTx } = useSimulateTransaction();\n *\n * // later\n * const result = await simulateTx(tx);\n * ```\n * @transaction\n */\nexport function useSimulateTransaction<\n  const abi extends Abi,\n  const abiFn extends AbiFunction,\n>(): UseMutationResult<\n  Awaited<ReturnType<typeof simulateTransaction>>,\n  Error,\n  SimulateOptions<abi, abiFn>\n> {\n  return useMutation({\n    mutationFn: (options) => simulateTransaction(options),\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport { sendBatchTransaction } from \"../../../../transaction/actions/send-batch-transaction.js\";\nimport type { WaitForReceiptOptions } from \"../../../../transaction/actions/wait-for-tx-receipt.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendBatchTransaction } from \"thirdweb/react\";\n * const { mutate: sendBatch, data: transactionResult } = useSendBatchTransaction();\n *\n * // later\n * sendBatch([tx1, tx2]);\n * ```\n * @transaction\n */\nexport function useSendBatchTransaction(): UseMutationResult<\n  WaitForReceiptOptions,\n  Error,\n  PreparedTransaction[]\n> {\n  const account = useActiveAccount();\n  return useMutation({\n    mutationFn: async (transactions) => {\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      return await sendBatchTransaction({\n        transactions,\n        account,\n      });\n    },\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport type { GaslessOptions } from \"../../../../transaction/actions/gasless/types.js\";\nimport { sendAndConfirmTransaction } from \"../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport type { TransactionReceipt } from \"../../../../transaction/types.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * Configuration for the `useSendTransaction` hook.\n */\ntype SendAndConfirmTransactionConfig = {\n  /**\n   * Configuration for gasless transactions.\n   * Refer to [`GaslessOptions`](https://portal.thirdweb.com/references/typescript/v5/GaslessOptions) for more details.\n   */\n  gasless?: GaslessOptions;\n};\n\n/**\n * A hook to send a transaction.\n * @returns A mutation object to send a transaction.\n * @example\n * ```jsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const { mutate: sendAndConfirmTx, data: transactionReceipt } = useSendAndConfirmTransaction();\n *\n * // later\n * sendAndConfirmTx(tx);\n * ```\n *\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```tsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const mutation = useSendAndConfirmTransaction({\n *   gasless: {\n *     provider: \"engine\",\n *     relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *     relayerForwarderAddress: \"0x...\",\n *   }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```tsx\n * import { useSendAndConfirmTransaction } from \"thirdweb/react\";\n * const mutation = useSendAndConfirmTransaction({\n *   gasless: {\n *     provider: \"openzeppelin\",\n *     relayerUrl: \"https://...\",\n *     relayerForwarderAddress: \"0x...\",\n *   }\n * });\n * ```\n * @transaction\n */\nexport function useSendAndConfirmTransaction(\n  config: SendAndConfirmTransactionConfig = {},\n): UseMutationResult<TransactionReceipt, Error, PreparedTransaction> {\n  const account = useActiveAccount();\n  const { gasless } = config;\n  return useMutation({\n    mutationFn: async (transaction) => {\n      if (!account) {\n        throw new Error(\"No active account\");\n      }\n      return await sendAndConfirmTransaction({\n        transaction,\n        account,\n        gasless,\n      });\n    },\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport {\n  type EstimateGasResult,\n  estimateGas,\n} from \"../../../../transaction/actions/estimate-gas.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * A hook to estimate the gas for a given transaction.\n * @returns A mutation object to estimate gas.\n * @example\n * ```jsx\n * import { useEstimateGas } from \"thirdweb/react\";\n * const { mutate: estimateGas, data: gasEstimate } = useEstimateGas();\n *\n * // later\n * const estimatedGas = await estimateGas(tx);\n * ```\n * @transaction\n */\nexport function useEstimateGas(): UseMutationResult<\n  EstimateGasResult,\n  Error,\n  PreparedTransaction\n> {\n  const account = useActiveAccount();\n  return useMutation({\n    mutationFn: (transaction) => estimateGas({ transaction, account }),\n  });\n}\n", "import { type UseMutationResult, useMutation } from \"@tanstack/react-query\";\nimport {\n  type EstimateGasCostResult,\n  estimateGasCost,\n} from \"../../../../transaction/actions/estimate-gas-cost.js\";\nimport type { PreparedTransaction } from \"../../../../transaction/prepare-transaction.js\";\nimport { useActiveAccount } from \"../wallets/useActiveAccount.js\";\n\n/**\n * A hook to estimate the gas cost in ether and wei for a given transaction.\n * @returns A mutation object to estimate gas cost.\n * @example\n * ```jsx\n * import { useEstimateGasCost } from \"thirdweb/react\";\n * const { mutate: estimateGasCost, data: gasEstimate } = useEstimateGas();\n *\n * // later\n * const estimatedGas = await estimateGasCost(tx);\n * console.log(\"gas cost in ether\", estimatedGas.ether);\n * ```\n * @transaction\n */\nexport function useEstimateGasCost(): UseMutationResult<\n  EstimateGasCostResult,\n  Error,\n  PreparedTransaction\n> {\n  const account = useActiveAccount();\n  return useMutation({\n    mutationFn: (transaction) => estimateGasCost({ transaction, account }),\n  });\n}\n", "import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useMemo } from \"react\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport { eth_blockNumber } from \"../../../../rpc/actions/eth_blockNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport { watchBlockNumber } from \"../../../../rpc/watchBlockNumber.js\";\n\nexport type UseBlockNumberOptions = {\n  client: ThirdwebClient;\n  chain: Chain;\n  enabled?: boolean;\n  watch?: boolean;\n};\n\n/**\n * Hook that watches for changes in the block number on a given chain.\n * @param options - The options for the hook.\n * @returns The latest block number.\n * @example\n * ```jsx\n * import { useBlockNumber } from \"thirdweb/react\";\n * const blockNumber = useBlockNumber({client, chain});\n * ```\n * @utils\n */\nexport function useBlockNumber(options: UseBlockNumberOptions) {\n  const { client, chain, enabled = true, watch = true } = options;\n\n  const queryClient = useQueryClient();\n\n  const queryKey = useMemo(() => [chain.id, \"blockNumber\"] as const, [chain]);\n  const query = useQuery({\n    // TODO: technically client should be part of the queryKey here...\n\n    queryKey: queryKey,\n    queryFn: async () => {\n      const rpcRequest = getRpcClient({ client, chain });\n      return await eth_blockNumber(rpcRequest);\n    },\n    enabled,\n  });\n\n  useEffect(() => {\n    if (!enabled || !watch) {\n      // don't watch if not enabled or not watching\n      return;\n    }\n    return watchBlockNumber({\n      client,\n      chain,\n      onNewBlockNumber: (newBlockNumber) => {\n        queryClient.setQueryData(queryKey, newBlockNumber);\n      },\n    });\n  }, [client, chain, enabled, queryClient, queryKey, watch]);\n\n  return query.data;\n}\n", "import { type UseQueryResult, useQuery } from \"@tanstack/react-query\";\nimport type { Abi } from \"abitype\";\nimport type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { getFunctionId } from \"../../../utils/function-id.js\";\nimport { stringify } from \"../../../utils/json.js\";\n\nconst CONTRACT_QUERY_CACHE = new WeakMap();\n\n/**\n * Creates a `useQuery` hook for a contract call.\n * @param readCall - A function that performs the contract function call and returns the result.\n * @returns An object containing the created `useRead` hook.\n * @example\n * ```jsx\n * import { createContractQuery } from \"thirdweb/react\";\n * import { totalSupply } from \"thirdweb/extensions/erc20\";\n * const useTotalSupply = createContractQuery(totalSupply);\n * const { data, isLoading } = useTotalSupply({contract})\n * ```\n * @transaction\n */\nexport function createContractQuery<\n  opts extends object,\n  result,\n  abi extends Abi,\n>(\n  readCall: (options: BaseTransactionOptions<opts, abi>) => Promise<result>,\n): (\n  options: BaseTransactionOptions<opts, abi> & {\n    queryOptions?: Partial<{ enabled: boolean }>;\n  },\n) => UseQueryResult<result, Error> {\n  if (CONTRACT_QUERY_CACHE.has(readCall)) {\n    return CONTRACT_QUERY_CACHE.get(readCall) as (\n      options: BaseTransactionOptions<opts, abi>,\n    ) => UseQueryResult<result, Error>;\n  }\n  function useRead(\n    options: BaseTransactionOptions<opts, abi> & {\n      queryOptions?: Partial<{ enabled: boolean }>;\n    },\n  ) {\n    const { contract, queryOptions, ...params } = options;\n\n    return useQuery({\n      queryKey: [\n        \"readContract\",\n        contract.chain.id,\n        contract.address,\n        getFunctionId(readCall),\n        stringify(params),\n      ] as const,\n      queryFn: () => readCall(options),\n      ...queryOptions,\n    });\n  }\n  CONTRACT_QUERY_CACHE.set(readCall, useRead);\n  return useRead;\n}\n", "import { useQueryClient } from \"@tanstack/react-query\";\n\n/**\n * @internal\n */\nexport function useInvalidateContractQuery() {\n  const queryClient = useQueryClient();\n\n  return ({\n    chainId,\n    contractAddress,\n  }: {\n    chainId: number;\n    contractAddress: string;\n  }) => {\n    queryClient.invalidateQueries({\n      queryKey: [\"readContract\", chainId, contractAddress],\n    });\n  };\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithCryptoHistoryData,\n  type BuyWithCryptoHistoryParams,\n  getBuyWithCryptoHistory,\n} from \"../../../../pay/buyWithCrypto/getHistory.js\";\n\n/**\n * @internal\n */\nexport type BuyWithCryptoHistoryQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoHistoryData>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get the \"Buy with crypto\" transaction history for a given wallet address.\n *\n * This hook is a React Query wrapper of the [`getBuyWithCryptoHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoHistory) function.\n * You can also use that function directly\n * @param params - object of type [`BuyWithCryptoHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithCryptoHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryData)\n * @example\n * ```tsx\n * import { useBuyWithCryptoHistory } from \"thirdweb/react\";\n *\n * function Component() {\n *  const buyWithCryptoHistory = useBuyWithCryptoHistory(params);\n *  return <div> ... </div>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithCryptoHistory(\n  params?: BuyWithCryptoHistoryParams,\n  queryParams?: BuyWithCryptoHistoryQueryOptions,\n): UseQueryResult<BuyWithCryptoHistoryData> {\n  return useQuery({\n    ...queryParams,\n    queryKey: [\"getBuyWithCryptoHistory\", params],\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"Swap params are required\");\n      }\n      return getBuyWithCryptoHistory(params);\n    },\n    enabled: !!params,\n  });\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithFiatHistoryEndpoint } from \"../utils/definitions.js\";\nimport type { BuyWithFiatStatus } from \"./getStatus.js\";\n\n/**\n * The parameters for [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function\n * @buyCrypto\n */\nexport type BuyWithFiatHistoryParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n  /**\n   * The address of the wallet to get the wallet history for\n   */\n  walletAddress: string;\n  /**\n   * The number of results to return in a single page. The default value is `10`.\n   */\n  count: number;\n  /**\n   * index of the first result to return. The default value is `0`.\n   *\n   * If you want to start the list from nth item, you can set the start value to (n-1).\n   */\n  start: number;\n};\n\n/**\n * The results for [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function\n * @buyCrypto\n */\nexport type BuyWithFiatHistoryData = {\n  page: BuyWithFiatStatus[];\n  hasNextPage: boolean;\n};\n\n/**\n * Get the \"Buy with fiat\" transaction history for a given wallet address\n * @param params Object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @example\n *\n * ```ts\n * import { createThirdwebClient } from \"thirdweb\";\n * import { getBuyWithFiatHistory } from \"thirdweb/pay\";\n *\n * const client = createThirdwebClient({ clientId: \"...\" });\n *\n * // get the 10 latest \"Buy with fiat\" transactions dony by the wallet\n * const history = await getBuyWithFiatHistory({\n *  client: client,\n *  walletAddress: '0x...',\n *  start: 0,\n *  count: 10,\n * })\n * ```\n * @returns Object of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @buyCrypto\n */\nexport async function getBuyWithFiatHistory(\n  params: BuyWithFiatHistoryParams,\n): Promise<BuyWithFiatHistoryData> {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"walletAddress\", params.walletAddress);\n    queryParams.append(\"start\", params.start.toString());\n    queryParams.append(\"count\", params.count.toString());\n\n    const queryString = queryParams.toString();\n    const url = `${getPayBuyWithFiatHistoryEndpoint()}?${queryString}`;\n\n    const response = await getClientFetch(params.client)(url);\n\n    // Assuming the response directly matches the BuyWithFiatStatus response interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithFiatHistoryData = (await response.json()).result;\n    return data;\n  } catch (error) {\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithFiatHistoryData,\n  type BuyWithFiatHistoryParams,\n  getBuyWithFiatHistory,\n} from \"../../../../pay/buyWithFiat/getHistory.js\";\n\n/**\n * @internal\n */\nexport type BuyWithFiatHistoryQueryOptions = Omit<\n  UseQueryOptions<BuyWithFiatHistoryData>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * Hook to get the \"Buy with Fiat\" transaction history for a given wallet address.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatHistory`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatHistory) function.\n * You can also use that function directly\n * @param params - object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)\n * @example\n * ```tsx\n * import { useBuyWithFiatHistory } from \"thirdweb/react\";\n *\n * function Component() {\n *  const historyQuery = useBuyWithFiatHistory(params);\n *  return <div> ... </div>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithFiatHistory(\n  params?: BuyWithFiatHistoryParams,\n  queryParams?: BuyWithFiatHistoryQueryOptions,\n): UseQueryResult<BuyWithFiatHistoryData> {\n  return useQuery({\n    ...queryParams,\n    queryKey: [\"buyWithFiatHistory\", params],\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"params are required\");\n      }\n      return getBuyWithFiatHistory(params);\n    },\n    enabled: !!params,\n  });\n}\n", "import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport type { BuyWithCryptoQuote } from \"../../../../pay/buyWithCrypto/getQuote.js\";\nimport {\n  type GetPostOnRampQuoteParams,\n  getPostOnRampQuote,\n} from \"../../../../pay/buyWithFiat/getPostOnRampQuote.js\";\n\n/**\n * @internal\n */\nexport type PostOnRampQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * When buying a token with fiat currency - It only involes doing on-ramp if the on-ramp provider supports buying the given destination token directly.\n *\n * If the on-ramp provider does not support buying the destination token directly, user can be sent an intermediate token with fiat currency from the on-ramp provider which\n * can be swapped to destination token onchain.\n *\n * `usePostOnRampQuote` hook is used to get the quote for swapping the on-ramp token to destination token.\n *\n * When you get a \"Buy with Fiat\" status of type `\"CRYPTO_SWAP_REQUIRED\"` from the [`useBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithFiatStatus) hook,\n * you can use `usePostOnRampQuote` hook to get the quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) for swapping the on-ramp token to destination token to complete the step-2 of the process.\n *\n * Once you have the quote, you can start the Swap process by following the same steps as mentioned in the [`useBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithCryptoQuote) documentation.\n *\n * @param params - object of type [`GetPostOnRampQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetPostOnRampQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @buyCrypto\n */\nexport function usePostOnRampQuote(\n  params?: GetPostOnRampQuoteParams,\n  queryOptions?: PostOnRampQuoteQueryOptions,\n): UseQueryResult<BuyWithCryptoQuote> {\n  return useQuery({\n    ...queryOptions,\n    queryKey: [\"getPostOnRampQuote\", params],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getPostOnRampQuote(params);\n    },\n    enabled: !!params,\n  });\n}\n", "\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport type { Chain } from \"../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport type { Wallet } from \"../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../wallets/types.js\";\nimport type { WalletId } from \"../../../wallets/wallet-types.js\";\nimport { CustomThemeProvider } from \"../../core/design-system/CustomThemeProvider.js\";\nimport type { Theme } from \"../../core/design-system/index.js\";\nimport type { SiweAuthOptions } from \"../../core/hooks/auth/useSiweAuth.js\";\nimport type {\n  ConnectButton_connectModalOptions,\n  PayUIOptions,\n} from \"../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useConnectionManager } from \"../../core/providers/connection-manager.js\";\nimport type { SupportedTokens } from \"../../core/utils/defaultTokens.js\";\nimport { EmbedContainer } from \"./ConnectWallet/Modal/ConnectEmbed.js\";\nimport { useConnectLocale } from \"./ConnectWallet/locale/getConnectLocale.js\";\nimport BuyScreen from \"./ConnectWallet/screens/Buy/BuyScreen.js\";\nimport { ExecutingTxScreen } from \"./TransactionButton/ExecutingScreen.js\";\nimport { DynamicHeight } from \"./components/DynamicHeight.js\";\nimport { Spinner } from \"./components/Spinner.js\";\nimport type { LocaleId } from \"./types.js\";\n\n/**\n * Props of [`PayEmbed`](https://portal.thirdweb.com/references/typescript/v5/PayEmbed) component\n */\nexport type PayEmbedProps = {\n  /**\n   * Override the default tokens shown in PayEmbed uI\n   * @component\n   * By default, PayEmbed shows a few popular tokens for Pay supported chains\n   * @example\n   *\n   * `supportedTokens` prop allows you to override this list as shown below.\n   *\n   * ```tsx\n   * import { PayEmbed } from 'thirdweb/react';\n   * import { NATIVE_TOKEN_ADDRESS } from 'thirdweb';\n   *\n   * function Example() {\n   *   return (\n   * \t\t<PayEmbed\n   * \t\t\tsupportedTokens={{\n   *        // Override the tokens for Base Mainnet ( chaid id 84532 )\n   * \t\t\t\t84532: [\n   * \t\t\t\t\t{\n   * \t\t\t\t\t\taddress: NATIVE_TOKEN_ADDRESS, // use NATIVE_TOKEN_ADDRESS for native token\n   * \t\t\t\t\t\tname: 'Base ETH',\n   * \t\t\t\t\t\tsymbol: 'ETH',\n   * \t\t\t\t\t\ticon: 'https://...',\n   * \t\t\t\t\t},\n   *          {\n   * \t\t\t\t\t\taddress: '0x...', // token contract address\n   * \t\t\t\t\t\tname: 'Dai Stablecoin',\n   * \t\t\t\t\t\tsymbol: 'DAI',\n   * \t\t\t\t\t\ticon: 'https://...',\n   * \t\t\t\t\t},\n   * \t\t\t\t],\n   * \t\t\t}}\n   * \t\t/>\n   * \t);\n   * }\n   * ```\n   */\n  supportedTokens?: SupportedTokens;\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n  /**\n   * By default - ConnectButton UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the ConnectButton UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n  /**\n   * Customize the Pay UI options. Refer to the [`PayUIOptions`](https://portal.thirdweb.com/references/typescript/v5/PayUIOptions) type for more details.\n   */\n  payOptions?: PayUIOptions;\n\n  /**\n   * Set the theme for the `PayEmbed` component. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   *\n   * function Example() {\n   *  return <PayEmbed client={client} theme={customTheme} />\n   * }\n   * ```\n   */\n  theme?: \"light\" | \"dark\" | Theme;\n\n  /**\n   * Customize the options for \"Connect\" Button showing in the PayEmbed UI when the user is not connected to a wallet.\n   *\n   * Refer to the [`PayEmbedConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedConnectOptions) type for more details.\n   */\n  connectOptions?: PayEmbedConnectOptions;\n\n  /**\n   * All wallet IDs included in this array will be hidden from wallet selection when connected.\n   */\n  hiddenWallets?: WalletId[];\n\n  style?: React.CSSProperties;\n\n  className?: string;\n};\n\n/**\n * Embed thirdweb Pay UI for Buy tokens using Crypto or Credit Card.\n *\n * PayEmbed also renders a \"Connect\" button if the user is not connected to a wallet. You can customize the options for \"Connect\" button using the `connectOptions` prop.\n *\n * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.\n *\n * @example\n * ```tsx\n * <PayEmbed\n *   client={client}\n *   connectOptions={{\n *     connectModal: {\n *       size: 'compact',\n *     }\n *   }}\n *   payOptions={{\n *     buyWithCrypto: false,\n *   }}\n *  />\n * ```\n */\nexport function PayEmbed(props: PayEmbedProps) {\n  const localeQuery = useConnectLocale(props.locale || \"en_US\");\n  const [screen, setScreen] = useState<\"buy\" | \"execute-tx\">(\"buy\");\n  const theme = props.theme || \"dark\";\n  const connectionManager = useConnectionManager();\n\n  // Add props.chain and props.chains to defined chains store\n  useEffect(() => {\n    if (props.connectOptions?.chain) {\n      connectionManager.defineChains([props.connectOptions?.chain]);\n    }\n  }, [props.connectOptions?.chain, connectionManager]);\n\n  useEffect(() => {\n    if (props.connectOptions?.chains) {\n      connectionManager.defineChains(props.connectOptions?.chains);\n    }\n  }, [props.connectOptions?.chains, connectionManager]);\n\n  let content = null;\n  const metadata =\n    props.payOptions && \"metadata\" in props.payOptions\n      ? props.payOptions.metadata\n      : null;\n\n  if (!localeQuery.data) {\n    content = (\n      <div\n        style={{\n          minHeight: \"350px\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <Spinner size=\"xl\" color=\"secondaryText\" />\n      </div>\n    );\n  } else {\n    content = (\n      <>\n        {screen === \"buy\" && (\n          <BuyScreen\n            title={metadata?.name || \"Buy\"}\n            isEmbed={true}\n            supportedTokens={props.supportedTokens}\n            theme={theme}\n            client={props.client}\n            connectLocale={localeQuery.data}\n            hiddenWallets={props.hiddenWallets}\n            payOptions={\n              props.payOptions || {\n                mode: \"fund_wallet\",\n              }\n            }\n            onDone={() => {\n              if (props.payOptions?.mode === \"transaction\") {\n                setScreen(\"execute-tx\");\n              }\n            }}\n            connectOptions={props.connectOptions}\n            onBack={undefined}\n          />\n        )}\n\n        {screen === \"execute-tx\" &&\n          props.payOptions?.mode === \"transaction\" &&\n          props.payOptions.transaction && (\n            <ExecutingTxScreen\n              tx={props.payOptions.transaction}\n              closeModal={() => {\n                setScreen(\"buy\");\n              }}\n              onBack={() => {\n                setScreen(\"buy\");\n              }}\n              onTxSent={() => {}}\n            />\n          )}\n      </>\n    );\n  }\n\n  return (\n    <CustomThemeProvider theme={theme}>\n      <EmbedContainer\n        modalSize=\"compact\"\n        style={props.style}\n        className={props.className}\n      >\n        <DynamicHeight>{content}</DynamicHeight>\n      </EmbedContainer>\n    </CustomThemeProvider>\n  );\n}\n\n/**\n * Connection options for the `PayEmbed` component\n *\n * @example\n * ```tsx\n * <PayEmbed client={client} connectOptions={{\n *    connectModal: {\n *      size: 'compact',\n *      title: \"Sign in\",\n *    }\n *  }}\n * />\n * ```\n */\nexport type PayEmbedConnectOptions = {\n  /**\n   * Configurations for the `ConnectButton`'s Modal that is shown for connecting a wallet\n   * Refer to the [`ConnectButton_connectModalOptions`](https://portal.thirdweb.com/references/typescript/v5/ConnectButton_connectModalOptions) type for more details\n   */\n  connectModal?: ConnectButton_connectModalOptions;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Array of wallets to show in Connect Modal. If not provided, default wallets will be used.\n   */\n  wallets?: Wallet[];\n  /**\n   * When the user has connected their wallet to your site, this configuration determines whether or not you want to automatically connect to the last connected wallet when user visits your site again in the future.\n   *\n   * By default it is set to `{ timeout: 15000 }` meaning that autoConnect is enabled and if the autoConnection does not succeed within 15 seconds, it will be cancelled.\n   *\n   * If you want to disable autoConnect, set this prop to `false`.\n   *\n   * If you want to customize the timeout, you can assign an object with a `timeout` key to this prop.\n   * ```\n   */\n  autoConnect?:\n    | {\n        timeout: number;\n      }\n    | boolean;\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * The `ConnectButton` also shows a \"Switch Network\" button until the wallet is connected to the specified chain. Clicking on the \"Switch Network\" button triggers the wallet to switch to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will used in various ways:\n   * - They will be displayed in the network selector in the `ConnectButton`'s details modal post connection\n   * - They will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Wallets to show as recommended in the `ConnectButton`'s Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, ConnectButton modal shows a \"All Wallets\" button that shows a list of 350+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n", "import { useCallback, useContext, useMemo, useState } from \"react\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport type { SmartWalletOptions } from \"../../../../wallets/smart/types.js\";\nimport type { AppMetadata } from \"../../../../wallets/types.js\";\nimport type { Theme } from \"../../../core/design-system/index.js\";\nimport type { SiweAuthOptions } from \"../../../core/hooks/auth/useSiweAuth.js\";\nimport { SetRootElementContext } from \"../../../core/providers/RootElementContext.js\";\nimport { WalletUIStatesProvider } from \"../../providers/wallet-ui-states-provider.js\";\nimport { canFitWideModal } from \"../../utils/canFitWideModal.js\";\nimport { getDefaultWallets } from \"../../wallets/defaultWallets.js\";\nimport type { LocaleId } from \"../types.js\";\nimport ConnectModal from \"./Modal/ConnectModal.js\";\nimport { getConnectLocale } from \"./locale/getConnectLocale.js\";\nimport type { ConnectLocale } from \"./locale/types.js\";\nimport type { WelcomeScreen } from \"./screens/types.js\";\n\n/**\n * hook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet.\n * @example\n * ```tsx\n * import { createThirdwebClient } from \"thirdweb\";\n * import { useConnectModal } from \"thirdweb/react\";\n *\n * const client = createThirdwebClient({\n *  clientId: \"<your_client_id>\",\n * });\n *\n * function Example() {\n *   const { connect, isConnecting } = useConnectModal();\n *\n *   async function handleConnect() {\n *      const wallet = await connect({ client }); // opens the connect modal\n *      console.log('connected to', wallet);\n *   }\n *\n *   return <button onClick={handleConnect}> Connect </button>\n * }\n * ```\n *\n * The returned `connect` method takes an object of type [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)\n * as an argument to customize the Connect Modal UI. Refer to [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available options.\n *\n * @walletConnection\n */\nexport function useConnectModal() {\n  const setRootEl = useContext(SetRootElementContext);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const connect = useCallback(\n    (props: UseConnectModalOptions) => {\n      function cleanup() {\n        setIsConnecting(false);\n        setRootEl(undefined);\n      }\n\n      return new Promise<Wallet>((resolve, reject) => {\n        setIsConnecting(true);\n        getConnectLocale(props.locale || \"en_US\")\n          .then((locale) => {\n            setRootEl(\n              <Modal\n                {...props}\n                onConnect={(w) => {\n                  resolve(w);\n                  cleanup();\n                }}\n                onClose={() => {\n                  reject();\n                  cleanup();\n                }}\n                connectLocale={locale}\n              />,\n            );\n          })\n          .catch(() => {\n            reject();\n            cleanup();\n          });\n      });\n    },\n    [setRootEl],\n  );\n\n  return { connect, isConnecting };\n}\n\nfunction Modal(\n  props: UseConnectModalOptions & {\n    onConnect: (wallet: Wallet) => void;\n    onClose: () => void;\n    connectLocale: ConnectLocale;\n  },\n) {\n  const wallets = useMemo(\n    () =>\n      props.wallets ||\n      getDefaultWallets({\n        appMetadata: props.appMetadata,\n        chains: props.chains,\n      }),\n    [props.wallets, props.appMetadata, props.chains],\n  );\n\n  const size = useMemo(() => {\n    return !canFitWideModal() || wallets.length === 1\n      ? \"compact\"\n      : props.size || \"wide\";\n  }, [props.size, wallets.length]);\n  const meta = useMemo(() => {\n    return {\n      privacyPolicyUrl: props.privacyPolicyUrl,\n      showThirdwebBranding: props.showThirdwebBranding,\n      termsOfServiceUrl: props.termsOfServiceUrl,\n      title: props.title,\n      titleIconUrl: props.titleIcon,\n    };\n  }, [\n    props.privacyPolicyUrl,\n    props.showThirdwebBranding,\n    props.termsOfServiceUrl,\n    props.title,\n    props.titleIcon,\n  ]);\n\n  return (\n    <WalletUIStatesProvider theme={props.theme} isOpen={true}>\n      <ConnectModal\n        onClose={props.onClose}\n        shouldSetActive={props.setActive === undefined ? true : props.setActive}\n        accountAbstraction={props.accountAbstraction}\n        // TODO: not set up in `useConnectModal` for some reason?\n        auth={undefined}\n        chain={props.chain}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        meta={meta}\n        size={size}\n        welcomeScreen={props.welcomeScreen}\n        localeId={props.locale || \"en_US\"}\n        onConnect={props.onConnect}\n        recommendedWallets={props.recommendedWallets}\n        showAllWallets={props.showAllWallets}\n        wallets={wallets}\n        chains={props.chains}\n        walletConnect={props.walletConnect}\n      />\n    </WalletUIStatesProvider>\n  );\n}\n\n/**\n * Options for configuring Connect Modal for [`useConnectModal`](https://portal.thirdweb.com/references/typescript/v5/useConnectModal) hook\n * @connectWallet\n */\nexport type UseConnectModalOptions = {\n  /**\n   * Whether to set the connected wallet as active wallet or not\n   *\n   * By default, It is set to `true`\n   *\n   * You can set it to `false` and use the retunred wallet from the `connect` method if you want to connect wallet without setting it as active wallet\n   *\n   * @example\n   * ```ts\n   * function Example() {\n   *  const { connect } = useConnectModal();\n   *  return <button> onClick={async () => {\n   *  const wallet = await connect({ setActive: false, client });\n   * }}>\n   *  Connect\n   * </button>\n   * }\n   * ```\n   */\n  setActive?: boolean;\n\n  /**\n   * A client is the entry point to the thirdweb SDK.\n   * It is required for all other actions.\n   * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.\n   *\n   * ```tsx\n   * import { createThirdwebClient } from \"thirdweb\";\n   *\n   * const client = createThirdwebClient({\n   *  clientId: \"<your_client_id>\",\n   * })\n   * ```\n   */\n  client: ThirdwebClient;\n\n  /**\n   * By default - Connect Modal UI uses the `en-US` locale for english language users.\n   *\n   * You can customize the language used in the Connect Modal UI by setting the `locale` prop.\n   *\n   * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.\n   */\n  locale?: LocaleId;\n\n  /**\n   * Array of supported wallets. If not provided, default wallets will be used.\n   * @example\n   * ```tsx\n   * import { AutoConnect } from \"thirdweb/react\";\n   * import { createWallet, inAppWallet } from \"thirdweb/wallets\";\n   *\n   * const wallets = [\n   *   inAppWallet(),\n   *   createWallet(\"io.metamask\"),\n   *   createWallet(\"com.coinbase.wallet\"),\n   *   createWallet(\"me.rainbow\"),\n   * ];\n   *\n   * function Example() {\n   *  const { connect } = useConnectModal();\n   *  return <button> onClick={() => connect({ wallets, client })}> Connect </button>\n   * }\n   * ```\n   *\n   * If no wallets are specified. The component will show All the EIP-6963 compliant installed wallet extensions, as well as below default wallets:\n   *\n   * ```tsx\n   * const defaultWallets = [\n   *  inAppWallet(),\n   *  createWallet(\"io.metamask\"),\n   *  createWallet(\"com.coinbase.wallet\"),\n   *  createWallet(\"me.rainbow\"),\n   *  createWallet(\"io.zerion.wallet\"),\n   * ]\n   * ```\n   *\n   * Connect Modal also shows a \"All wallets\" button at the end of wallet list which allows user to connect to any of the 350+ wallets\n   */\n  wallets?: Wallet[];\n\n  /**\n   * Metadata of the app that will be passed to connected wallet. Setting this is highly recommended.\n   *\n   * Some wallets display this information to the user when they connect to your app.\n   * @example\n   * ```ts\n   * {\n   *   name: \"My App\",\n   *   url: \"https://my-app.com\",\n   *   description: \"some description about your app\",\n   *   logoUrl: \"https://path/to/my-app/logo.svg\",\n   * };\n   * ```\n   */\n  appMetadata?: AppMetadata;\n\n  /**\n   * The [`Chain`](https://portal.thirdweb.com/references/typescript/v5/Chain) object of the blockchain you want the wallet to connect to\n   *\n   * If a `chain` is not specified, Wallet will be connected to whatever is the default set in the wallet.\n   *\n   * If a `chain` is specified, Wallet will be prompted to switch to given chain after connection if it is not already connected to it.\n   * This ensures that the wallet is connected to the correct blockchain before interacting with your app.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   * ```\n   */\n  chain?: Chain;\n\n  /**\n   * Array of chains that your app supports.\n   *\n   * This is only relevant if your app is a multi-chain app and works across multiple blockchains.\n   * If your app only works on a single blockchain, you should only specify the `chain` prop.\n   *\n   * Given list of chains will be sent to wallet at the time of connection if the wallet supports requesting multiple chains ( example: WalletConnect ) so that users can switch between the chains post connection easily\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.\n   *\n   * ```tsx\n   * import { defineChain } from \"thirdweb/react\";\n   *\n   * const polygon = defineChain({\n   *   id: 137,\n   * });\n   * ```\n   */\n  chains?: Chain[];\n\n  /**\n   * Set the theme for the Connect Modal. By default it is set to `\"dark\"`\n   *\n   * theme can be set to either `\"dark\"`, `\"light\"` or a custom theme object.\n   * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)\n   * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)\n   * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.\n   * @example\n   * ```ts\n   * import { lightTheme } from \"thirdweb/react\";\n   *\n   * const customTheme = lightTheme({\n   *  colors: {\n   *    modalBg: 'red'\n   *  }\n   * })\n   * ```\n   */\n  theme?: \"dark\" | \"light\" | Theme;\n\n  /**\n   * Configure options for WalletConnect\n   *\n   * By default WalletConnect uses the thirdweb's default project id.\n   * Setting your own project id is recommended.\n   *\n   * You can create a project id by signing up on [walletconnect.com](https://walletconnect.com/)\n   */\n  walletConnect?: {\n    projectId?: string;\n  };\n\n  /**\n   * Enable Account abstraction for all wallets. This will connect to the users's smart account based on the connected personal wallet and the given options.\n   *\n   * This allows to sponsor gas fees for your user's transaction using the thirdweb account abstraction infrastructure.\n   *\n   * ```tsx\n   * * function Example() {\n   *  const { connect } = useConnectModal();\n   *\n   * async function handleConnect() {\n   *  await connect({\n   *    client,\n   *    accountAbstraction: {\n   *      factoryAddress: \"0x123...\",\n   *      chain: sepolia,\n   *      sponsorGas: true\n   *    }\n   *  })\n   * }\n   *\n   *  return (\n   *  <button> onClick={handleConnect}>\n   *    Connect\n   *  </button>\n   * )\n   *\n   * }\n   * ```\n   */\n  accountAbstraction?: SmartWalletOptions;\n\n  /**\n   * Wallets to show as recommended in the Connect Modal\n   */\n  recommendedWallets?: Wallet[];\n\n  /**\n   * By default, Connect modal shows a \"All Wallets\" button that shows a list of 350+ wallets.\n   *\n   * You can disable this button by setting `showAllWallets` prop to `false`\n   */\n  showAllWallets?: boolean;\n\n  /**\n   * Title to show in Connect Modal\n   *\n   * The default is `\"Connect\"`\n   */\n  title?: string;\n\n  /**\n   * Replace the default thirdweb icon next to Modal title with your own icon\n   *\n   * Set to empty string (`\"\"`) to hide the icon\n   */\n  titleIcon?: string;\n\n  /**\n   * Set the size of the connect modal on desktop - `\"compact\"` or `\"wide\"`\n   *\n   * Modal size is always `compact` on mobile\n   *\n   * By default it is `\"wide\"` for desktop.\n   */\n  size?: \"compact\" | \"wide\";\n\n  /**\n   * URL of the \"terms of service\" page\n   *\n   * If provided, Modal will show a Terms of Service message at the bottom with below link\n   */\n  termsOfServiceUrl?: string;\n\n  /**\n   * URL of the \"privacy policy\" page\n   *\n   * If provided, Modal will show a Privacy Policy message at the bottom with below link\n   */\n  privacyPolicyUrl?: string;\n\n  /**\n   * Customize the welcome screen. This prop is only applicable when modal size prop is set to \"wide\". On \"wide\" Modal size, a welcome screen is shown on the right side of the modal.\n   *\n   * This screen can be customized in two ways\n   *\n   * #### 1. Customize Metadata and Image\n   * ```tsx\n   * const welcomeScreen = {\n   *  title: \"your title\",\n   *  subtitle: \"your subtitle\",\n   *  img: {\n   *   src: \"https://your-image-url.png\",\n   *   width: 300,\n   *   height: 50,\n   *  },\n   * }\n   * ```\n   *\n   * #### 2. Render Custom Component\n   *\n   * ```tsx\n   * const welcomeScreen = () => <YourCustomComponent />\n   * ```\n   */\n  welcomeScreen?: WelcomeScreen;\n\n  /**\n   * By default Connect Modal shows \"Powered by Thirdweb\" branding at the bottom of the Modal.\n   *\n   * If you want to hide the branding, set this prop to `false`\n   */\n  showThirdwebBranding?: boolean;\n\n  /**\n   * Enable SIWE (Sign in with Ethererum) by passing an object of type `SiweAuthOptions` to\n   * enforce the users to sign a message after connecting their wallet to authenticate themselves.\n   *\n   * Refer to the [`SiweAuthOptions`](https://portal.thirdweb.com/references/typescript/v5/SiweAuthOptions) for more details\n   */\n  auth?: SiweAuthOptions;\n};\n\n// TODO: consilidate Button/Embed/Modal props into one type with extras\n", "\"use client\";\n\nimport {\n  type ThirdwebContract,\n  getContract,\n} from \"../../../../../../contract/contract.js\";\nimport { getContractMetadata } from \"../../../../../../extensions/common/read/getContractMetadata.js\";\nimport { getNFT } from \"../../../../../../extensions/erc1155/read/getNFT.js\";\nimport type { PreparedTransaction } from \"../../../../../../transaction/prepare-transaction.js\";\nimport type { BaseTransactionOptions } from \"../../../../../../transaction/types.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\nimport type {\n  ClaimButtonProps,\n  ClaimParams,\n  Erc20ClaimParams,\n  Erc721ClaimParams,\n  Erc1155ClaimParams,\n} from \"./types.js\";\n\n/**\n * This button is used to claim tokens (NFT or ERC20) from a given thirdweb Drop contract.\n *\n * there are 3 type of Drop contract: NFT Drop (DropERC721), Edition Drop (DropERC1155) and Token Drop (DropERC20)\n *\n * Learn more: https://thirdweb.com/explore/drops\n *\n *\n * Note: This button only works with thirdweb Drop contracts.\n * For custom contract, please use [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n * @param props\n * @returns A wrapper for TransactionButton\n *\n * @component\n * @example\n *\n * Example for claiming NFT from an NFT Drop contract\n * ```tsx\n * import { ClaimButton } from \"thirdweb/react\";\n * import { ethereum } from \"thirdweb/chains\";\n *\n * <ClaimButton\n *   contractAddress=\"0x...\" // contract address of the NFT Drop\n *   chain={ethereum}\n *   client={client}\n *   claimParams={{\n *     type: \"ERC721\",\n *     quantity: 1n, // claim 1 token\n *   }}\n * >\n *   Claim now\n * </ClaimButton>\n * ```\n *\n * For Edition Drop (ERC1155)\n * ```tsx\n * <ClaimButton\n *   contractAddress=\"0x...\" // contract address of the Edition Drop\n *   chain={ethereum}\n *   client={client}\n *   claimParams={{\n *     type: \"ERC1155\",\n *     quantity: 1n,\n *     tokenId: 0n,\n *   }}\n * >\n *   Claim now\n * </ClaimButton>\n * ```\n *\n * For Token Drop (ERC20)\n * ```tsx\n * <ClaimButton\n *   contractAddress=\"0x...\" // contract address of the Token Drop\n *   chain={ethereum}\n *   client={client}\n *   claimParams={{\n *     type: \"ERC20\",\n *     quantity: \"100\", // claim 100 ERC20 tokens\n *     // instead of `quantity`, you can also use `quantityInWei` (bigint)\n *   }}\n * >\n *   Claim now\n * </ClaimButton>\n * ```\n *\n * Attach custom Pay metadata\n * ```tsx\n * <ClaimButton\n *   payModal={{\n *     metadata: {\n *       name: \"Van Gogh Starry Night\",\n *       image: \"https://unsplash.com/starry-night.png\"\n *     }\n *   }}\n * >...</ClaimButton>\n *\n * ```\n *\n * Since this button uses the `TransactionButton`, it can take in any props that can be passed\n * to the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n *\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n */\nexport function ClaimButton(props: ClaimButtonProps) {\n  const { children, contractAddress, client, chain, claimParams, payModal } =\n    props;\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const contract = getContract({\n    address: contractAddress,\n    client,\n    chain,\n  });\n\n  const { data: payMetadata } = useReadContract(getPayMetadata, {\n    contract,\n    tokenId: claimParams.type === \"ERC1155\" ? claimParams.tokenId : undefined,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata,\n    },\n  });\n  const account = useActiveAccount();\n  const { mutateAsync } = useSendAndConfirmTransaction();\n  return (\n    <TransactionButton\n      payModal={{\n        metadata: defaultPayModalMetadata || payMetadata,\n        ...payModal,\n      }}\n      transaction={async () => {\n        if (!account) {\n          throw new Error(\"No account detected\");\n        }\n        const [claimTx, { getApprovalForTransaction }] = await Promise.all([\n          getClaimTransaction({\n            contract,\n            account,\n            claimParams,\n          }),\n          import(\n            \"../../../../../../extensions/erc20/write/getApprovalForTransaction.js\"\n          ),\n        ]);\n        const approveTx = await getApprovalForTransaction({\n          transaction: claimTx,\n          account,\n        });\n        if (approveTx) {\n          await mutateAsync(approveTx);\n        }\n        return claimTx;\n      }}\n      {...props}\n    >\n      {children}\n    </TransactionButton>\n  );\n}\n\n/**\n * We can only get the image and name for Edition Drop\n * For NFT Drop and Token Drop we fall back to the name & image of the contract\n * @internal\n */\nasync function getPayMetadata(\n  options: BaseTransactionOptions<{ tokenId?: bigint }>,\n): Promise<{ name?: string; image?: string }> {\n  const { contract, tokenId } = options;\n  const [contractMetadata, nft] = await Promise.all([\n    getContractMetadata(options),\n    tokenId ? getNFT({ contract, tokenId }) : undefined,\n  ]);\n  if (tokenId) {\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name,\n    };\n  }\n  return {\n    image: contractMetadata?.image,\n    name: contractMetadata?.name,\n  };\n}\n\n/**\n * @internal Export for test\n */\nasync function getClaimTransaction({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: ClaimParams;\n}): Promise<PreparedTransaction> {\n  switch (claimParams.type) {\n    case \"ERC721\":\n      return await getERC721ClaimTo({ contract, account, claimParams });\n    case \"ERC1155\":\n      return await getERC1155ClaimTo({ contract, account, claimParams });\n    case \"ERC20\": {\n      return await getERC20ClaimTo({ contract, account, claimParams });\n    }\n    default:\n      throw new Error(\n        \"Invalid contract type. Must be either NFT Drop (ERC721), Edition Drop (ERC1155) or Token Drop (ERC20)\",\n      );\n  }\n}\n\n/**\n * @internal\n */\nexport async function getERC721ClaimTo({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: Erc721ClaimParams;\n}) {\n  const { claimTo } = await import(\n    \"../../../../../../extensions/erc721/drops/write/claimTo.js\"\n  );\n\n  return claimTo({\n    contract,\n    to: claimParams.to || account?.address || \"\",\n    quantity: claimParams.quantity,\n    from: claimParams.from,\n  });\n}\n\n/**\n * @internal\n */\nexport async function getERC1155ClaimTo({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: Erc1155ClaimParams;\n}) {\n  const { claimTo } = await import(\n    \"../../../../../../extensions/erc1155/drops/write/claimTo.js\"\n  );\n\n  return claimTo({\n    contract,\n    to: claimParams.to || account?.address || \"\",\n    quantity: claimParams.quantity,\n    tokenId: claimParams.tokenId,\n    from: claimParams.from,\n  });\n}\n\n/**\n * @internal\n */\nexport async function getERC20ClaimTo({\n  contract,\n  account,\n  claimParams,\n}: {\n  contract: ThirdwebContract;\n  account: Account | undefined;\n  claimParams: Erc20ClaimParams;\n}) {\n  // Ideally we should check if the contract is ERC20 using `isERC20`\n  // however TokenDrop doesn't have `supportsInterface` so it doesn't work\n  const { claimTo } = await import(\n    \"../../../../../../extensions/erc20/drops/write/claimTo.js\"\n  );\n\n  if (\"quantity\" in claimParams) {\n    return claimTo({\n      contract,\n      to: claimParams.to || account?.address || \"\",\n      quantity: claimParams.quantity,\n      from: claimParams.from,\n    });\n  }\n  if (\"quantityInWei\" in claimParams) {\n    return claimTo({\n      contract,\n      to: claimParams.to || account?.address || \"\",\n      quantityInWei: claimParams.quantityInWei,\n      from: claimParams.from,\n    });\n  }\n  throw new Error(\"Missing quantity or quantityInWei\");\n}\n", "\"use client\";\n\nimport { useCallback } from \"react\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { getListing } from \"../../../../../../extensions/marketplace/direct-listings/read/getListing.js\";\nimport type { BaseTransactionOptions } from \"../../../../../../transaction/types.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport type { TransactionButtonProps } from \"../../../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\n\nexport type BuyDirectListingButtonProps = Omit<\n  TransactionButtonProps,\n  \"transaction\"\n> & {\n  /**\n   * The contract address of the Marketplace v3 contract.\n   */\n  contractAddress: string;\n\n  /**\n   * The chain which the Drop contract is deployed on\n   */\n  chain: Chain;\n\n  /**\n   * thirdweb Client\n   */\n  client: ThirdwebClient;\n\n  /**\n   * ID of the marketplace's DirectListing\n   */\n  listingId: bigint;\n\n  /**\n   * Qty to buy (optional)\n   *\n   * - For ERC721 listing: the `quantity` is always hard-coded to 1n - passing this props doesn't do anything\n   *\n   * - For ERC1155 listing: the `quantity` defaults to the quantity of the listing if not specified.\n   *\n   * The component will also throw an error if  you pass a `quantity` and it's greater than the listing's quantity\n   */\n  quantity?: bigint;\n};\n\n/**\n * This button is used with thirdweb Marketplace v3 contract, for buying NFT(s) from a listing.\n *\n * Under the hood, it prepares a transaction using the [`buyFromListing` extension](https://portal.thirdweb.com/references/typescript/v5/marketplace/buyFromListing)\n * and then pass it to a <TransactionButton />\n *\n * Since it uses the TransactionButton, it can take in any props that can be passed\n * to the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n *\n *\n * @param props\n * @returns <TransactionButton />\n *\n * @example\n * ```tsx\n * import { BuyDirectListingButton } from \"thirdweb/react\";\n *\n * <BuyDirectListingButton\n *   contractAddress=\"0x...\" // contract address of the marketplace v3\n *   chain={...} // the chain which the marketplace contract is deployed on\n *   client={...} // thirdweb client\n *   listingId={100n} // the listingId or the item you want to buy\n *   quantity={1n} // optional - see the docs to learn more\n * >\n *   Buy NFT\n * </BuyDirectListingButton>\n * ```\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n * @component\n */\nexport function BuyDirectListingButton(props: BuyDirectListingButtonProps) {\n  const {\n    contractAddress,\n    listingId,\n    children,\n    chain,\n    client,\n    quantity,\n    payModal,\n  } = props;\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const account = useActiveAccount();\n  const contract = getContract({\n    address: contractAddress,\n    client,\n    chain,\n  });\n\n  const { data: payMetadata } = useReadContract(getPayMetadata, {\n    contract,\n    listingId,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata,\n    },\n  });\n\n  const { mutateAsync } = useSendAndConfirmTransaction();\n\n  const prepareBuyTransaction = useCallback(async () => {\n    if (!account) {\n      throw new Error(\"No account detected\");\n    }\n    const [listing, { getApprovalForTransaction }, { buyFromListing }] =\n      await Promise.all([\n        getListing({\n          contract,\n          listingId,\n        }),\n        import(\n          \"../../../../../../extensions/erc20/write/getApprovalForTransaction.js\"\n        ),\n        import(\n          \"../../../../../../extensions/marketplace/direct-listings/write/buyFromListing.js\"\n        ),\n      ]);\n    if (!listing) {\n      throw new Error(`Could not retrieve listing with ID: ${listingId}`);\n    }\n\n    let _quantity = 1n;\n    // For ERC721 the quantity should always be 1n. We throw an error if user passes a different props\n    if (listing.asset.type === \"ERC721\") {\n      if (typeof quantity === \"bigint\" && (quantity !== 1n || quantity < 0n)) {\n        throw new Error(\n          \"Invalid quantity. This is an ERC721 listing & quantity is always `1n`\",\n        );\n      }\n    } else if (listing.asset.type === \"ERC1155\") {\n      if (typeof quantity === \"bigint\") {\n        if (quantity > listing.quantity) {\n          throw new Error(\n            `quantity exceeds available amount. Available: ${listing.quantity.toString()}`,\n          );\n        }\n        if (quantity < 0n) {\n          throw new Error(\"Invalid quantity. Should be at least 1n\");\n        }\n        _quantity = quantity;\n      }\n      _quantity = listing.quantity;\n    }\n\n    const buyTx = buyFromListing({\n      contract,\n      listingId,\n      quantity: _quantity,\n      recipient: account?.address || \"\",\n    });\n\n    const approveTx = await getApprovalForTransaction({\n      transaction: buyTx,\n      account,\n    });\n\n    if (approveTx) {\n      await mutateAsync(approveTx);\n    }\n\n    return buyTx;\n  }, [account, contract, quantity, listingId, mutateAsync]);\n\n  return (\n    <TransactionButton\n      payModal={{\n        metadata: defaultPayModalMetadata || payMetadata,\n        ...payModal,\n      }}\n      transaction={() => prepareBuyTransaction()}\n      {...props}\n    >\n      {children}\n    </TransactionButton>\n  );\n}\n\n/**\n * @internal\n */\nasync function getPayMetadata(\n  options: BaseTransactionOptions<{ listingId: bigint }>,\n): Promise<{ name?: string; image?: string }> {\n  const listing = await getListing(options);\n  if (!listing) {\n    return { name: undefined, image: undefined };\n  }\n  return {\n    name: listing.asset?.metadata?.name,\n    image: listing.asset?.metadata?.image,\n  };\n}\n", "\"use client\";\n\nimport { useCallback } from \"react\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { isERC721 } from \"../../../../../../extensions/erc721/read/isERC721.js\";\nimport { isERC1155 } from \"../../../../../../extensions/erc1155/read/isERC1155.js\";\nimport {\n  type CreateListingParams,\n  createListing,\n} from \"../../../../../../extensions/marketplace/direct-listings/write/createListing.js\";\nimport type { BaseTransactionOptions } from \"../../../../../../transaction/types.js\";\nimport { useReadContract } from \"../../../../../core/hooks/contract/useReadContract.js\";\nimport type { TransactionButtonProps } from \"../../../../../core/hooks/transaction/transaction-button-utils.js\";\nimport { useSendAndConfirmTransaction } from \"../../../../../core/hooks/transaction/useSendAndConfirmTransaction.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { TransactionButton } from \"../../../TransactionButton/index.js\";\n\nexport type CreateDirectListingButtonProps = Omit<\n  TransactionButtonProps,\n  \"transaction\"\n> &\n  CreateListingParams & {\n    contractAddress: string;\n    chain: Chain;\n    client: ThirdwebClient;\n  };\n\n/**\n * This button is used to create Direct listings for the thirdweb Marketplace v3 contract\n *\n * It uses the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)\n * and the [`createListing` extension](https://portal.thirdweb.com/references/typescript/v5/marketplace/createListing) under the hood\n * which means it inherits all the props of those 2 components.\n *\n * @example\n * ```tsx\n * import { CreateDirectListingButton } from \"thirdweb/react\";\n *\n * <CreateDirectListingButton\n *   contractAddress=\"0x...\" // contract address for the marketplace-v3\n *   chain={...} // the chain which the marketplace contract is deployed on\n *\n *   // These props below are the same props for `createListing`\n *   // to get the full list, check the docs link above\n *   tokenId={0n}\n *   assetContractAddress=\"0x...\" // The NFT contract address whose NFT(s) you want to sell\n *   pricePerToken={\"0.1\"} // sell for 0.1 <native token>\n * >\n *   Sell NFT\n * </CreateDirectListingButton>\n * ```\n *\n * For error handling & callbacks on transaction-sent and transaction-confirmed,\n * please refer to the TransactionButton docs.\n * @component\n */\nexport function CreateDirectListingButton(\n  props: CreateDirectListingButtonProps,\n) {\n  const {\n    contractAddress,\n    chain,\n    client,\n    children,\n    payModal,\n    assetContractAddress,\n    tokenId,\n  } = props;\n  const marketplaceContract = getContract({\n    address: contractAddress,\n    chain,\n    client,\n  });\n  const account = useActiveAccount();\n  const defaultPayModalMetadata = payModal ? payModal.metadata : undefined;\n  const nftContract = getContract({\n    address: assetContractAddress,\n    chain,\n    client,\n  });\n  const { data: payMetadata } = useReadContract(getPayMetadata, {\n    contract: nftContract,\n    tokenId,\n    queryOptions: {\n      enabled: !defaultPayModalMetadata,\n    },\n  });\n  const { mutateAsync } = useSendAndConfirmTransaction();\n\n  const prepareTransaction = useCallback(async () => {\n    if (!account) {\n      throw new Error(\"No account detected\");\n    }\n    const [is721, is1155] = await Promise.all([\n      isERC721({ contract: nftContract }),\n      isERC1155({ contract: nftContract }),\n    ]);\n    if (!is1155 && !is721) {\n      throw new Error(\"Asset must either be ERC721 or ERC1155\");\n    }\n    // Check for token approval\n    if (is1155) {\n      const [{ isApprovedForAll }, { setApprovalForAll }] = await Promise.all([\n        import(\n          \"../../../../../../extensions/erc1155/__generated__/IERC1155/read/isApprovedForAll.js\"\n        ),\n        import(\n          \"../../../../../../extensions/erc1155/__generated__/IERC1155/write/setApprovalForAll.js\"\n        ),\n      ]);\n      const isApproved = await isApprovedForAll({\n        contract: nftContract,\n        operator: marketplaceContract.address,\n        owner: account.address,\n      });\n      if (!isApproved) {\n        const transaction = setApprovalForAll({\n          contract: nftContract,\n          operator: marketplaceContract.address,\n          approved: true,\n        });\n        await mutateAsync(transaction);\n      }\n    } else {\n      const [{ isApprovedForAll }, { setApprovalForAll }, { getApproved }] =\n        await Promise.all([\n          import(\n            \"../../../../../../extensions/erc721/__generated__/IERC721A/read/isApprovedForAll.js\"\n          ),\n          import(\n            \"../../../../../../extensions/erc721/__generated__/IERC721A/write/setApprovalForAll.js\"\n          ),\n          import(\n            \"../../../../../../extensions/erc721/__generated__/IERC721A/read/getApproved.js\"\n          ),\n        ]);\n      const [isApproved, tokenApproved] = await Promise.all([\n        isApprovedForAll({\n          contract: nftContract,\n          operator: marketplaceContract.address,\n          owner: account.address,\n        }),\n        getApproved({ contract: nftContract, tokenId: props.tokenId }),\n      ]);\n\n      if (\n        !isApproved &&\n        tokenApproved.toLowerCase() !==\n          marketplaceContract.address.toLowerCase()\n      ) {\n        const transaction = setApprovalForAll({\n          contract: nftContract,\n          operator: marketplaceContract.address,\n          approved: true,\n        });\n        await mutateAsync(transaction);\n      }\n    }\n    const listingTx = createListing({\n      contract: marketplaceContract,\n      ...props,\n    });\n\n    return listingTx;\n  }, [marketplaceContract, props, account, mutateAsync, nftContract]);\n\n  return (\n    <TransactionButton\n      transaction={() => prepareTransaction()}\n      payModal={{\n        metadata: defaultPayModalMetadata || payMetadata,\n        ...payModal,\n      }}\n      {...props}\n    >\n      {children}\n    </TransactionButton>\n  );\n}\n\n/**\n * @internal\n */\nasync function getPayMetadata(\n  options: BaseTransactionOptions<{\n    tokenId: bigint;\n  }>,\n): Promise<{ name?: string; image?: string }> {\n  const [\n    { getContractMetadata },\n    { getNFT: getERC721 },\n    { getNFT: getERC1155 },\n  ] = await Promise.all([\n    import(\"../../../../../../extensions/common/read/getContractMetadata.js\"),\n    import(\"../../../../../../extensions/erc721/read/getNFT.js\"),\n    import(\"../../../../../../extensions/erc1155/read/getNFT.js\"),\n  ]);\n  const [is721, is1155, contractMetadata] = await Promise.all([\n    isERC721(options),\n    isERC1155(options),\n    getContractMetadata(options),\n  ]);\n  if (is721) {\n    const nft = await getERC721(options);\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name,\n    };\n  }\n\n  if (is1155) {\n    const nft = await getERC1155(options);\n    return {\n      image: nft?.metadata?.image,\n      name: nft?.metadata?.name,\n    };\n  }\n\n  return {\n    image: contractMetadata?.image,\n    name: contractMetadata?.name,\n  };\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport type {\n  BaseTransactionOptions,\n  WithOverrides,\n} from \"../../../../../transaction/types.js\";\nimport { prepareContractCall } from \"../../../../../transaction/prepare-contract-call.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { once } from \"../../../../../utils/promise/once.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"createListing\" function.\n */\nexport type CreateListingParams = WithOverrides<{\n  params: AbiParameterToPrimitiveType<{\n    type: \"tuple\";\n    name: \"_params\";\n    components: [\n      { type: \"address\"; name: \"assetContract\" },\n      { type: \"uint256\"; name: \"tokenId\" },\n      { type: \"uint256\"; name: \"quantity\" },\n      { type: \"address\"; name: \"currency\" },\n      { type: \"uint256\"; name: \"pricePerToken\" },\n      { type: \"uint128\"; name: \"startTimestamp\" },\n      { type: \"uint128\"; name: \"endTimestamp\" },\n      { type: \"bool\"; name: \"reserved\" },\n    ];\n  }>;\n}>;\n\nexport const FN_SELECTOR = \"0x746415b5\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"tuple\",\n    name: \"_params\",\n    components: [\n      {\n        type: \"address\",\n        name: \"assetContract\",\n      },\n      {\n        type: \"uint256\",\n        name: \"tokenId\",\n      },\n      {\n        type: \"uint256\",\n        name: \"quantity\",\n      },\n      {\n        type: \"address\",\n        name: \"currency\",\n      },\n      {\n        type: \"uint256\",\n        name: \"pricePerToken\",\n      },\n      {\n        type: \"uint128\",\n        name: \"startTimestamp\",\n      },\n      {\n        type: \"uint128\",\n        name: \"endTimestamp\",\n      },\n      {\n        type: \"bool\",\n        name: \"reserved\",\n      },\n    ],\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n    name: \"listingId\",\n  },\n] as const;\n\n/**\n * Checks if the `createListing` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `createListing` method is supported.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { isCreateListingSupported } from \"thirdweb/extensions/marketplace\";\n *\n * const supported = isCreateListingSupported([\"0x...\"]);\n * ```\n */\nexport function isCreateListingSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"createListing\" function.\n * @param options - The options for the createListing function.\n * @returns The encoded ABI parameters.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { encodeCreateListingParams } from \"thirdweb/extensions/marketplace\";\n * const result = encodeCreateListingParams({\n *  params: ...,\n * });\n * ```\n */\nexport function encodeCreateListingParams(options: CreateListingParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.params]);\n}\n\n/**\n * Encodes the \"createListing\" function into a Hex string with its parameters.\n * @param options - The options for the createListing function.\n * @returns The encoded hexadecimal string.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { encodeCreateListing } from \"thirdweb/extensions/marketplace\";\n * const result = encodeCreateListing({\n *  params: ...,\n * });\n * ```\n */\nexport function encodeCreateListing(options: CreateListingParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeCreateListingParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Prepares a transaction to call the \"createListing\" function on the contract.\n * @param options - The options for the \"createListing\" function.\n * @returns A prepared transaction object.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { createListing } from \"thirdweb/extensions/marketplace\";\n *\n * const transaction = createListing({\n *  contract,\n *  params: ...,\n *  overrides: {\n *    ...\n *  }\n * });\n *\n * // Send the transaction\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function createListing(\n  options: BaseTransactionOptions<\n    | CreateListingParams\n    | {\n        asyncParams: () => Promise<CreateListingParams>;\n      }\n  >,\n) {\n  const asyncOptions = once(async () => {\n    return \"asyncParams\" in options ? await options.asyncParams() : options;\n  });\n\n  return prepareContractCall({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: async () => {\n      const resolvedOptions = await asyncOptions();\n      return [resolvedOptions.params] as const;\n    },\n    value: async () => (await asyncOptions()).overrides?.value,\n    accessList: async () => (await asyncOptions()).overrides?.accessList,\n    gas: async () => (await asyncOptions()).overrides?.gas,\n    gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,\n    maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,\n    maxPriorityFeePerGas: async () =>\n      (await asyncOptions()).overrides?.maxPriorityFeePerGas,\n    nonce: async () => (await asyncOptions()).overrides?.nonce,\n    extraGas: async () => (await asyncOptions()).overrides?.extraGas,\n    erc20Value: async () => (await asyncOptions()).overrides?.erc20Value,\n  });\n}\n", "import type { Address } from \"abitype\";\nimport {\n  NATIVE_TOKEN_ADDRESS,\n  isNativeTokenAddress,\n} from \"../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../contract/contract.js\";\nimport { eth_getBlockByNumber } from \"../../../../rpc/actions/eth_getBlockByNumber.js\";\nimport { getRpcClient } from \"../../../../rpc/rpc.js\";\nimport type { BaseTransactionOptions } from \"../../../../transaction/types.js\";\nimport { toUnits } from \"../../../../utils/units.js\";\nimport { isERC721 } from \"../../../erc721/read/isERC721.js\";\nimport { isERC1155 } from \"../../../erc1155/read/isERC1155.js\";\nimport * as CreateListing from \"../../__generated__/IDirectListings/write/createListing.js\";\n\n/**\n * @extension MARKETPLACE\n */\nexport type CreateListingParams = {\n  /**\n   * The contract address of the asset being listed\n   */\n  assetContractAddress: Address;\n  /**\n   * The ID of the token being listed\n   */\n  tokenId: bigint;\n  /**\n   * The quantity of tokens to list\n   *\n   * For ERC721s, this value can be omitted.\n   * @default 1\n   */\n  quantity?: bigint;\n  /**\n   * The contract address of the currency to accept for the listing\n   * @default NATIVE_TOKEN_ADDRESS\n   */\n  currencyContractAddress?: Address;\n  /**\n   * The start time of the listing\n   * @default new Date()\n   */\n  startTimestamp?: Date;\n  /**\n   * The end time of the listing\n   * @default new Date() + 10 years\n   */\n  endTimestamp?: Date;\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers\n   * @default false\n   */\n  isReservedListing?: boolean;\n} & (\n  | {\n      /**\n       * The price per token (in Ether)\n       */\n      pricePerToken: string;\n    }\n  | {\n      /**\n       * The price per token (in wei)\n       */\n      pricePerTokenWei: string;\n    }\n);\n\n/**\n * Creates a direct listing.\n * @param options The options for creating the direct listing.\n * @returns The result of creating the direct listing.\n * @extension MARKETPLACE\n * @example\n * ```typescript\n * import { createListing } from \"thirdweb/extensions/marketplace\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = createListing({\n *   assetContractAddress: \"0x...\", // the NFT contract address that you want to sell\n *   tokenId={0n}, // the token id you want to sell\n *   pricePerToken=\"0.1\" // sell for 0.1 <native token>\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n */\nexport function createListing(\n  options: BaseTransactionOptions<CreateListingParams>,\n) {\n  return CreateListing.createListing({\n    contract: options.contract,\n    asyncParams: async () => {\n      const assetContract = getContract({\n        ...options.contract,\n        address: options.assetContractAddress,\n      });\n\n      const rpcClient = getRpcClient(options.contract);\n\n      const [assetIsERC721, assetIsERC1155, lastestBlock] = await Promise.all([\n        isERC721({ contract: assetContract }),\n        isERC1155({ contract: assetContract }),\n        eth_getBlockByNumber(rpcClient, { blockTag: \"latest\" }),\n      ]);\n\n      // validate valid asset\n      if (!assetIsERC721 && !assetIsERC1155) {\n        throw new Error(\"AssetContract must implement ERC 1155 or ERC 721.\");\n      }\n\n      // validate the timestamps\n      let startTimestamp = BigInt(\n        Math.floor((options.startTimestamp ?? new Date()).getTime() / 1000),\n      );\n      const endTimestamp = BigInt(\n        Math.floor(\n          (\n            options.endTimestamp ??\n            new Date(Date.now() + 10 * 365 * 24 * 60 * 60 * 1000)\n          ).getTime() / 1000,\n        ),\n      );\n\n      if (startTimestamp <= lastestBlock.timestamp) {\n        // set the start time to the next block if it is in the past\n        startTimestamp = lastestBlock.timestamp + 1n;\n      }\n      if (startTimestamp >= endTimestamp) {\n        throw new Error(\"Start time must be before end time.\");\n      }\n\n      // valdiate quantity\n      let quantity: bigint;\n      if (assetIsERC721) {\n        // force quantity to 1 for ERC721s\n        quantity = 1n;\n      } else {\n        // otherwise use the provided quantity or default to 1\n        quantity = options.quantity ?? 1n;\n      }\n\n      // validate price\n      const currencyAddress =\n        options.currencyContractAddress ?? NATIVE_TOKEN_ADDRESS;\n      let pricePerToken: bigint;\n      if (\"pricePerToken\" in options) {\n        // for native token, we know decimals are 18\n        if (isNativeTokenAddress(currencyAddress)) {\n          pricePerToken = toUnits(options.pricePerToken, 18);\n        } else {\n          // otherwise get the decimals of the currency\n          const currencyContract = getContract({\n            ...options.contract,\n            address: currencyAddress,\n          });\n          const { decimals } = await import(\"../../../erc20/read/decimals.js\");\n          const currencyDecimals = await decimals({\n            contract: currencyContract,\n          });\n          pricePerToken = toUnits(options.pricePerToken, currencyDecimals);\n        }\n      } else {\n        pricePerToken = BigInt(options.pricePerTokenWei);\n      }\n\n      return {\n        params: {\n          assetContract: options.assetContractAddress,\n          tokenId: options.tokenId,\n          currency: options.currencyContractAddress ?? NATIVE_TOKEN_ADDRESS,\n          quantity,\n          pricePerToken,\n          startTimestamp,\n          endTimestamp,\n          reserved: options.isReservedListing ?? false,\n        },\n        overrides: {\n          extraGas: 50_000n, // add extra gas to account for router call\n        },\n      } as const;\n    },\n  });\n}\n\n/**\n * Checks if the `createListing` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `createListing` method is supported.\n * @extension MARKETPLACE\n * @example\n * ```ts\n * import { isCreateAuctionSupported } from \"thirdweb/extensions/marketplace\";\n *\n * const supported = isCreateAuctionSupported([\"0x...\"]);\n * ```\n */\nexport function isCreateListingSupported(availableSelectors: string[]) {\n  return CreateListing.isCreateListingSupported(availableSelectors);\n}\n", "\"use client\";\n\nimport { useSuspenseQuery } from \"@tanstack/react-query\";\nimport { createContext, useContext } from \"react\";\nimport type { ThirdwebContract } from \"../../../../../contract/contract.js\";\nimport { getNFT as getNFT721 } from \"../../../../../extensions/erc721/read/getNFT.js\";\nimport { getNFT as getNFT1155 } from \"../../../../../extensions/erc1155/read/getNFT.js\";\nimport type { NFT as NFTType } from \"../../../../../utils/nft/parseNft.js\";\nimport { MediaRenderer } from \"../../MediaRenderer/MediaRenderer.js\";\nimport type { MediaRendererProps } from \"../../MediaRenderer/types.js\";\n\n/**\n * Props for the <NFT> component\n * @component\n */\ntype NFTProviderProps = {\n  /**\n   * The NFT contract address. Accepts both ERC721 and ERC1155 contracts\n   */\n  contract: ThirdwebContract;\n  /**\n   * The tokenId whose info you want to display\n   */\n  tokenId: bigint;\n};\n\n/**\n * @internal\n */\nexport const NFTProviderContext = /* @__PURE__ */ createContext<\n  NFTProviderProps | undefined\n>(undefined);\n\n/**\n * A React context provider component that supplies NFT-related data to its child components.\n *\n * This component serves as a wrapper around the `NFTProviderContext.Provider` and passes\n * the provided NFT data down to all of its child components through the context API.\n *\n *\n * @component\n * @param {React.PropsWithChildren<NFTProviderProps>} props - The props for the NFT provider\n *\n * @example\n * ```tsx\n * import { getContract } from \"thirdweb\";\n * import { NFT } from \"thirdweb/react\";\n *\n * const contract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: yourThirdwebClient,\n * });\n *\n * <NFT contract={contract} tokenId={0n}>\n *   <Suspense fallback={\"Loading media...\"}>\n *     <NFT.Media />\n *     <NFT.Description />\n *   </Suspense>\n * </NFT>\n * ```\n */\nexport function NFT(props: React.PropsWithChildren<NFTProviderProps>) {\n  return (\n    <NFTProviderContext.Provider value={props}>\n      {props.children}\n    </NFTProviderContext.Provider>\n  );\n}\n\n/**\n * @internal\n */\nfunction useNFTContext() {\n  const ctx = useContext(NFTProviderContext);\n  if (!ctx) {\n    throw new Error(\n      \"NFTProviderContext not found. Make sure you are using NFT.Media, NFT.Description, etc. inside a <NFT /> component\",\n    );\n  }\n  return ctx;\n}\n\n/**\n * @component\n * The props for the <NFT.Media /> component\n * It is similar to the [`MediaRendererProps`](https://portal.thirdweb.com/references/typescript/v5/MediaRendererProps)\n * (excluding `src`, `poster` and `client`) that you can\n * use to style the NFT.Media\n */\nexport type NFTMediaProps = Omit<\n  MediaRendererProps,\n  \"src\" | \"poster\" | \"client\"\n>;\n\n/**\n * This component fetches and displays an NFT's media. It uses thirdweb [`MediaRenderer`](https://portal.thirdweb.com/react/v5/components/MediaRenderer) under the hood\n * so you can style it just like how you would style a MediaRenderer.\n * @returns A MediaRenderer component\n *\n * Since this component has an internal loading state (for when the NFT media is being fetched),\n * you must wrap it with React.Suspense to make it work.\n *\n * @component\n * @example\n * ### Basic usage\n * ```tsx\n * import { getContract } from \"thirdweb\";\n * import { NFT } from \"thirdweb/react\";\n *\n * const nftContract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: yourThirdwebClient,\n * });\n *\n * <NFT contract={nftContract} tokenId={0n}>\n *   This will show the media for tokenId #0 from the `nftContract` collection\n *   <Suspense fallback={\"Loading media...\"}>\n *     <NFT.Media />\n *   </Suspense>\n * </NFT>\n * ```\n *\n * ### Basic stylings\n * You can style NFT.Media with the `style` and `className` props.\n * ```tsx\n * <NFT.Media style={{ borderRadius: \"8px\" }} className=\"mx-auto\" />\n * ```\n */\nNFT.Media = (props: NFTMediaProps) => {\n  const { contract, tokenId } = useNFTContext();\n  const nftQuery = useSuspenseQuery({\n    queryKey: [\n      \"__nft_info_internal__\",\n      contract.chain.id,\n      contract.address,\n      tokenId.toString(),\n    ],\n    queryFn: () => getNFTInfo({ contract, tokenId }),\n  });\n  const animation_url = nftQuery.data?.metadata.animation_url;\n  const image =\n    nftQuery.data?.metadata.image || nftQuery.data?.metadata.image_url;\n\n  return (\n    <MediaRenderer\n      client={contract.client}\n      src={animation_url || image}\n      poster={image}\n      {...props}\n    />\n  );\n};\n\n/**\n * This component fetches and displays an NFT's name. It takes in a `className` and `style` props\n * so you can style it just like how you would style a <span> element.\n * @returns A <span> element containing the name of the NFT\n *\n * Since this component has an internal loading state (for when the NFT media is being fetched),\n * you must wrap it with React.Suspense to make it work.\n *\n * @component\n * @example\n * ### Basic usage\n * ```tsx\n * import { getContract } from \"thirdweb\";\n * import { NFT } from \"thirdweb/react\";\n *\n * const nftContract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: yourThirdwebClient,\n * });\n *\n * <NFT contract={nftContract} tokenId={0n}>\n *   This will show the name for tokenId #0 from the `nftContract` collection\n *   <Suspense fallback={\"Loading nft name...\"}>\n *     <NFT.Name className=\"mx-auto\" style={{ color: \"red\" }} />\n *   </Suspense>\n * </NFT>\n * ```\n */\nNFT.Name = (props: { className?: string; style?: React.CSSProperties }) => {\n  const { contract, tokenId } = useNFTContext();\n  const nftQuery = useSuspenseQuery({\n    queryKey: [\n      \"__nft_info_internal__\",\n      contract.chain.id,\n      contract.address,\n      tokenId.toString(),\n    ],\n    queryFn: () => getNFTInfo({ contract, tokenId }),\n  });\n  const name = nftQuery.data?.metadata.name || \"\";\n  return <span {...props}>{name}</span>;\n};\n\n/**\n * This component fetches and displays an NFT's description. It takes in a `className` and `style` props\n * so you can style it just like how you would style a <span> element.\n * @returns A <span> element containing the description of the NFT\n *\n * Since this component has an internal loading state (for when the NFT media is being fetched),\n * you must wrap it with React.Suspense to make it work.\n *\n * @component\n * @example\n * ### Basic usage\n * ```tsx\n * import { getContract } from \"thirdweb\";\n * import { NFT } from \"thirdweb/react\";\n *\n * const nftContract = getContract({\n *   address: \"0x...\",\n *   chain: ethereum,\n *   client: yourThirdwebClient,\n * });\n *\n * <NFT contract={nftContract} tokenId={0n}>\n *   This will show the description for tokenId #0 from the `nftContract` collection\n *   <Suspense fallback={\"Loading description...\"}>\n *     <NFT.Description className=\"mx-auto\" style={{ color: \"red\" }} />\n *   </Suspense>\n * </NFT>\n * ```\n */\nNFT.Description = (props: {\n  className: string;\n  style: React.CSSProperties;\n}) => {\n  const { contract, tokenId } = useNFTContext();\n  const nftQuery = useSuspenseQuery({\n    queryKey: [\n      \"__nft_info_internal__\",\n      contract.chain.id,\n      contract.address,\n      tokenId.toString(),\n    ],\n    queryFn: () => getNFTInfo({ contract, tokenId }),\n  });\n  const description = nftQuery.data?.metadata.description || \"\";\n  return <span {...props}>{description}</span>;\n};\n\n/**\n * @internal\n */\nexport async function getNFTInfo(options: NFTProviderProps): Promise<NFTType> {\n  const nft = await Promise.allSettled([\n    getNFT721(options),\n    getNFT1155(options),\n  ]).then(([possibleNFT721, possibleNFT1155]) => {\n    // getNFT extension always return an NFT object\n    // so we need to check if the tokenURI exists\n    if (\n      possibleNFT721.status === \"fulfilled\" &&\n      possibleNFT721.value.tokenURI\n    ) {\n      return possibleNFT721.value;\n    }\n    if (\n      possibleNFT1155.status === \"fulfilled\" &&\n      possibleNFT1155.value.tokenURI\n    ) {\n      return possibleNFT1155.value;\n    }\n    throw new Error(\"Failed to load NFT metadata\");\n  });\n  return nft;\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { getLastAuthProvider } from \"../../../react/core/utils/storage.js\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../wallets/in-app/core/wallet/types.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\n\n/**\n * Embeds another thirdweb-supported site for seamless in-app and ecosystem wallet connection.\n *\n * @note Make sure the embedded site includes <AutoConnect /> and supports frame ancestors, see [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors) for more information.\n *\n * @note The embedded site must support the connected wallet (ecosystem or in-app).\n *\n * @param {Object} props - The props to pass to the iframe\n * @param {String} props.src - The URL of the site to embed\n * @param {ThirdwebClient} props.client - The current site's thirdweb client\n * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the embedded site\n *\n * @example\n * ```tsx\n * import { SiteEmbed } from \"thirdweb/react\";\n *\n * <SiteEmbed src=\"https://thirdweb.com\" client={thirdwebClient} ecosystem={{ id: \"ecosystem.thirdweb\" }} />\n * ```\n */\nexport function SiteEmbed({\n  src,\n  client,\n  ecosystem,\n  ...props\n}: {\n  src: string;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n} & React.DetailedHTMLProps<\n  React.IframeHTMLAttributes<HTMLIFrameElement>,\n  HTMLIFrameElement\n>) {\n  if (!client.clientId) {\n    throw new Error(\"The SiteEmbed client must have a clientId\");\n  }\n\n  const activeWallet = useActiveWallet();\n  const walletId = activeWallet?.id;\n\n  const {\n    data: { authProvider, authCookie } = {},\n  } = useQuery({\n    queryKey: [\"site-embed\", walletId, src, client.clientId, ecosystem],\n    enabled:\n      activeWallet && (isEcosystemWallet(activeWallet) || walletId === \"inApp\"),\n    queryFn: async () => {\n      const storage = new ClientScopedStorage({\n        storage: webLocalStorage,\n        clientId: client.clientId,\n        ecosystem,\n      });\n\n      const authProvider = await getLastAuthProvider(webLocalStorage);\n      const authCookie = await storage.getAuthCookie();\n\n      return { authProvider, authCookie };\n    },\n  });\n\n  const url = new URL(src);\n  if (walletId) {\n    url.searchParams.set(\"walletId\", walletId);\n  }\n  if (authProvider) {\n    url.searchParams.set(\"authProvider\", authProvider);\n  }\n  if (authCookie) {\n    url.searchParams.set(\"authCookie\", authCookie);\n  }\n\n  return (\n    <iframe\n      src={encodeURI(url.toString())}\n      width=\"100%\"\n      height=\"100%\"\n      allowFullScreen\n      {...props}\n    />\n  );\n}\n", "\"use client\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport { getLastAuthProvider } from \"../../../react/core/utils/storage.js\";\nimport { webLocalStorage } from \"../../../utils/storage/webStorage.js\";\nimport { isEcosystemWallet } from \"../../../wallets/ecosystem/is-ecosystem-wallet.js\";\nimport { ClientScopedStorage } from \"../../../wallets/in-app/core/authentication/client-scoped-storage.js\";\nimport type { Ecosystem } from \"../../../wallets/in-app/core/wallet/types.js\";\nimport { useActiveWallet } from \"../../core/hooks/wallets/useActiveWallet.js\";\n\n/**\n * Creates a link to another thirdweb-supported site with wallet connection parameters.\n *\n * @note The target site must support the connected wallet (ecosystem or in-app).\n *\n * @param {Object} props - The props to pass to the anchor tag\n * @param {String} props.href - The URL of the site to link to\n * @param {ThirdwebClient} props.client - The current site's thirdweb client\n * @param {Ecosystem} [props.ecosystem] - The ecosystem to use for the wallet connection in the target site\n * @param {React.ReactNode} props.children - The content to render inside the link\n *\n * @example\n * ```tsx\n * import { SiteLink } from \"thirdweb/react\";\n *\n * <SiteLink href=\"https://thirdweb.com\" client={thirdwebClient} ecosystem={{ id: \"ecosystem.thirdweb\" }}>\n *   Visit Site\n * </SiteLink>\n * ```\n */\nexport function SiteLink({\n  href,\n  client,\n  ecosystem,\n  children,\n  ...props\n}: {\n  href: string;\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  children: React.ReactNode;\n} & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">) {\n  if (!client.clientId) {\n    throw new Error(\"The SiteLink client must have a clientId\");\n  }\n\n  const activeWallet = useActiveWallet();\n  const walletId = activeWallet?.id;\n\n  const {\n    data: { authProvider, authCookie } = {},\n  } = useQuery({\n    queryKey: [\"site-link\", walletId, href, client.clientId, ecosystem],\n    enabled:\n      activeWallet && (isEcosystemWallet(activeWallet) || walletId === \"inApp\"),\n    queryFn: async () => {\n      const storage = new ClientScopedStorage({\n        storage: webLocalStorage,\n        clientId: client.clientId,\n        ecosystem,\n      });\n\n      const authProvider = await getLastAuthProvider(webLocalStorage);\n      const authCookie = await storage.getAuthCookie();\n\n      return { authProvider, authCookie };\n    },\n  });\n\n  const url = new URL(href);\n  if (walletId) {\n    url.searchParams.set(\"walletId\", walletId);\n  }\n  if (authProvider) {\n    url.searchParams.set(\"authProvider\", authProvider);\n  }\n  if (authCookie) {\n    url.searchParams.set(\"authCookie\", authCookie);\n  }\n\n  return (\n    <a href={encodeURI(url.toString())} {...props}>\n      {children}\n    </a>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "_jsx", "_jsxs", "_Fragment", "import_react", "import_react", "import_react", "_jsxs", "_jsx", "_Fragment", "_jsx", "_jsx", "sendTransaction", "_jsx", "_jsxs", "import_react", "import_react", "_jsx", "_jsxs", "_jsx", "queryOptions", "import_react", "import_react", "queryOptions", "queryOptions", "import_react", "_a", "_b", "_jsx", "_jsxs", "_Fragment", "import_react", "_jsx", "Modal", "_jsx", "getNFT", "import_react", "getPayMetadata", "_jsx", "import_react", "createListing", "getPayMetadata", "createListing", "_jsx", "getContractMetadata", "import_react", "_jsx", "getNFT", "authProvider", "authCookie", "_jsx", "authProvider", "authCookie", "_jsx"]
}
