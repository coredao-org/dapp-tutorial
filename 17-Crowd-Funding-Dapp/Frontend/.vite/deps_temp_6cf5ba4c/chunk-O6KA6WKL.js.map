{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/wallets/in-app/core/wallet/index.ts"],
  "sourcesContent": ["import { ethereum } from \"../../../../chains/chain-definitions/ethereum.js\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport {\n  type SocialAuthOption,\n  socialAuthOptions,\n} from \"../../../../wallets/types.js\";\nimport type { Account, Wallet } from \"../../../interfaces/wallet.js\";\nimport type { EcosystemWalletId, WalletId } from \"../../../wallet-types.js\";\nimport type {\n  CreateWalletArgs,\n  WalletAutoConnectionOption,\n  WalletConnectionOption,\n} from \"../../../wallet-types.js\";\nimport type { InAppConnector } from \"../interfaces/connector.js\";\n\n/**\n * Checks if the provided wallet is an in-app wallet.\n *\n * @param wallet - The wallet to check.\n * @returns True if the wallet is an in-app wallet, false otherwise.\n */\nexport function isInAppWallet(\n  wallet: Wallet<WalletId>,\n): wallet is Wallet<\"inApp\" | \"embedded\"> {\n  return wallet.id === \"inApp\" || wallet.id === \"embedded\";\n}\n\n/**\n * @internal\n */\nexport async function connectInAppWallet(\n  options:\n    | WalletConnectionOption<\"inApp\">\n    | WalletConnectionOption<EcosystemWalletId>,\n  createOptions:\n    | CreateWalletArgs<\"inApp\">[1]\n    | CreateWalletArgs<EcosystemWalletId>[1],\n  connector: InAppConnector,\n): Promise<[Account, Chain]> {\n  if (\n    // if auth mode is not specified, the default is popup\n    createOptions?.auth?.mode !== \"popup\" &&\n    createOptions?.auth?.mode !== undefined &&\n    connector.authenticateWithRedirect\n  ) {\n    const strategy = options.strategy;\n    if (socialAuthOptions.includes(strategy as SocialAuthOption)) {\n      connector.authenticateWithRedirect(\n        strategy as SocialAuthOption,\n        createOptions?.auth?.mode,\n        createOptions?.auth?.redirectUrl,\n      );\n    }\n  }\n  // If we don't have authenticateWithRedirect then it's likely react native, so the default is to redirect and we can carry on\n  // IF WE EVER ADD MORE CONNECTOR TYPES, this could cause redirect to be ignored despite being specified\n  // TODO: In V6, make everything redirect auth\n\n  const authResult = await connector.connect(options);\n  const authAccount = authResult.user.account;\n\n  if (\n    createOptions &&\n    \"smartAccount\" in createOptions &&\n    createOptions?.smartAccount\n  ) {\n    return convertToSmartAccount({\n      client: options.client,\n      authAccount,\n      smartAccountOptions: createOptions.smartAccount,\n      chain: options.chain,\n    });\n  }\n\n  return [authAccount, options.chain || ethereum] as const;\n}\n\n/**\n * @internal\n */\nexport async function autoConnectInAppWallet(\n  options:\n    | WalletAutoConnectionOption<\"inApp\">\n    | WalletAutoConnectionOption<EcosystemWalletId>,\n  createOptions:\n    | CreateWalletArgs<\"inApp\">[1]\n    | CreateWalletArgs<EcosystemWalletId>[1],\n  connector: InAppConnector,\n): Promise<[Account, Chain]> {\n  if (options.authResult && connector.loginWithAuthToken) {\n    await connector.loginWithAuthToken(options.authResult);\n  }\n\n  const user = await getAuthenticatedUser(connector);\n  if (!user) {\n    throw new Error(\"Failed to authenticate user.\");\n  }\n\n  const authAccount = user.account;\n\n  if (\n    createOptions &&\n    \"smartAccount\" in createOptions &&\n    createOptions?.smartAccount\n  ) {\n    return convertToSmartAccount({\n      client: options.client,\n      authAccount,\n      smartAccountOptions: createOptions.smartAccount,\n      chain: options.chain,\n    });\n  }\n\n  return [authAccount, options.chain || ethereum] as const;\n}\n\nasync function convertToSmartAccount(options: {\n  client: ThirdwebClient;\n  authAccount: Account;\n  smartAccountOptions: CreateWalletArgs<\"smart\">[1];\n  chain?: Chain;\n}) {\n  const [{ smartWallet }, { connectSmartWallet }] = await Promise.all([\n    import(\"../../../smart/smart-wallet.js\"),\n    import(\"../../../smart/index.js\"),\n  ]);\n\n  const sa = smartWallet(options.smartAccountOptions);\n  return connectSmartWallet(\n    sa,\n    {\n      client: options.client,\n      personalAccount: options.authAccount,\n      chain: options.chain,\n    },\n    options.smartAccountOptions,\n  );\n}\n\nasync function getAuthenticatedUser(connector: InAppConnector) {\n  const user = await connector.getUser();\n  switch (user.status) {\n    case \"Logged In, Wallet Initialized\": {\n      return user;\n    }\n  }\n  return undefined;\n}\n"],
  "mappings": ";;;;;;;;AAsBM,SAAU,cACd,QAAwB;AAExB,SAAO,OAAO,OAAO,WAAW,OAAO,OAAO;AAChD;AAKA,eAAsB,mBACpB,SAGA,eAGA,WAAyB;AAtC3B;AAwCE;;MAEE,oDAAe,SAAf,mBAAqB,UAAS,aAC9B,oDAAe,SAAf,mBAAqB,UAAS,UAC9B,UAAU;IACV;AACA,UAAM,WAAW,QAAQ;AACzB,QAAI,kBAAkB,SAAS,QAA4B,GAAG;AAC5D,gBAAU,yBACR,WACA,oDAAe,SAAf,mBAAqB,OACrB,oDAAe,SAAf,mBAAqB,WAAW;IAEpC;EACF;AAKA,QAAM,aAAa,MAAM,UAAU,QAAQ,OAAO;AAClD,QAAM,cAAc,WAAW,KAAK;AAEpC,MACE,iBACA,kBAAkB,kBAClB,+CAAe,eACf;AACA,WAAO,sBAAsB;MAC3B,QAAQ,QAAQ;MAChB;MACA,qBAAqB,cAAc;MACnC,OAAO,QAAQ;KAChB;EACH;AAEA,SAAO,CAAC,aAAa,QAAQ,SAAS,QAAQ;AAChD;AAKA,eAAsB,uBACpB,SAGA,eAGA,WAAyB;AAEzB,MAAI,QAAQ,cAAc,UAAU,oBAAoB;AACtD,UAAM,UAAU,mBAAmB,QAAQ,UAAU;EACvD;AAEA,QAAM,OAAO,MAAM,qBAAqB,SAAS;AACjD,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,8BAA8B;EAChD;AAEA,QAAM,cAAc,KAAK;AAEzB,MACE,iBACA,kBAAkB,kBAClB,+CAAe,eACf;AACA,WAAO,sBAAsB;MAC3B,QAAQ,QAAQ;MAChB;MACA,qBAAqB,cAAc;MACnC,OAAO,QAAQ;KAChB;EACH;AAEA,SAAO,CAAC,aAAa,QAAQ,SAAS,QAAQ;AAChD;AAEA,eAAe,sBAAsB,SAKpC;AACC,QAAM,CAAC,EAAE,YAAW,GAAI,EAAE,mBAAkB,CAAE,IAAI,MAAM,QAAQ,IAAI;IAClE,OAAO,4BAAgC;IACvC,OAAO,qBAAyB;GACjC;AAED,QAAM,KAAK,YAAY,QAAQ,mBAAmB;AAClD,SAAO,mBACL,IACA;IACE,QAAQ,QAAQ;IAChB,iBAAiB,QAAQ;IACzB,OAAO,QAAQ;KAEjB,QAAQ,mBAAmB;AAE/B;AAEA,eAAe,qBAAqB,WAAyB;AAC3D,QAAM,OAAO,MAAM,UAAU,QAAO;AACpC,UAAQ,KAAK,QAAQ;IACnB,KAAK,iCAAiC;AACpC,aAAO;IACT;EACF;AACA,SAAO;AACT;",
  "names": []
}
