{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/wallets/coinbase/coinbaseWebSDK.ts"],
  "sourcesContent": ["import type { ProviderInterface } from \"@coinbase/wallet-sdk\";\nimport type { Address } from \"abitype\";\nimport {\n  type SignTypedDataParameters,\n  getTypesForEIP712Domain,\n  isHex,\n  serializeTypedData,\n  validateTypedData,\n} from \"viem\";\nimport type { Account, Wallet } from \"../interfaces/wallet.js\";\nimport type { SendTransactionOption } from \"../interfaces/wallet.js\";\nimport type { AppMetadata, DisconnectFn, SwitchChainFn } from \"../types.js\";\nimport { getValidPublicRPCUrl } from \"../utils/chains.js\";\nimport { normalizeChainId } from \"../utils/normalizeChainId.js\";\n\nimport type { Preference } from \"@coinbase/wallet-sdk/dist/core/provider/interface.js\";\nimport { trackTransaction } from \"../../analytics/track/transaction.js\";\nimport type { Chain } from \"../../chains/types.js\";\nimport { getCachedChain, getChainMetadata } from \"../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getAddress } from \"../../utils/address.js\";\nimport {\n  type Hex,\n  numberToHex,\n  stringToHex,\n  uint8ArrayToHex,\n} from \"../../utils/encoding/hex.js\";\nimport { parseTypedData } from \"../../utils/signatures/helpers/parseTypedData.js\";\nimport { COINBASE } from \"../constants.js\";\nimport type {\n  GetCallsStatusResponse,\n  WalletCapabilities,\n  WalletCapabilitiesRecord,\n  WalletSendCallsId,\n  WalletSendCallsParameters,\n} from \"../eip5792/types.js\";\nimport { getDefaultAppMetadata } from \"../utils/defaultDappMetadata.js\";\nimport type { WalletEmitter } from \"../wallet-emitter.js\";\nimport type {\n  CreateWalletArgs,\n  WalletConnectionOption,\n} from \"../wallet-types.js\";\nimport { showCoinbasePopup } from \"./utils.js\";\n\nexport type CoinbaseWalletCreationOptions =\n  | {\n      /**\n       * Metadata of the dApp that will be passed to connected wallet.\n       *\n       * Some wallets may display this information to the user.\n       *\n       * Setting this property is highly recommended. If this is not set, Below default metadata will be used:\n       *\n       * ```ts\n       * {\n       *   name: \"thirdweb powered dApp\",\n       *   url: \"https://thirdweb.com\",\n       *   description: \"thirdweb powered dApp\",\n       *   logoUrl: \"https://thirdweb.com/favicon.ico\",\n       * };\n       * ```\n       */\n      appMetadata?: AppMetadata;\n\n      /**\n       * Wallet configuration, choices are 'all' | 'smartWalletOnly' | 'eoaOnly'\n       * @default 'all'\n       * @example\n       * ```ts\n       * {\n       *  walletConfig: {\n       *   options: 'all',\n       *  }\n       * }\n       * ```\n       */\n      walletConfig?: Preference;\n\n      /**\n       * Chains that the wallet can switch chains to, will default to the first chain in this array on first connection.\n       * @default Ethereum mainnet\n       * @example\n       * ```ts\n       * {\n       *   chains: [base, optimisim]\n       * }\n       */\n      chains?: Chain[];\n\n      mobileConfig?: {\n        /**\n         * The univeral callback URL to redirect the user to after they have completed the wallet connection with the cb wallet app.\n         * This needs to be setup as a Universal link for iOS https://docs.cdp.coinbase.com/wallet-sdk/docs/ios-setup/\n         * and App link on Android https://docs.cdp.coinbase.com/wallet-sdk/docs/android-setup/\n         */\n        callbackURL?: string;\n      };\n    }\n  | undefined;\n\n/**\n * Options for connecting to the CoinbaseSDK Wallet\n */\nexport type CoinbaseSDKWalletConnectionOptions = {\n  /**\n   * The Thirdweb client object\n   */\n  client: ThirdwebClient;\n\n  /**\n   * If you want the wallet to be connected to a specific blockchain, you can pass a `Chain` object to the `connect` method.\n   * This will trigger a chain switch if the wallet provider is not already connected to the specified chain.\n   *\n   * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.\n   * At minimum, you need to pass the `id` of the blockchain.\n   *\n   * ```ts\n   * import { defineChain } from \"thirdweb\";\n   * const myChain = defineChain(myChainId);\n   *\n   * const address = await wallet.connect({ chain: myChain })\n   */\n  chain?: Chain;\n};\n\n// Need to keep the provider around because it keeps a single popup window connection behind the scenes\n// this should be ok since all the creation options are provided at build time\nlet _provider: ProviderInterface | undefined;\n\n/**\n * @internal\n */\nexport async function getCoinbaseWebProvider(\n  options?: CreateWalletArgs<typeof COINBASE>[1],\n): Promise<ProviderInterface> {\n  if (!_provider) {\n    let CoinbaseWalletSDK: unknown = (await import(\"@coinbase/wallet-sdk\"))\n      .default;\n    // Workaround for Vite dev import errors\n    // https://github.com/vitejs/vite/issues/7112\n    if (\n      typeof CoinbaseWalletSDK !== \"function\" &&\n      typeof (CoinbaseWalletSDK as { default: unknown }).default === \"function\"\n    ) {\n      CoinbaseWalletSDK = (\n        CoinbaseWalletSDK as unknown as { default: typeof CoinbaseWalletSDK }\n      ).default;\n    }\n\n    // @ts-expect-error This import error is not visible to TypeScript\n    const client = new CoinbaseWalletSDK({\n      appName: options?.appMetadata?.name || getDefaultAppMetadata().name,\n      appChainIds: options?.chains\n        ? options.chains.map((c) => c.id)\n        : undefined,\n      appLogoUrl:\n        options?.appMetadata?.logoUrl || getDefaultAppMetadata().logoUrl,\n    });\n\n    const provider = client.makeWeb3Provider(options?.walletConfig);\n    _provider = provider;\n    return provider;\n  }\n  return _provider;\n}\n\n/**\n * Checks if the provided wallet is a Coinbase SDK wallet.\n *\n * @param wallet - The wallet to check.\n * @returns True if the wallet is a Coinbase SDK wallet, false otherwise.\n */\nexport function isCoinbaseSDKWallet(\n  wallet: Wallet,\n): wallet is Wallet<typeof COINBASE> {\n  return wallet.id === COINBASE;\n}\n\n/**\n * @internal\n */\nexport async function coinbaseSDKWalletGetCapabilities(args: {\n  wallet: Wallet<typeof COINBASE>;\n}) {\n  const { wallet } = args;\n\n  const account = wallet.getAccount();\n  if (!account) {\n    return {\n      message: `Can't get capabilities, no account connected for wallet: ${wallet.id}`,\n    };\n  }\n\n  const config = wallet.getConfig();\n  const provider = await getCoinbaseWebProvider(config);\n  try {\n    return (await provider.request({\n      method: \"wallet_getCapabilities\",\n      params: [account.address],\n    })) as WalletCapabilitiesRecord<WalletCapabilities, number>;\n  } catch (error: unknown) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      return {\n        message: `${wallet.id} does not support wallet_getCapabilities, reach out to them directly to request EIP-5792 support.`,\n      };\n    }\n    throw error;\n  }\n}\n\n/**\n * @internal\n */\nexport async function coinbaseSDKWalletSendCalls(args: {\n  wallet: Wallet<typeof COINBASE>;\n  params: WalletSendCallsParameters;\n}) {\n  const { wallet, params } = args;\n\n  const config = wallet.getConfig();\n  const provider = await getCoinbaseWebProvider(config);\n\n  try {\n    return (await provider.request({\n      method: \"wallet_sendCalls\",\n      params,\n    })) as WalletSendCallsId;\n  } catch (error) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      throw new Error(\n        `${wallet.id} does not support wallet_sendCalls, reach out to them directly to request EIP-5792 support.`,\n      );\n    }\n    throw error;\n  }\n}\n\n/**\n * @internal\n */\nexport async function coinbaseSDKWalletShowCallsStatus(args: {\n  wallet: Wallet<typeof COINBASE>;\n  bundleId: string;\n}) {\n  const { wallet, bundleId } = args;\n\n  const provider = await getCoinbaseWebProvider(wallet.getConfig());\n\n  try {\n    return await provider.request({\n      method: \"wallet_showCallsStatus\",\n      params: [bundleId],\n    });\n  } catch (error: unknown) {\n    if (/unsupport|not support/i.test((error as Error).message)) {\n      throw new Error(\n        `${wallet.id} does not support wallet_showCallsStatus, reach out to them directly to request EIP-5792 support.`,\n      );\n    }\n    throw error;\n  }\n}\n\n/**\n * @internal\n */\nexport async function coinbaseSDKWalletGetCallsStatus(args: {\n  wallet: Wallet<typeof COINBASE>;\n  bundleId: string;\n}) {\n  const { wallet, bundleId } = args;\n\n  const config = wallet.getConfig();\n  const provider = await getCoinbaseWebProvider(config);\n\n  return provider.request({\n    method: \"wallet_getCallsStatus\",\n    params: [bundleId],\n  }) as Promise<GetCallsStatusResponse>;\n}\n\nfunction createAccount({\n  provider,\n  address,\n  client,\n}: {\n  provider: ProviderInterface;\n  address: string;\n  client: ThirdwebClient;\n}) {\n  const account: Account = {\n    address,\n    async sendTransaction(tx: SendTransactionOption) {\n      const transactionHash = (await provider.request({\n        method: \"eth_sendTransaction\",\n        params: [\n          {\n            accessList: tx.accessList,\n            value: tx.value ? numberToHex(tx.value) : undefined,\n            gas: tx.gas ? numberToHex(tx.gas) : undefined,\n            from: getAddress(address),\n            to: tx.to as Address,\n            data: tx.data,\n          },\n        ],\n      })) as Hex;\n\n      trackTransaction({\n        client: client,\n        chainId: tx.chainId,\n        walletAddress: getAddress(address),\n        walletType: COINBASE,\n        transactionHash,\n        contractAddress: tx.to ?? undefined,\n        gasPrice: tx.gasPrice,\n      });\n\n      return {\n        transactionHash,\n      };\n    },\n    async signMessage({ message }) {\n      if (!account.address) {\n        throw new Error(\"Provider not setup\");\n      }\n\n      const messageToSign = (() => {\n        if (typeof message === \"string\") {\n          return stringToHex(message);\n        }\n        if (message.raw instanceof Uint8Array) {\n          return uint8ArrayToHex(message.raw);\n        }\n        return message.raw;\n      })();\n\n      const res = await provider.request({\n        method: \"personal_sign\",\n        params: [messageToSign, account.address],\n      });\n      if (!isHex(res)) {\n        throw new Error(\"Invalid signature returned\");\n      }\n      return res;\n    },\n    async signTypedData(_typedData) {\n      if (!account.address) {\n        throw new Error(\"Provider not setup\");\n      }\n      const typedData = parseTypedData(_typedData);\n      const { domain, message, primaryType } =\n        typedData as unknown as SignTypedDataParameters;\n\n      const types = {\n        EIP712Domain: getTypesForEIP712Domain({ domain }),\n        ...typedData.types,\n      };\n\n      // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n      // as we can't statically check this with TypeScript.\n      validateTypedData({ domain, message, primaryType, types });\n\n      const stringifiedData = serializeTypedData({\n        domain: domain ?? {},\n        message,\n        primaryType,\n        types,\n      });\n\n      const res = await provider.request({\n        method: \"eth_signTypedData_v4\",\n        params: [account.address, stringifiedData],\n      });\n      if (!isHex(res)) {\n        throw new Error(\"Invalid signed payload returned\");\n      }\n      return res;\n    },\n    onTransactionRequested: async () => {\n      // make sure to show the coinbase popup BEFORE doing any transaction preprocessing\n      // otherwise the popup might get blocked in safari\n      await showCoinbasePopup(provider);\n    },\n  };\n\n  return account;\n}\n\nfunction onConnect(\n  address: string,\n  chain: Chain,\n  provider: ProviderInterface,\n  emitter: WalletEmitter<typeof COINBASE>,\n  client: ThirdwebClient,\n): [Account, Chain, DisconnectFn, SwitchChainFn] {\n  const account = createAccount({ provider, address, client });\n\n  async function disconnect() {\n    provider.removeListener(\"accountsChanged\", onAccountsChanged);\n    provider.removeListener(\"chainChanged\", onChainChanged);\n    provider.removeListener(\"disconnect\", onDisconnect);\n    await provider.disconnect();\n  }\n\n  async function onDisconnect() {\n    disconnect();\n    emitter.emit(\"disconnect\", undefined);\n  }\n\n  function onAccountsChanged(accounts: string[]) {\n    if (accounts[0]) {\n      const newAccount = createAccount({\n        provider,\n        address: getAddress(accounts[0]),\n        client,\n      });\n      emitter.emit(\"accountChanged\", newAccount);\n      emitter.emit(\"accountsChanged\", accounts);\n    } else {\n      onDisconnect();\n    }\n  }\n\n  function onChainChanged(newChainId: string) {\n    const newChain = getCachedChain(normalizeChainId(newChainId));\n    emitter.emit(\"chainChanged\", newChain);\n  }\n\n  // subscribe to events\n  provider.on(\"accountsChanged\", onAccountsChanged);\n  provider.on(\"chainChanged\", onChainChanged);\n  provider.on(\"disconnect\", onDisconnect);\n\n  return [\n    account,\n    chain,\n    onDisconnect,\n    (newChain) => switchChainCoinbaseWalletSDK(provider, newChain),\n  ];\n}\n\n/**\n * @internal\n */\nexport async function connectCoinbaseWalletSDK(\n  options: WalletConnectionOption<typeof COINBASE>,\n  emitter: WalletEmitter<typeof COINBASE>,\n  provider: ProviderInterface,\n): Promise<ReturnType<typeof onConnect>> {\n  const accounts = (await provider.request({\n    method: \"eth_requestAccounts\",\n  })) as string[];\n\n  if (!accounts[0]) {\n    throw new Error(\"No accounts found\");\n  }\n\n  const address = getAddress(accounts[0]);\n\n  const connectedChainId = (await provider.request({\n    method: \"eth_chainId\",\n  })) as string | number;\n\n  const chainId = normalizeChainId(connectedChainId);\n  let chain =\n    options.chain && options.chain.id === chainId\n      ? options.chain\n      : getCachedChain(chainId);\n  // Switch to chain if provided\n  if (\n    connectedChainId &&\n    options?.chain &&\n    connectedChainId !== options?.chain.id\n  ) {\n    await switchChainCoinbaseWalletSDK(provider, options.chain);\n    chain = options.chain;\n  }\n\n  return onConnect(address, chain, provider, emitter, options.client);\n}\n\n/**\n * @internal\n */\nexport async function autoConnectCoinbaseWalletSDK(\n  options: WalletConnectionOption<typeof COINBASE>,\n  emitter: WalletEmitter<typeof COINBASE>,\n  provider: ProviderInterface,\n): Promise<ReturnType<typeof onConnect>> {\n  // connected accounts\n  const addresses = (await provider.request({\n    method: \"eth_accounts\",\n  })) as string[];\n\n  const address = addresses[0];\n\n  if (!address) {\n    throw new Error(\"No accounts found\");\n  }\n\n  const connectedChainId = (await provider.request({\n    method: \"eth_chainId\",\n  })) as string | number;\n  const chainId = normalizeChainId(connectedChainId);\n  const chain =\n    options.chain && options.chain.id === chainId\n      ? options.chain\n      : getCachedChain(chainId);\n\n  return onConnect(address, chain, provider, emitter, options.client);\n}\n\nasync function switchChainCoinbaseWalletSDK(\n  provider: ProviderInterface,\n  chain: Chain,\n) {\n  const chainIdHex = numberToHex(chain.id);\n\n  try {\n    await provider.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainIdHex }],\n    });\n  } catch (error) {\n    const apiChain = await getChainMetadata(chain);\n\n    // Indicates chain is not added to provider\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n    if ((error as any)?.code === 4902) {\n      // try to add the chain\n      await provider.request({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            chainId: chainIdHex,\n            chainName: apiChain.name,\n            nativeCurrency: apiChain.nativeCurrency,\n            rpcUrls: getValidPublicRPCUrl(apiChain), // no client id on purpose here\n            blockExplorerUrls: apiChain.explorers?.map((x) => x.url) || [],\n          },\n        ],\n      });\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
