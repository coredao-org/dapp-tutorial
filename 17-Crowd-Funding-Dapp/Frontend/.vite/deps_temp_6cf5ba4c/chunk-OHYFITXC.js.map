{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/extensions/erc1155/__generated__/IDrop1155/read/getActiveClaimConditionId.ts", "../../node_modules/thirdweb/src/extensions/erc1155/__generated__/IDrop1155/read/getClaimConditionById.ts", "../../node_modules/thirdweb/src/extensions/erc1155/drops/read/getActiveClaimCondition.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"getActiveClaimConditionId\" function.\n */\nexport type GetActiveClaimConditionIdParams = {\n  tokenId: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"_tokenId\" }>;\n};\n\nexport const FN_SELECTOR = \"0x5ab063e8\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"uint256\",\n    name: \"_tokenId\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `getActiveClaimConditionId` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getActiveClaimConditionId` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isGetActiveClaimConditionIdSupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isGetActiveClaimConditionIdSupported([\"0x...\"]);\n * ```\n */\nexport function isGetActiveClaimConditionIdSupported(\n  availableSelectors: string[],\n) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"getActiveClaimConditionId\" function.\n * @param options - The options for the getActiveClaimConditionId function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetActiveClaimConditionIdParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetActiveClaimConditionIdParams({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeGetActiveClaimConditionIdParams(\n  options: GetActiveClaimConditionIdParams,\n) {\n  return encodeAbiParameters(FN_INPUTS, [options.tokenId]);\n}\n\n/**\n * Encodes the \"getActiveClaimConditionId\" function into a Hex string with its parameters.\n * @param options - The options for the getActiveClaimConditionId function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetActiveClaimConditionId } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetActiveClaimConditionId({\n *  tokenId: ...,\n * });\n * ```\n */\nexport function encodeGetActiveClaimConditionId(\n  options: GetActiveClaimConditionIdParams,\n) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeGetActiveClaimConditionIdParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the getActiveClaimConditionId function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeGetActiveClaimConditionIdResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeGetActiveClaimConditionIdResultResult(\"...\");\n * ```\n */\nexport function decodeGetActiveClaimConditionIdResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"getActiveClaimConditionId\" function on the contract.\n * @param options - The options for the getActiveClaimConditionId function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getActiveClaimConditionId } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await getActiveClaimConditionId({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nexport async function getActiveClaimConditionId(\n  options: BaseTransactionOptions<GetActiveClaimConditionIdParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.tokenId],\n  });\n}\n", "import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"getClaimConditionById\" function.\n */\nexport type GetClaimConditionByIdParams = {\n  tokenId: AbiParameterToPrimitiveType<{ type: \"uint256\"; name: \"_tokenId\" }>;\n  conditionId: AbiParameterToPrimitiveType<{\n    type: \"uint256\";\n    name: \"_conditionId\";\n  }>;\n};\n\nexport const FN_SELECTOR = \"0xd45b28d7\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"uint256\",\n    name: \"_tokenId\",\n  },\n  {\n    type: \"uint256\",\n    name: \"_conditionId\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"tuple\",\n    name: \"condition\",\n    components: [\n      {\n        type: \"uint256\",\n        name: \"startTimestamp\",\n      },\n      {\n        type: \"uint256\",\n        name: \"maxClaimableSupply\",\n      },\n      {\n        type: \"uint256\",\n        name: \"supplyClaimed\",\n      },\n      {\n        type: \"uint256\",\n        name: \"quantityLimitPerWallet\",\n      },\n      {\n        type: \"bytes32\",\n        name: \"merkleRoot\",\n      },\n      {\n        type: \"uint256\",\n        name: \"pricePerToken\",\n      },\n      {\n        type: \"address\",\n        name: \"currency\",\n      },\n      {\n        type: \"string\",\n        name: \"metadata\",\n      },\n    ],\n  },\n] as const;\n\n/**\n * Checks if the `getClaimConditionById` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getClaimConditionById` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isGetClaimConditionByIdSupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isGetClaimConditionByIdSupported([\"0x...\"]);\n * ```\n */\nexport function isGetClaimConditionByIdSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"getClaimConditionById\" function.\n * @param options - The options for the getClaimConditionById function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetClaimConditionByIdParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetClaimConditionByIdParams({\n *  tokenId: ...,\n *  conditionId: ...,\n * });\n * ```\n */\nexport function encodeGetClaimConditionByIdParams(\n  options: GetClaimConditionByIdParams,\n) {\n  return encodeAbiParameters(FN_INPUTS, [options.tokenId, options.conditionId]);\n}\n\n/**\n * Encodes the \"getClaimConditionById\" function into a Hex string with its parameters.\n * @param options - The options for the getClaimConditionById function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetClaimConditionById } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetClaimConditionById({\n *  tokenId: ...,\n *  conditionId: ...,\n * });\n * ```\n */\nexport function encodeGetClaimConditionById(\n  options: GetClaimConditionByIdParams,\n) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeGetClaimConditionByIdParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the getClaimConditionById function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeGetClaimConditionByIdResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeGetClaimConditionByIdResultResult(\"...\");\n * ```\n */\nexport function decodeGetClaimConditionByIdResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"getClaimConditionById\" function on the contract.\n * @param options - The options for the getClaimConditionById function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getClaimConditionById } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await getClaimConditionById({\n *  contract,\n *  tokenId: ...,\n *  conditionId: ...,\n * });\n *\n * ```\n */\nexport async function getClaimConditionById(\n  options: BaseTransactionOptions<GetClaimConditionByIdParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.tokenId, options.conditionId],\n  });\n}\n", "import type { BaseTransactionOptions } from \"../../../../transaction/types.js\";\nimport type { ClaimCondition } from \"../../../../utils/extensions/drops/types.js\";\nimport {\n  type GetActiveClaimConditionIdParams,\n  getActiveClaimConditionId,\n  isGetActiveClaimConditionIdSupported,\n} from \"../../__generated__/IDrop1155/read/getActiveClaimConditionId.js\";\nimport {\n  getClaimConditionById,\n  isGetClaimConditionByIdSupported,\n} from \"../../__generated__/IDrop1155/read/getClaimConditionById.js\";\n\nexport type GetActiveClaimConditionParams = GetActiveClaimConditionIdParams;\n/**\n * Retrieves the active claim condition.\n * @param options - The transaction options.\n * @returns A promise that resolves to the active claim condition.\n * @throws An error if the claim condition is unsupported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getActiveClaimCondition } from \"thirdweb/extensions/erc1155\";\n * const activeClaimCondition = await getActiveClaimCondition({ contract, tokenId });\n * ```\n */\nexport async function getActiveClaimCondition(\n  options: BaseTransactionOptions<GetActiveClaimConditionParams>,\n): Promise<ClaimCondition> {\n  try {\n    const conditionId = await getActiveClaimConditionId(options);\n    return getClaimConditionById({ ...options, conditionId });\n  } catch {\n    throw new Error(\"Claim condition not found\");\n  }\n}\n\n/**\n * Checks if the `getActiveClaimCondition` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getActiveClaimCondition` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isGetActiveClaimConditionSupported } from \"thirdweb/extensions/erc1155\";\n *\n * const supported = isGetActiveClaimConditionSupported([\"0x...\"]);\n * ```\n */\nexport function isGetActiveClaimConditionSupported(\n  availableSelectors: string[],\n) {\n  // if multi phase is supported, return true\n  return (\n    isGetActiveClaimConditionIdSupported(availableSelectors) &&\n    isGetClaimConditionByIdSupported(availableSelectors)\n  );\n}\n"],
  "mappings": ";;;;;;;;AAeO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AAeJ,SAAU,qCACd,oBAA4B;AAE5B,SAAO,aAAa;IAClB;IACA,QAAQ,CAAC,aAAa,WAAW,UAAU;GAC5C;AACH;AA4EA,eAAsB,0BACpB,SAAgE;AAEhE,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,OAAO;GACzB;AACH;;;AC/GO,IAAMA,eAAc;AAC3B,IAAMC,aAAY;EAChB;IACE,MAAM;IACN,MAAM;;EAER;IACE,MAAM;IACN,MAAM;;;AAGV,IAAMC,cAAa;EACjB;IACE,MAAM;IACN,MAAM;IACN,YAAY;MACV;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;MAER;QACE,MAAM;QACN,MAAM;;;;;AAiBR,SAAU,iCAAiC,oBAA4B;AAC3E,SAAO,aAAa;IAClB;IACA,QAAQ,CAACF,cAAaC,YAAWC,WAAU;GAC5C;AACH;AA+EA,eAAsB,sBACpB,SAA4D;AAE5D,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAACC,cAAaC,YAAWC,WAAU;IAC3C,QAAQ,CAAC,QAAQ,SAAS,QAAQ,WAAW;GAC9C;AACH;;;ACrJA,eAAsB,wBACpB,SAA8D;AAE9D,MAAI;AACF,UAAM,cAAc,MAAM,0BAA0B,OAAO;AAC3D,WAAO,sBAAsB,EAAE,GAAG,SAAS,YAAW,CAAE;EAC1D,QAAQ;AACN,UAAM,IAAI,MAAM,2BAA2B;EAC7C;AACF;AAcM,SAAU,mCACd,oBAA4B;AAG5B,SACE,qCAAqC,kBAAkB,KACvD,iCAAiC,kBAAkB;AAEvD;",
  "names": ["FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS", "FN_SELECTOR", "FN_INPUTS", "FN_OUTPUTS"]
}
