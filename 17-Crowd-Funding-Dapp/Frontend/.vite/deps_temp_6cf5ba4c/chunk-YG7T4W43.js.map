{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/wallets/wallet-connect/receiver/session-store.ts", "../../node_modules/thirdweb/src/wallets/wallet-connect/receiver/index.ts"],
  "sourcesContent": ["import { stringify } from \"../../../utils/json.js\";\nimport { ClientScopedStorage } from \"../../in-app/core/authentication/client-scoped-storage.js\";\nimport type { WalletConnectSession } from \"./types.js\";\n\n/**\n * @internal\n */\nexport let walletConnectSessions: ClientScopedStorage | undefined;\n\n/**\n * @internal\n */\nexport async function getSessions(): Promise<WalletConnectSession[]> {\n  if (!walletConnectSessions) {\n    return [];\n  }\n  const stringifiedSessions =\n    await walletConnectSessions.getWalletConnectSessions();\n  return JSON.parse(stringifiedSessions ?? \"[]\");\n}\n\n/**\n * @internal\n */\nexport function initializeSessionStore(options: {\n  clientId: string;\n}) {\n  if (!walletConnectSessions) {\n    walletConnectSessions = new ClientScopedStorage({\n      storage: null, // TODO: inject storage\n      clientId: options.clientId,\n    });\n  }\n}\n\n/**\n * @internal\n */\nexport async function saveSession(\n  session: WalletConnectSession,\n): Promise<void> {\n  if (!walletConnectSessions) {\n    return;\n  }\n  const stringifiedSessions =\n    await walletConnectSessions.getWalletConnectSessions();\n  const sessions = JSON.parse(stringifiedSessions ?? \"[]\");\n  sessions.push(session);\n  await walletConnectSessions.saveWalletConnectSessions(stringify(sessions));\n}\n\n/**\n * @internal\n */\nexport async function removeSession(\n  session: WalletConnectSession,\n): Promise<void> {\n  if (!walletConnectSessions) {\n    return;\n  }\n  const stringifiedSessions =\n    await walletConnectSessions.getWalletConnectSessions();\n  const sessions = JSON.parse(stringifiedSessions ?? \"[]\");\n  const newSessions = sessions.filter(\n    (s: WalletConnectSession) => s.topic !== session.topic,\n  );\n  await walletConnectSessions.saveWalletConnectSessions(stringify(newSessions));\n}\n\n/**\n * @internal FOR TESTING ONLY\n */\nexport function setWalletConnectSessions(\n  storage: ClientScopedStorage | undefined,\n): void {\n  walletConnectSessions = storage;\n}\n", "import { SignClient } from \"@walletconnect/sign-client\";\nimport type { Chain } from \"../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../client/client.js\";\nimport type { Prettify } from \"../../../utils/type-utils.js\";\nimport type { Wallet } from \"../../interfaces/wallet.js\";\nimport { getDefaultAppMetadata } from \"../../utils/defaultDappMetadata.js\";\nimport { DEFAULT_PROJECT_ID } from \"../constants.js\";\nimport { handleSendRawTransactionRequest } from \"./request-handlers/send-raw-transaction.js\";\nimport { handleSendTransactionRequest } from \"./request-handlers/send-transaction.js\";\nimport { handleSignTransactionRequest } from \"./request-handlers/sign-transaction.js\";\nimport { handleSignTypedDataRequest } from \"./request-handlers/sign-typed-data.js\";\nimport { handleSignRequest } from \"./request-handlers/sign.js\";\nimport { handleSwitchChain } from \"./request-handlers/switch-chain.js\";\nimport {\n  getSessions,\n  initializeSessionStore,\n  removeSession,\n} from \"./session-store.js\";\nimport type {\n  WalletConnectAddEthereumChainRequestParams,\n  WalletConnectClient,\n  WalletConnectConfig,\n  WalletConnectRequestHandlers,\n  WalletConnectSession,\n  WalletConnectSessionEvent,\n  WalletConnectSessionProposalEvent,\n  WalletConnectSessionRequestEvent,\n} from \"./types.js\";\n\ntype CreateWalletConnectClientOptions = Prettify<\n  WalletConnectConfig & {\n    /**\n     * Your application's thirdweb client.\n     */\n    client: ThirdwebClient;\n\n    /**\n     * The wallet to connect to the WalletConnect URI.\n     */\n    wallet: Wallet;\n\n    /**\n     * Any chains to enable for the wallet. Apps can request access to specific chains, but this list will always be available for use with the wallet.\n     */\n    chains?: Chain[];\n\n    /**\n     * Custom RPC handlers to override the defaults. Useful when creating a custom approval UI.\n     */\n    requestHandlers?: WalletConnectRequestHandlers;\n\n    /**\n     * Callback triggered whenever a session is successfully created.\n     */\n    onConnect?: (session: WalletConnectSession) => void;\n\n    /**\n     * Callback triggered whenever a session is disconnected.\n     */\n    onDisconnect?: (session: WalletConnectSession) => void;\n\n    /**\n     * Callback for handling errors.\n     */\n    onError?: (error: Error) => void;\n  }\n>;\n\ntype CreateWalletConnectSessionOptions = {\n  /**\n   * The WalletConnect client returned from `createWalletConnectClient`\n   */\n  walletConnectClient: WalletConnectClient;\n\n  /**\n   * The WalletConnect session URI retrieved from the application to connect with.\n   */\n  uri: string;\n};\n\nlet walletConnectClientCache = new WeakMap<\n  ThirdwebClient,\n  WalletConnectClient\n>();\n\n/*\n * @internal\n */\nexport const clearWalletConnectClientCache = () => {\n  walletConnectClientCache = new WeakMap<ThirdwebClient, WalletConnectClient>();\n};\n\n/**\n * Default request handlers for WalletConnect requests.\n */\nexport const DefaultWalletConnectRequestHandlers = {\n  personal_sign: handleSignRequest,\n  eth_sign: handleSignRequest,\n  eth_signTypedData: handleSignTypedDataRequest,\n  eth_signTypedData_v4: handleSignTypedDataRequest,\n  eth_signTransaction: handleSignTransactionRequest,\n  eth_sendTransaction: handleSendTransactionRequest,\n  eth_sendRawTransaction: handleSendRawTransactionRequest,\n  wallet_addEthereumChain: (_: {\n    wallet: Wallet;\n    params: WalletConnectAddEthereumChainRequestParams;\n  }) => {\n    throw new Error(\"Unsupported request method: wallet_addEthereumChain\");\n  },\n  wallet_switchEthereumChain: handleSwitchChain,\n};\n\n/**\n * Creates a new WalletConnect client for interacting with another application.\n * @param options - The options to use to create the WalletConnect client.\n *\n * @returns The WalletConnect client. Use this client to connect to a WalletConnect URI with {@link createWalletConnectSession}.\n * @example\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n * });\n * ```\n * Pass custom handlers:\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n *   requestHandlers: {\n *     eth_signTransaction: ({ account, chainId, params }) => {\n *       // handle transaction signing\n *     },\n *   },\n * });\n * ```\n * Pass connect and disconnect callbacks:\n * ```ts\n * import { createWalletConnectClient } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n *   onConnect: (session) => {\n *     console.log(\"Connected to WalletConnect\", session);\n *   },\n *   onDisconnect: (session) => {\n *     console.log(\"Disconnected from WalletConnect\", session);\n *   },\n * });\n * ```\n * @wallet\n */\nexport async function createWalletConnectClient(\n  options: CreateWalletConnectClientOptions,\n): Promise<WalletConnectClient> {\n  const {\n    wallet,\n    requestHandlers,\n    chains,\n    onConnect,\n    onDisconnect,\n    client: thirdwebClient,\n  } = options;\n\n  if (walletConnectClientCache.has(thirdwebClient)) {\n    return walletConnectClientCache.get(thirdwebClient) as WalletConnectClient;\n  }\n\n  initializeSessionStore({ clientId: options.client.clientId });\n\n  const defaults = getDefaultAppMetadata();\n  const walletConnectClient = await SignClient.init({\n    projectId: options.projectId ?? DEFAULT_PROJECT_ID,\n    metadata: {\n      name: options.appMetadata?.name ?? defaults.name,\n      url: options.appMetadata?.url ?? defaults.url,\n      description: options.appMetadata?.description ?? defaults.description,\n      icons: [options.appMetadata?.logoUrl ?? defaults.logoUrl],\n    },\n  });\n\n  walletConnectClient.on(\n    \"session_proposal\",\n    async (event: WalletConnectSessionProposalEvent) => {\n      const { onSessionProposal } = await import(\"./session-proposal.js\");\n      await onSessionProposal({\n        wallet,\n        walletConnectClient,\n        event,\n        chains,\n        onConnect,\n      }).catch((error) => {\n        if (options.onError) {\n          options.onError(error as Error);\n        } else {\n          throw error;\n        }\n      });\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_request\",\n    async (event: WalletConnectSessionRequestEvent) => {\n      const { fulfillRequest } = await import(\"./session-request.js\");\n      await fulfillRequest({\n        wallet,\n        walletConnectClient,\n        event,\n        handlers: requestHandlers,\n        thirdwebClient,\n      }).catch((error) => {\n        if (options.onError) {\n          options.onError(error as Error);\n        } else {\n          throw error;\n        }\n      });\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_event\",\n    async (_event: WalletConnectSessionEvent) => {\n      // TODO (accountsChanged, chainChanged)\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_ping\",\n    (_event: { id: number; topic: string }) => {\n      // TODO\n    },\n  );\n\n  walletConnectClient.on(\n    \"session_delete\",\n    async (event: { id: number; topic: string }) => {\n      await disconnectWalletConnectSession({\n        session: { topic: event.topic },\n        walletConnectClient,\n      }).catch((error) => {\n        if (options.onError) {\n          options.onError(error as Error);\n        } else {\n          throw error;\n        }\n      });\n    },\n  );\n\n  // Disconnects can come from the user or the connected app, so we inject the callback to ensure its always triggered\n  const _disconnect = walletConnectClient.disconnect;\n  walletConnectClient.disconnect = async (args) => {\n    const result = await _disconnect(args).catch(() => {\n      // no-op if already disconnected\n    });\n\n    if (onDisconnect) {\n      disconnectHook({ topic: args.topic, onDisconnect });\n    }\n    return result;\n  };\n\n  walletConnectClientCache.set(options.client, walletConnectClient);\n\n  return walletConnectClient;\n}\n\n/**\n * Initiates a new WalletConnect session for interacting with another application.\n * @param options - The options to use to create the WalletConnect session.\n * @example\n * ```ts\n * import { createWalletConnectClient, createWalletConnectSession } from \"thirdweb/wallets\";\n *\n * const client = await createWalletConnectClient({\n *   wallet: wallet,\n *   client: client,\n * });\n *\n * const session = createWalletConnectSession({\n *   walletConnectClient: client,\n *   uri: \"wc:...\",\n * });\n * ```\n * @wallet\n */\nexport function createWalletConnectSession(\n  options: CreateWalletConnectSessionOptions,\n) {\n  const { uri, walletConnectClient } = options;\n\n  walletConnectClient.core.pairing.pair({ uri });\n}\n\n/**\n * Retrieves all active WalletConnect sessions.\n * @returns All active WalletConnect sessions.\n * @example\n * ```ts\n * import { getActiveWalletConnectSessions } from \"thirdweb/wallets\";\n *\n * const sessions = await getActiveWalletConnectSessions();\n * ```\n * @wallet\n */\nexport async function getActiveWalletConnectSessions(): Promise<\n  WalletConnectSession[]\n> {\n  return getSessions();\n}\n\n/**\n * Disconnects a WalletConnect session.\n * @param options - The options to use to disconnect the WalletConnect session.\n * @example\n * ```ts\n * import { disconnectWalletConnectSession } from \"thirdweb/wallets\";\n *\n * await disconnectWalletConnectSession({\n *   session: mySession,\n *   walletConnectClient: wcClient,\n * });\n * ```\n * @wallet\n */\nexport async function disconnectWalletConnectSession(options: {\n  session: WalletConnectSession;\n  walletConnectClient: WalletConnectClient;\n}): Promise<void> {\n  removeSession(options.session);\n\n  try {\n    await options.walletConnectClient.disconnect({\n      topic: options.session.topic,\n      reason: {\n        code: 6000,\n        message: \"Disconnected\",\n      },\n    });\n  } catch {\n    // ignore, the session doesn't exist already\n  }\n}\n\n/**\n * @internal\n */\nasync function disconnectHook(options: {\n  topic: string;\n  onDisconnect: (session: WalletConnectSession) => void;\n}) {\n  const { topic, onDisconnect } = options;\n  const sessions = await getSessions();\n\n  onDisconnect(\n    sessions.find((s) => s.topic === topic) ?? {\n      topic,\n    },\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
