{
  "version": 3,
  "sources": ["../../node_modules/mipd/src/utils.ts", "../../node_modules/mipd/src/store.ts", "../../node_modules/thirdweb/src/wallets/injected/mipdStore.ts"],
  "sourcesContent": ["import type { EIP1193Provider } from './register.js'\nimport type {\n  EIP6963AnnounceProviderEvent,\n  EIP6963ProviderDetail,\n} from './types.js'\n\n////////////////////////////////////////////////////////////////////////////\n// Announce Provider\n\nexport type AnnounceProviderParameters = EIP6963ProviderDetail<\n  EIP1193Provider,\n  string\n>\nexport type AnnounceProviderReturnType = () => void\n\n/**\n * Announces an EIP-1193 Provider.\n */\nexport function announceProvider(\n  detail: AnnounceProviderParameters,\n): AnnounceProviderReturnType {\n  const event: CustomEvent<EIP6963ProviderDetail> = new CustomEvent(\n    'eip6963:announceProvider',\n    { detail: Object.freeze(detail) },\n  )\n\n  window.dispatchEvent(event)\n\n  const handler = () => window.dispatchEvent(event)\n  window.addEventListener('eip6963:requestProvider', handler)\n  return () => window.removeEventListener('eip6963:requestProvider', handler)\n}\n\n////////////////////////////////////////////////////////////////////////////\n// Request Providers\n\nexport type RequestProvidersParameters = (\n  providerDetail: EIP6963ProviderDetail,\n) => void\nexport type RequestProvidersReturnType = (() => void) | undefined\n\n/**\n * Watches for EIP-1193 Providers to be announced.\n */\nexport function requestProviders(\n  listener: RequestProvidersParameters,\n): RequestProvidersReturnType {\n  if (typeof window === 'undefined') return\n  const handler = (event: EIP6963AnnounceProviderEvent) =>\n    listener(event.detail)\n\n  window.addEventListener('eip6963:announceProvider', handler)\n\n  window.dispatchEvent(new CustomEvent('eip6963:requestProvider'))\n\n  return () => window.removeEventListener('eip6963:announceProvider', handler)\n}\n", "import type { Rdns } from './register.js'\nimport type { EIP6963ProviderDetail } from './types.js'\nimport { requestProviders } from './utils.js'\n\nexport type Listener = (\n  providerDetails: readonly EIP6963ProviderDetail[],\n  meta?:\n    | {\n        added?: readonly EIP6963ProviderDetail[] | undefined\n        removed?: readonly EIP6963ProviderDetail[] | undefined\n      }\n    | undefined,\n) => void\n\nexport type Store = {\n  /**\n   * Clears the store, including all provider details.\n   */\n  clear(): void\n  /**\n   * Destroys the store, including all provider details and listeners.\n   */\n  destroy(): void\n  /**\n   * Finds a provider detail by its RDNS (Reverse Domain Name Identifier).\n   */\n  findProvider(args: { rdns: Rdns }): EIP6963ProviderDetail | undefined\n  /**\n   * Returns all provider details that have been emitted.\n   */\n  getProviders(): readonly EIP6963ProviderDetail[]\n  /**\n   * Resets the store, and emits an event to request provider details.\n   */\n  reset(): void\n  /**\n   * Subscribes to emitted provider details.\n   */\n  subscribe(\n    listener: Listener,\n    args?: { emitImmediately?: boolean | undefined } | undefined,\n  ): () => void\n\n  /**\n   * @internal\n   * Current state of listening listeners.\n   */\n  _listeners(): Set<Listener>\n}\n\nexport function createStore(): Store {\n  const listeners: Set<Listener> = new Set()\n  let providerDetails: readonly EIP6963ProviderDetail[] = []\n\n  const request = () =>\n    requestProviders((providerDetail) => {\n      if (\n        providerDetails.some(\n          ({ info }) => info.uuid === providerDetail.info.uuid,\n        )\n      )\n        return\n\n      providerDetails = [...providerDetails, providerDetail]\n      listeners.forEach((listener) =>\n        listener(providerDetails, { added: [providerDetail] }),\n      )\n    })\n  let unwatch = request()\n\n  return {\n    _listeners() {\n      return listeners\n    },\n    clear() {\n      listeners.forEach((listener) =>\n        listener([], { removed: [...providerDetails] }),\n      )\n      providerDetails = []\n    },\n    destroy() {\n      this.clear()\n      listeners.clear()\n      unwatch?.()\n    },\n    findProvider({ rdns }) {\n      return providerDetails.find(\n        (providerDetail) => providerDetail.info.rdns === rdns,\n      )\n    },\n    getProviders() {\n      return providerDetails\n    },\n    reset() {\n      this.clear()\n      unwatch?.()\n      unwatch = request()\n    },\n    subscribe(listener, { emitImmediately } = {}) {\n      listeners.add(listener)\n      if (emitImmediately) listener(providerDetails, { added: providerDetails })\n      return () => listeners.delete(listener)\n    },\n  }\n}\n", "import { type EIP6963ProviderDetail, type Store, createStore } from \"mipd\";\nimport { isBrowser } from \"../../utils/platform.js\";\nimport { METAMASK } from \"../constants.js\";\nimport type { Ethereum } from \"../interfaces/ethereum.js\";\nimport type { WalletId } from \"../wallet-types.js\";\n\ndeclare module \"mipd\" {\n  export interface Register {\n    rdns: WalletId;\n  }\n}\n\n// if we're in the browser -> create the store once immediately\nconst mipdStore: Store | undefined = /* @__PURE__ */ (() =>\n  isBrowser() ? createStore() : undefined)();\n\n/**\n * Get Injected Provider for given wallet by passing a wallet ID (rdns) using [EIP-6963](https://eips.ethereum.org/EIPS/eip-6963) Provider Discovery.\n * @param walletId - The Wallet Id (rdns) to check.\n * @example\n * ```ts\n * import { injectedProvider } from \"thirdweb/wallets\";\n *\n * const metamaskProvider = injectedProvider(\"io.metamask\");\n *\n * if (metamaskProvider) {\n *  console.log(\"Metamask is installed\");\n * }\n * ```\n * @returns The details of the Injected Provider if it exists. `undefined` otherwise.\n * @walletUtils\n */\nexport function injectedProvider(walletId: WalletId): Ethereum | undefined {\n  const injectedProviderDetail = getInstalledWalletProviders().find(\n    (p) => p.info.rdns === walletId,\n  );\n\n  return injectedProviderDetail?.provider as Ethereum | undefined;\n}\n\n/**\n * Get Injected Provider Details for given wallet ID (rdns)\n * @internal\n */\nfunction getMIPDStore() {\n  if (!mipdStore) {\n    return undefined;\n  }\n  return mipdStore;\n}\n\nexport function getInstalledWalletProviders(): readonly EIP6963ProviderDetail[] {\n  const providers = getMIPDStore()?.getProviders() || [];\n\n  for (const provider of providers) {\n    // Map io.metamask.mobile to io.metamask rdns to fix double entry issue in MetaMask mobile browser\n    if ((provider.info.rdns as string) === \"io.metamask.mobile\") {\n      provider.info.rdns = METAMASK;\n      break;\n    }\n  }\n\n  return providers;\n}\n"],
  "mappings": ";;;;;;;;AA4CM,SAAU,iBACd,UAAoC;AAEpC,MAAI,OAAO,WAAW;AAAa;AACnC,QAAM,UAAU,CAAC,UACf,SAAS,MAAM,MAAM;AAEvB,SAAO,iBAAiB,4BAA4B,OAAO;AAE3D,SAAO,cAAc,IAAI,YAAY,yBAAyB,CAAC;AAE/D,SAAO,MAAM,OAAO,oBAAoB,4BAA4B,OAAO;AAC7E;;;ACNM,SAAU,cAAW;AACzB,QAAM,YAA2B,oBAAI,IAAG;AACxC,MAAI,kBAAoD,CAAA;AAExD,QAAM,UAAU,MACd,iBAAiB,CAAC,mBAAkB;AAClC,QACE,gBAAgB,KACd,CAAC,EAAE,KAAI,MAAO,KAAK,SAAS,eAAe,KAAK,IAAI;AAGtD;AAEF,sBAAkB,CAAC,GAAG,iBAAiB,cAAc;AACrD,cAAU,QAAQ,CAAC,aACjB,SAAS,iBAAiB,EAAE,OAAO,CAAC,cAAc,EAAC,CAAE,CAAC;EAE1D,CAAC;AACH,MAAI,UAAU,QAAO;AAErB,SAAO;IACL,aAAU;AACR,aAAO;IACT;IACA,QAAK;AACH,gBAAU,QAAQ,CAAC,aACjB,SAAS,CAAA,GAAI,EAAE,SAAS,CAAC,GAAG,eAAe,EAAC,CAAE,CAAC;AAEjD,wBAAkB,CAAA;IACpB;IACA,UAAO;AACL,WAAK,MAAK;AACV,gBAAU,MAAK;AACf;IACF;IACA,aAAa,EAAE,KAAI,GAAE;AACnB,aAAO,gBAAgB,KACrB,CAAC,mBAAmB,eAAe,KAAK,SAAS,IAAI;IAEzD;IACA,eAAY;AACV,aAAO;IACT;IACA,QAAK;AACH,WAAK,MAAK;AACV;AACA,gBAAU,QAAO;IACnB;IACA,UAAU,UAAU,EAAE,gBAAe,IAAK,CAAA,GAAE;AAC1C,gBAAU,IAAI,QAAQ;AACtB,UAAI;AAAiB,iBAAS,iBAAiB,EAAE,OAAO,gBAAe,CAAE;AACzE,aAAO,MAAM,UAAU,OAAO,QAAQ;IACxC;;AAEJ;;;AC3FA,IAAM,aAAgD,MACpD,UAAS,IAAK,YAAW,IAAK,QAAU;AAkBpC,SAAU,iBAAiB,UAAkB;AACjD,QAAM,yBAAyB,4BAA2B,EAAG,KAC3D,CAAC,MAAM,EAAE,KAAK,SAAS,QAAQ;AAGjC,SAAO,iEAAwB;AACjC;AAMA,SAAS,eAAY;AACnB,MAAI,CAAC,WAAW;AACd,WAAO;EACT;AACA,SAAO;AACT;AAEM,SAAU,8BAA2B;AAnD3C;AAoDE,QAAM,cAAY,kBAAY,MAAZ,mBAAgB,mBAAkB,CAAA;AAEpD,aAAW,YAAY,WAAW;AAEhC,QAAK,SAAS,KAAK,SAAoB,sBAAsB;AAC3D,eAAS,KAAK,OAAO;AACrB;IACF;EACF;AAEA,SAAO;AACT;",
  "names": []
}
