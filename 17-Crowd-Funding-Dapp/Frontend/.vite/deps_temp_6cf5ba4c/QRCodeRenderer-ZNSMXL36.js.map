{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/react/web/ui/components/QRCode/QRCodeRenderer.tsx", "../../node_modules/uqr/dist/index.mjs"],
  "sourcesContent": ["\"use client\";\nimport type React from \"react\";\nimport { type ReactElement, useMemo } from \"react\";\nimport { encode } from \"uqr\";\n\ntype QRCodeRendererProps = {\n  ecl?: \"L\" | \"M\" | \"Q\" | \"H\";\n  size?: number;\n  uri: string;\n  clearSize?: number;\n  image?: React.ReactNode;\n  imageBackground?: string;\n};\n\n/**\n * @internal\n */\nfunction QRCodeRenderer({\n  ecl = \"M\",\n  size: sizeProp = 200,\n  uri,\n  clearSize = 0,\n  image,\n  imageBackground = \"transparent\",\n}: QRCodeRendererProps) {\n  const logoSize = clearSize;\n  const size = sizeProp - 10 * 2;\n\n  const dots = useMemo(() => {\n    const dotsArray: ReactElement[] = [];\n    const matrix = encode(uri, { ecc: ecl, border: 0 }).data;\n    const cellSize = size / matrix.length;\n    const qrList = [\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ];\n\n    for (const { x, y } of qrList) {\n      const x1 = (matrix.length - 7) * cellSize * x;\n      const y1 = (matrix.length - 7) * cellSize * y;\n      for (let i = 0; i < 3; i++) {\n        dotsArray.push(\n          <rect\n            key={`${i}-${x}-${y}`}\n            fill={\n              i % 2 !== 0\n                ? \"var(--ck-qr-background, var(--ck-body-background))\"\n                : \"var(--ck-qr-dot-color)\"\n            }\n            rx={(i - 2) * -5 + (i === 0 ? 2 : 3)}\n            ry={(i - 2) * -5 + (i === 0 ? 2 : 3)}\n            width={cellSize * (7 - i * 2)}\n            height={cellSize * (7 - i * 2)}\n            x={x1 + cellSize * i}\n            y={y1 + cellSize * i}\n          />,\n        );\n      }\n    }\n\n    if (image) {\n      const x1 = (matrix.length - 7) * cellSize * 1;\n      const y1 = (matrix.length - 7) * cellSize * 1;\n      dotsArray.push(\n        <>\n          <rect\n            fill={imageBackground}\n            rx={(0 - 2) * -5 + 2}\n            ry={(0 - 2) * -5 + 2}\n            width={cellSize * (7 - 0 * 2)}\n            height={cellSize * (7 - 0 * 2)}\n            x={x1 + cellSize * 0}\n            y={y1 + cellSize * 0}\n          />\n          <foreignObject\n            width={cellSize * (7 - 0 * 2)}\n            height={cellSize * (7 - 0 * 2)}\n            x={x1 + cellSize * 0}\n            y={y1 + cellSize * 0}\n          >\n            <div style={{ borderRadius: (0 - 2) * -5 + 2, overflow: \"hidden\" }}>\n              {image}\n            </div>\n          </foreignObject>\n        </>,\n      );\n    }\n\n    const clearArenaSize = Math.floor((logoSize + 25) / cellSize);\n    const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\n    const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\n\n    matrix.forEach((row, i: number) => {\n      row.forEach((_: boolean, j: number) => {\n        if (matrix[i]?.[j]) {\n          // Do not render dots under position squares\n          if (\n            !(\n              (i < 7 && j < 7) ||\n              (i > matrix.length - 8 && j < 7) ||\n              (i < 7 && j > matrix.length - 8)\n            )\n          ) {\n            //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;\n            if (\n              image ||\n              !(\n                i > matrixMiddleStart &&\n                i < matrixMiddleEnd &&\n                j > matrixMiddleStart &&\n                j < matrixMiddleEnd\n              )\n            ) {\n              dotsArray.push(\n                <circle\n                  key={`circle-${i}-${\n                    // biome-ignore lint/suspicious/noArrayIndexKey: its the only thing available for the key here\n                    j\n                  }`}\n                  cx={i * cellSize + cellSize / 2}\n                  cy={j * cellSize + cellSize / 2}\n                  fill=\"var(--ck-qr-dot-color)\"\n                  r={cellSize / 3}\n                />,\n              );\n            }\n          }\n        }\n      });\n    });\n\n    return dotsArray;\n  }, [ecl, image, imageBackground, logoSize, size, uri]);\n\n  return (\n    <svg\n      height={size}\n      width={size}\n      viewBox={`0 0 ${size} ${size}`}\n      style={{\n        width: size,\n        height: size,\n      }}\n      role=\"presentation\"\n    >\n      <rect fill=\"transparent\" height={size} width={size} />\n      {dots}\n    </svg>\n  );\n}\n\nexport default QRCodeRenderer;\n", "var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION)\n      throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7)\n      throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({ length: this.size }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++)\n      rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++)\n      this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++)\n      this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++)\n      this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++)\n      this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7)\n      return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++)\n      rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)\n          this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(\n          x + dx,\n          y + dy,\n          Math.max(Math.abs(dx), Math.abs(dy)) !== 1,\n          QrCodeDataType.Alignment\n        );\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl))\n      throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks)\n        dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)\n          result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8))\n      throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6)\n        right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7)\n      throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert)\n          this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5)\n            result += PENALTY_N1;\n          else if (runX > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5)\n            result += PENALTY_N1;\n          else if (runY > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1])\n          result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules)\n      dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0)\n      currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0)\n    throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--)\n    bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0)\n      throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data)\n    appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits))\n    throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length; ) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text))\n    throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length)\n    appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\")\n    return [];\n  else if (isNumeric(text))\n    return [makeNumeric(text)];\n  else if (isAlphanumeric(text))\n    return [makeAlphanumeric(text)];\n  else\n    return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits)\n      return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION)\n    throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7)\n      result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255)\n    throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++)\n    result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length)\n        result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map((_) => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0)\n    throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n    throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion; ; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion)\n      throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n      ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData())\n      bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n    appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\n\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment)\n    throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(\n    segment,\n    EccMap[ecc],\n    minVersion,\n    maxVersion,\n    maskPattern,\n    boostEcc\n  );\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert)\n    result.data = result.data.map((row) => row.map((mod) => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border)\n    return input;\n  const { size } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({ length: newSize }, (_) => false));\n    input.data.push(Array.from({ length: newSize }, (_) => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({ length: newSize }, (_) => b));\n    input.types.push(Array.from({ length: newSize }, (_) => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length)\n    return defaults;\n  return data[y][x];\n}\n\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map((row) => {\n    return row.map((mod) => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE)\n        line += platte.WHITE_ALL;\n      else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)\n        line += platte.WHITE_BLACK;\n      else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)\n        line += platte.BLACK_WHITE;\n      else\n        line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col])\n        pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\n\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };\n"],
  "mappings": "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",
  "names": ["_jsx", "_jsxs", "_Fragment"]
}
