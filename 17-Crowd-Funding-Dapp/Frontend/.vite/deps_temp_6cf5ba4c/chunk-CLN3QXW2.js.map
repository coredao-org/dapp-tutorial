{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/analytics/track/connect.ts", "../../node_modules/thirdweb/src/utils/tiny-emitter.ts", "../../node_modules/thirdweb/src/wallets/wallet-emitter.ts"],
  "sourcesContent": ["import type { ThirdwebClient } from \"../../client/client.js\";\nimport type { Ecosystem } from \"../../wallets/in-app/core/wallet/types.js\";\nimport { track } from \"./index.js\";\n\n/**\n * @internal\n */\nexport async function trackConnect(args: {\n  client: ThirdwebClient;\n  ecosystem?: Ecosystem;\n  walletType: string;\n  walletAddress: string;\n  chainId?: number;\n}) {\n  const { client, ecosystem, walletType, walletAddress, chainId } = args;\n  return track({\n    client,\n    ecosystem,\n    data: {\n      source: \"connectWallet\",\n      action: \"connect\",\n      walletType,\n      walletAddress,\n      chainId,\n    },\n  });\n}\n", "type GenericEmitterType = {\n  [key: string]: unknown;\n};\n\nexport type Emitter<T extends GenericEmitterType> = {\n  subscribe<K extends keyof T>(event: K, cb: (data: T[K]) => void): () => void;\n  emit<K extends keyof T>(event: K, data: T[K]): void;\n};\n\n/**\n * Creates an emitter object that allows subscribing to events and emitting events.\n * @returns An emitter object with `subscribe` and `emit` methods.\n * @template TEmitter - The type of the emitter.\n * @example\n * ```ts\n * const emitter = createEmitter<{\n *  event1: string;\n * event2: number;\n * }>();\n *\n * emitter.subscribe(\"event1\", (data) => {\n * console.log(data); // \"hello\"\n * });\n *\n * emitter.emit(\"event1\", \"hello\");\n * ```\n */\nexport function createEmitter<\n  const TEmitter extends GenericEmitterType,\n>(): Emitter<TEmitter> {\n  const subsribers = new Map<\n    keyof TEmitter,\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n    Set<(data: any) => void>\n  >();\n\n  return {\n    subscribe(event, cb) {\n      if (!subsribers.has(event)) {\n        subsribers.set(event, new Set([cb]));\n      } else {\n        subsribers.get(event)?.add(cb);\n      }\n\n      return () => {\n        const subscribers = subsribers.get(event);\n        if (subscribers) {\n          subscribers.delete(cb);\n        }\n      };\n    },\n    emit(event, data) {\n      const subscribers = subsribers.get(event);\n      if (subscribers) {\n        for (const cb of subscribers) {\n          cb(data);\n        }\n      }\n    },\n  };\n}\n", "import type { Chain } from \"../chains/types.js\";\nimport { type Emitter, createEmitter } from \"../utils/tiny-emitter.js\";\nimport type { Account } from \"./interfaces/wallet.js\";\nimport type { WalletAutoConnectionOption, WalletId } from \"./wallet-types.js\";\n\nexport type WalletEmitterEvents<TWalletId extends WalletId> = {\n  accountChanged: Account;\n  accountsChanged: string[];\n  disconnect?: never;\n  chainChanged: Chain;\n  onConnect: WalletAutoConnectionOption<TWalletId>;\n};\n\nexport type WalletEmitter<TWalletId extends WalletId> = Emitter<\n  WalletEmitterEvents<TWalletId>\n>;\n\n/**\n\n * @internal\n */\nexport function createWalletEmitter<const TWalletId extends WalletId>() {\n  return createEmitter<WalletEmitterEvents<TWalletId>>();\n}\n"],
  "mappings": ";;;;;AAOA,eAAsB,aAAa,MAMlC;AACC,QAAM,EAAE,QAAQ,WAAW,YAAY,eAAe,QAAO,IAAK;AAClE,SAAO,MAAM;IACX;IACA;IACA,MAAM;MACJ,QAAQ;MACR,QAAQ;MACR;MACA;MACA;;GAEH;AACH;;;ACCM,SAAU,gBAAa;AAG3B,QAAM,aAAa,oBAAI,IAAG;AAM1B,SAAO;IACL,UAAU,OAAO,IAAE;AA5BvB;AA6BM,UAAI,CAAC,WAAW,IAAI,KAAK,GAAG;AAC1B,mBAAW,IAAI,OAAO,oBAAI,IAAI,CAAC,EAAE,CAAC,CAAC;MACrC,OAAO;AACL,yBAAW,IAAI,KAAK,MAApB,mBAAuB,IAAI;MAC7B;AAEA,aAAO,MAAK;AACV,cAAM,cAAc,WAAW,IAAI,KAAK;AACxC,YAAI,aAAa;AACf,sBAAY,OAAO,EAAE;QACvB;MACF;IACF;IACA,KAAK,OAAO,MAAI;AACd,YAAM,cAAc,WAAW,IAAI,KAAK;AACxC,UAAI,aAAa;AACf,mBAAW,MAAM,aAAa;AAC5B,aAAG,IAAI;QACT;MACF;IACF;;AAEJ;;;ACvCM,SAAU,sBAAmB;AACjC,SAAO,cAAa;AACtB;",
  "names": []
}
