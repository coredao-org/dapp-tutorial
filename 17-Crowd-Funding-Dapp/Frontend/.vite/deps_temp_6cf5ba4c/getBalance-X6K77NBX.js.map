{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/extensions/erc20/__generated__/IERC20/read/balanceOf.ts", "../../node_modules/thirdweb/src/extensions/erc20/read/getBalance.ts"],
  "sourcesContent": ["import type { AbiParameterToPrimitiveType } from \"abitype\";\nimport { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\nimport { encodeAbiParameters } from \"../../../../../utils/abi/encodeAbiParameters.js\";\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\n/**\n * Represents the parameters for the \"balanceOf\" function.\n */\nexport type BalanceOfParams = {\n  address: AbiParameterToPrimitiveType<{ type: \"address\"; name: \"_address\" }>;\n};\n\nexport const FN_SELECTOR = \"0x70a08231\" as const;\nconst FN_INPUTS = [\n  {\n    type: \"address\",\n    name: \"_address\",\n  },\n] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint256\",\n  },\n] as const;\n\n/**\n * Checks if the `balanceOf` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `balanceOf` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isBalanceOfSupported } from \"thirdweb/extensions/erc20\";\n * const supported = isBalanceOfSupported([\"0x...\"]);\n * ```\n */\nexport function isBalanceOfSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Encodes the parameters for the \"balanceOf\" function.\n * @param options - The options for the balanceOf function.\n * @returns The encoded ABI parameters.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeBalanceOfParams } from \"thirdweb/extensions/erc20\";\n * const result = encodeBalanceOfParams({\n *  address: ...,\n * });\n * ```\n */\nexport function encodeBalanceOfParams(options: BalanceOfParams) {\n  return encodeAbiParameters(FN_INPUTS, [options.address]);\n}\n\n/**\n * Encodes the \"balanceOf\" function into a Hex string with its parameters.\n * @param options - The options for the balanceOf function.\n * @returns The encoded hexadecimal string.\n * @extension ERC20\n * @example\n * ```ts\n * import { encodeBalanceOf } from \"thirdweb/extensions/erc20\";\n * const result = encodeBalanceOf({\n *  address: ...,\n * });\n * ```\n */\nexport function encodeBalanceOf(options: BalanceOfParams) {\n  // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n  // we can do this because we know the specific formats of the values\n  return (FN_SELECTOR +\n    encodeBalanceOfParams(options).slice(\n      2,\n    )) as `${typeof FN_SELECTOR}${string}`;\n}\n\n/**\n * Decodes the result of the balanceOf function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC20\n * @example\n * ```ts\n * import { decodeBalanceOfResult } from \"thirdweb/extensions/erc20\";\n * const result = decodeBalanceOfResultResult(\"...\");\n * ```\n */\nexport function decodeBalanceOfResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"balanceOf\" function on the contract.\n * @param options - The options for the balanceOf function.\n * @returns The parsed result of the function call.\n * @extension ERC20\n * @example\n * ```ts\n * import { balanceOf } from \"thirdweb/extensions/erc20\";\n *\n * const result = await balanceOf({\n *  contract,\n *  address: ...,\n * });\n *\n * ```\n */\nexport async function balanceOf(\n  options: BaseTransactionOptions<BalanceOfParams>,\n) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [options.address],\n  });\n}\n", "import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { toTokens } from \"../../../utils/units.js\";\nimport { balanceOf } from \"../__generated__/IERC20/read/balanceOf.js\";\nimport { getCurrencyMetadata } from \"./getCurrencyMetadata.js\";\n/**\n * Represents the parameters for retrieving the balance of an address.\n * @extension ERC20\n */\nexport type GetBalanceParams = {\n  /**\n   * The address for which to retrieve the balance.\n   */\n  address: string;\n};\n\n/**\n * Represents the result of a balance query for an ERC20 token.\n * @extension ERC20\n */\nexport type GetBalanceResult = {\n  value: bigint;\n  decimals: number;\n  displayValue: string;\n  symbol: string;\n  name: string;\n};\n\n/**\n * Retrieves the balance of an ERC20 token for a specific address.\n * @param options - The transaction options including the address.\n * @returns An object containing the balance value, display value, and symbol.\n * @extension ERC20\n * @example\n * ```ts\n * import { getBalance } from \"thirdweb/extensions/erc20\";\n *\n * const balance = await getBalance({ contract, address: \"0x...\" });\n * ```\n */\nexport async function getBalance(\n  options: BaseTransactionOptions<GetBalanceParams>,\n): Promise<GetBalanceResult> {\n  const [balanceWei, currencyMetadata] = await Promise.all([\n    balanceOf(options),\n    getCurrencyMetadata(options),\n  ]);\n  return {\n    ...currencyMetadata,\n    value: balanceWei,\n    displayValue: toTokens(balanceWei, currencyMetadata.decimals),\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO,IAAM,cAAc;AAC3B,IAAM,YAAY;EAChB;IACE,MAAM;IACN,MAAM;;;AAGV,IAAM,aAAa;EACjB;IACE,MAAM;;;AA4FV,eAAsB,UACpB,SAAgD;AAEhD,SAAO,aAAa;IAClB,UAAU,QAAQ;IAClB,QAAQ,CAAC,aAAa,WAAW,UAAU;IAC3C,QAAQ,CAAC,QAAQ,OAAO;GACzB;AACH;;;ACrFA,eAAsB,WACpB,SAAiD;AAEjD,QAAM,CAAC,YAAY,gBAAgB,IAAI,MAAM,QAAQ,IAAI;IACvD,UAAU,OAAO;IACjB,oBAAoB,OAAO;GAC5B;AACD,SAAO;IACL,GAAG;IACH,OAAO;IACP,cAAc,SAAS,YAAY,iBAAiB,QAAQ;;AAEhE;",
  "names": []
}
