{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/hashing/hashMessage.ts"],
  "sourcesContent": ["import { type ByteArray, type SignableMessage, concat } from \"viem\";\nimport type { Hex } from \"../encoding/hex.js\";\nimport { stringToBytes, toBytes } from \"../encoding/to-bytes.js\";\nimport { keccak256 } from \"./keccak256.js\";\n\nconst presignMessagePrefix = \"\\x19Ethereum Signed Message:\\n\";\ntype To = \"hex\" | \"bytes\";\n\ntype HashMessage<TTo extends To> =\n  | (TTo extends \"bytes\" ? ByteArray : never)\n  | (TTo extends \"hex\" ? Hex : never);\n\n/**\n * Ethereum Signed Message hashing\n * @param message - The message to hash, either as a string, a Uint8Array, or an object with a `raw` property containing a Uint8Array.\n * @param to_ - The desired output format of the hash (optional). Defaults to 'hex'.\n * @example\n * ```ts\n * import { hashMessage } from \"thirdweb/utils\";\n * const hash = hashMessage(\"hello world\");\n * ```\n * @returns The Ethereum Signed Message hash of the message in the specified format.\n * @utils\n */\nexport function hashMessage<TTo extends To = \"hex\">(\n  message: SignableMessage,\n  to_?: TTo,\n): HashMessage<TTo> {\n  const messageBytes = (() => {\n    if (typeof message === \"string\") {\n      return stringToBytes(message);\n    }\n    if (message.raw instanceof Uint8Array) {\n      return message.raw;\n    }\n    return toBytes(message.raw);\n  })();\n  const prefixBytes = stringToBytes(\n    `${presignMessagePrefix}${messageBytes.length}`,\n  );\n  return keccak256(concat([prefixBytes, messageBytes]), to_);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,uBAAuB;AAmBvB,SAAU,YACd,SACA,KAAS;AAET,QAAM,gBAAgB,MAAK;AACzB,QAAI,OAAO,YAAY,UAAU;AAC/B,aAAO,cAAc,OAAO;IAC9B;AACA,QAAI,QAAQ,eAAe,YAAY;AACrC,aAAO,QAAQ;IACjB;AACA,WAAO,QAAQ,QAAQ,GAAG;EAC5B,GAAE;AACF,QAAM,cAAc,cAClB,GAAG,oBAAoB,GAAG,aAAa,MAAM,EAAE;AAEjD,SAAO,UAAU,OAAO,CAAC,aAAa,YAAY,CAAC,GAAG,GAAG;AAC3D;",
  "names": []
}
