{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/rpc/actions/eth_getTransactionCount.ts"],
  "sourcesContent": ["import type {\n  EIP1193RequestFn,\n  EIP1474Methods,\n  GetTransactionCountParameters,\n} from \"viem\";\nimport { hexToNumber, numberToHex } from \"../../utils/encoding/hex.js\";\n\n/**\n * Retrieves the transaction count (nonce) for a given Ethereum address.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for retrieving the transaction count.\n * @returns A promise that resolves to the transaction count as a number.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getTransactionCount } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionCount = await eth_getTransactionCount(rpcRequest, {\n *  address: \"0x...\",\n * });\n * ```\n */\nexport async function eth_getTransactionCount(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetTransactionCountParameters,\n): Promise<number> {\n  const count = await request({\n    method: \"eth_getTransactionCount\",\n    params: [\n      params.address,\n      // makes sense to default to `pending` here, since we're asking for a transaction count (nonce)\n      params.blockNumber\n        ? numberToHex(params.blockNumber)\n        : params.blockTag || \"pending\",\n    ],\n  });\n  return hexToNumber(count);\n}\n"],
  "mappings": ";;;;;;AAsBA,eAAsB,wBACpB,SACA,QAAqC;AAErC,QAAM,QAAQ,MAAM,QAAQ;IAC1B,QAAQ;IACR,QAAQ;MACN,OAAO;;MAEP,OAAO,cACH,YAAY,OAAO,WAAW,IAC9B,OAAO,YAAY;;GAE1B;AACD,SAAO,YAAY,KAAK;AAC1B;",
  "names": []
}
