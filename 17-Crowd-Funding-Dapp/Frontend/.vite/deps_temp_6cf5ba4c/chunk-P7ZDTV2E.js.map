{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/utils/detect-platform.ts"],
  "sourcesContent": ["export type OperatingSystem =\n  | \"iOS\"\n  | \"Android OS\"\n  | \"BlackBerry OS\"\n  | \"Windows Mobile\"\n  | \"Amazon OS\"\n  | \"Windows 3.11\"\n  | \"Windows 95\"\n  | \"Windows 98\"\n  | \"Windows 2000\"\n  | \"Windows XP\"\n  | \"Windows Server 2003\"\n  | \"Windows Vista\"\n  | \"Windows 7\"\n  | \"Windows 8\"\n  | \"Windows 8.1\"\n  | \"Windows 10\"\n  | \"Windows ME\"\n  | \"Windows CE\"\n  | \"Open BSD\"\n  | \"Sun OS\"\n  | \"Linux\"\n  | \"Mac OS\"\n  | \"QNX\"\n  | \"BeOS\"\n  | \"OS/2\"\n  | \"Chrome OS\";\n\ntype OperatingSystemRule = [OperatingSystem, RegExp];\n\nconst operatingSystemRules: OperatingSystemRule[] = [\n  [\"iOS\", /iP(hone|od|ad)/],\n  [\"Android OS\", /Android/],\n  [\"BlackBerry OS\", /BlackBerry|BB10/],\n  [\"Windows Mobile\", /IEMobile/],\n  [\"Amazon OS\", /Kindle/],\n  [\"Windows 3.11\", /Win16/],\n  [\"Windows 95\", /(Windows 95)|(Win95)|(Windows_95)/],\n  [\"Windows 98\", /(Windows 98)|(Win98)/],\n  [\"Windows 2000\", /(Windows NT 5.0)|(Windows 2000)/],\n  [\"Windows XP\", /(Windows NT 5.1)|(Windows XP)/],\n  [\"Windows Server 2003\", /(Windows NT 5.2)/],\n  [\"Windows Vista\", /(Windows NT 6.0)/],\n  [\"Windows 7\", /(Windows NT 6.1)/],\n  [\"Windows 8\", /(Windows NT 6.2)/],\n  [\"Windows 8.1\", /(Windows NT 6.3)/],\n  [\"Windows 10\", /(Windows NT 10.0)/],\n  [\"Windows ME\", /Windows ME/],\n  [\"Windows CE\", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n  [\"Open BSD\", /OpenBSD/],\n  [\"Sun OS\", /SunOS/],\n  [\"Chrome OS\", /CrOS/],\n  [\"Linux\", /(Linux)|(X11)/],\n  [\"Mac OS\", /(Mac_PowerPC)|(Macintosh)/],\n  [\"QNX\", /QNX/],\n  [\"BeOS\", /BeOS/],\n  [\"OS/2\", /OS\\/2/],\n];\n\nexport function detectPlatform() {\n  if (\n    typeof document === \"undefined\" &&\n    typeof navigator !== \"undefined\" &&\n    navigator.product === \"ReactNative\"\n  ) {\n    // react-native\n    return \"mobile\" as const;\n  }\n  if (typeof navigator !== \"undefined\") {\n    return \"browser\" as const;\n  }\n  return \"node\" as const;\n}\n\nexport function detectOS(ua: string): OperatingSystem | null {\n  for (let ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n    const [os, regex] = operatingSystemRules[ii] as OperatingSystemRule;\n    const match = regex.exec(ua);\n    if (match) {\n      return os;\n    }\n  }\n\n  return null;\n}\n"],
  "mappings": ";AA8BA,IAAM,uBAA8C;EAClD,CAAC,OAAO,gBAAgB;EACxB,CAAC,cAAc,SAAS;EACxB,CAAC,iBAAiB,iBAAiB;EACnC,CAAC,kBAAkB,UAAU;EAC7B,CAAC,aAAa,QAAQ;EACtB,CAAC,gBAAgB,OAAO;EACxB,CAAC,cAAc,mCAAmC;EAClD,CAAC,cAAc,sBAAsB;EACrC,CAAC,gBAAgB,iCAAiC;EAClD,CAAC,cAAc,+BAA+B;EAC9C,CAAC,uBAAuB,kBAAkB;EAC1C,CAAC,iBAAiB,kBAAkB;EACpC,CAAC,aAAa,kBAAkB;EAChC,CAAC,aAAa,kBAAkB;EAChC,CAAC,eAAe,kBAAkB;EAClC,CAAC,cAAc,mBAAmB;EAClC,CAAC,cAAc,YAAY;EAC3B,CAAC,cAAc,qDAAqD;EACpE,CAAC,YAAY,SAAS;EACtB,CAAC,UAAU,OAAO;EAClB,CAAC,aAAa,MAAM;EACpB,CAAC,SAAS,eAAe;EACzB,CAAC,UAAU,2BAA2B;EACtC,CAAC,OAAO,KAAK;EACb,CAAC,QAAQ,MAAM;EACf,CAAC,QAAQ,OAAO;;AAGZ,SAAU,iBAAc;AAC5B,MACE,OAAO,aAAa,eACpB,OAAO,cAAc,eACrB,UAAU,YAAY,eACtB;AAEA,WAAO;EACT;AACA,MAAI,OAAO,cAAc,aAAa;AACpC,WAAO;EACT;AACA,SAAO;AACT;AAEM,SAAU,SAAS,IAAU;AACjC,WAAS,KAAK,GAAG,QAAQ,qBAAqB,QAAQ,KAAK,OAAO,MAAM;AACtE,UAAM,CAAC,IAAI,KAAK,IAAI,qBAAqB,EAAE;AAC3C,UAAM,QAAQ,MAAM,KAAK,EAAE;AAC3B,QAAI,OAAO;AACT,aAAO;IACT;EACF;AAEA,SAAO;AACT;",
  "names": []
}
