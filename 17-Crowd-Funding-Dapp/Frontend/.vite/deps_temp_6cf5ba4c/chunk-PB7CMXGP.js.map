{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/contract/actions/get-bytecode.ts"],
  "sourcesContent": ["import type { Abi } from \"abitype\";\nimport { eth_getCode } from \"../../rpc/actions/eth_getCode.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport type { Hex } from \"../../utils/encoding/hex.js\";\nimport type { ThirdwebContract } from \"../contract.js\";\n\nconst BYTECODE_CACHE = new WeakMap<ThirdwebContract<Abi>, Promise<Hex>>();\n\n/**\n * Retrieves the bytecode of a contract.\n * @param contract - The ThirdwebContract instance.\n * @returns A Promise that resolves to the bytecode of the contract.\n * @example\n * ```ts\n * import { getBytecode } from \"thirdweb/contract\";\n * const bytecode = await getBytecode(contract);\n * ```\n * @contract\n */\nexport function getBytecode<abi extends Abi>(\n  contract: ThirdwebContract<abi>,\n): Promise<Hex> {\n  if (BYTECODE_CACHE.has(contract)) {\n    return BYTECODE_CACHE.get(contract) as Promise<Hex>;\n  }\n\n  const prom = (async () => {\n    const rpcRequest = getRpcClient(contract);\n    const result = await eth_getCode(rpcRequest, {\n      address: contract.address,\n      blockTag: \"latest\",\n    });\n    if (result === \"0x\") {\n      BYTECODE_CACHE.delete(contract);\n    }\n    return result;\n  })();\n  BYTECODE_CACHE.set(contract, prom);\n  return prom;\n}\n"],
  "mappings": ";;;;;;;;AAMA,IAAM,iBAAiB,oBAAI,QAAO;AAa5B,SAAU,YACd,UAA+B;AAE/B,MAAI,eAAe,IAAI,QAAQ,GAAG;AAChC,WAAO,eAAe,IAAI,QAAQ;EACpC;AAEA,QAAM,QAAQ,YAAW;AACvB,UAAM,aAAa,aAAa,QAAQ;AACxC,UAAM,SAAS,MAAM,YAAY,YAAY;MAC3C,SAAS,SAAS;MAClB,UAAU;KACX;AACD,QAAI,WAAW,MAAM;AACnB,qBAAe,OAAO,QAAQ;IAChC;AACA,WAAO;EACT,GAAE;AACF,iBAAe,IAAI,UAAU,IAAI;AACjC,SAAO;AACT;",
  "names": []
}
