{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/storage/download.ts"],
  "sourcesContent": ["import { getClientFetch } from \"../utils/fetch.js\";\nimport { type ResolveSchemeOptions, resolveScheme } from \"../utils/ipfs.js\";\nimport type { Prettify } from \"../utils/type-utils.js\";\n\nexport type DownloadOptions = Prettify<\n  ResolveSchemeOptions & {\n    requestTimeoutMs?: number;\n  }\n>;\n\n/**\n * @description Downloads a file from the specified IPFS, Arweave, or HTTP URI.\n *\n * `download` will parse the provided URI based on its scheme (ipfs://, ar://, https://) and convert it to a URL to fetch the file from thirdweb's storage service.\n *\n * @param options - The download options.\n * @param options.client - The Thirdweb client. See [createThirdwebClient](https://portal.thirdweb.com/references/typescript/v5/createThirdwebClient).\n * @param options.uri - The URI of the file to download. Can be IPFS, Arweave, or HTTP.\n * @param [options.requestTimeoutMs] - The maximum time in milliseconds to wait for the request to complete. Defaults to 60 seconds (60,000 milliseconds).\n *\n * @returns Asynchronously returns the network response from fetching the file.\n * @throws An error if the URI scheme is invalid or if the request fails.\n *\n * @example\n * Download a file from IPFS:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ipfs://Qm...\",\n * });\n * ```\n *\n * Download a file from Arweave:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"ar://{arweave-transaction-id}\",\n * });\n * ```\n *\n * Download a file from HTTP:\n * ```ts\n * import { download } from \"thirdweb/storage\";\n * import { createThirdwebClient } from \"@thirdweb-dev/sdk\";\n *\n * const client = createThirdwebClient({ clientId: \"YOUR_CLIENT_ID\" });\n *\n * const file = await download({\n *  client,\n *  uri: \"https://example.com/file.txt\",\n * });\n * ```\n *\n * @storage\n */\nexport async function download(options: DownloadOptions) {\n  let url: string;\n  if (options.uri.startsWith(\"ar://\")) {\n    const { resolveArweaveScheme } = await import(\"../utils/arweave.js\");\n    url = resolveArweaveScheme(options);\n  } else {\n    url = resolveScheme(options);\n  }\n\n  const res = await getClientFetch(options.client)(url, {\n    keepalive: options.client.config?.storage?.fetch?.keepalive,\n    headers: options.client.config?.storage?.fetch?.headers,\n    requestTimeoutMs:\n      options.requestTimeoutMs ??\n      options.client.config?.storage?.fetch?.requestTimeoutMs ??\n      60000,\n  });\n\n  if (!res.ok) {\n    res.body?.cancel();\n    throw new Error(`Failed to download file: ${res.statusText}`);\n  }\n  return res;\n}\n"],
  "mappings": ";;;;;;;;AAiEA,eAAsB,SAAS,SAAwB;AAjEvD;AAkEE,MAAI;AACJ,MAAI,QAAQ,IAAI,WAAW,OAAO,GAAG;AACnC,UAAM,EAAE,qBAAoB,IAAK,MAAM,OAAO,uBAAqB;AACnE,UAAM,qBAAqB,OAAO;EACpC,OAAO;AACL,UAAM,cAAc,OAAO;EAC7B;AAEA,QAAM,MAAM,MAAM,eAAe,QAAQ,MAAM,EAAE,KAAK;IACpD,YAAW,yBAAQ,OAAO,WAAf,mBAAuB,YAAvB,mBAAgC,UAAhC,mBAAuC;IAClD,UAAS,yBAAQ,OAAO,WAAf,mBAAuB,YAAvB,mBAAgC,UAAhC,mBAAuC;IAChD,kBACE,QAAQ,sBACR,yBAAQ,OAAO,WAAf,mBAAuB,YAAvB,mBAAgC,UAAhC,mBAAuC,qBACvC;GACH;AAED,MAAI,CAAC,IAAI,IAAI;AACX,cAAI,SAAJ,mBAAU;AACV,UAAM,IAAI,MAAM,4BAA4B,IAAI,UAAU,EAAE;EAC9D;AACA,SAAO;AACT;",
  "names": []
}
