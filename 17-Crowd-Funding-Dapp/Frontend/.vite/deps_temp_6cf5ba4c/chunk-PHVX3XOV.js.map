{
  "version": 3,
  "sources": ["../../node_modules/thirdweb/src/chains/chain-definitions/base-sepolia.ts", "../../node_modules/thirdweb/src/chains/chain-definitions/base.ts", "../../node_modules/thirdweb/src/chains/chain-definitions/optimism-sepolia.ts", "../../node_modules/thirdweb/src/chains/chain-definitions/optimism.ts", "../../node_modules/thirdweb/src/chains/chain-definitions/zora-sepolia.ts", "../../node_modules/thirdweb/src/chains/chain-definitions/zora.ts", "../../node_modules/thirdweb/src/chains/constants.ts", "../../node_modules/thirdweb/src/transaction/actions/estimate-gas-cost.ts", "../../node_modules/thirdweb/src/pay/utils/definitions.ts", "../../node_modules/thirdweb/src/pay/buyWithCrypto/getQuote.ts", "../../node_modules/thirdweb/src/pay/buyWithCrypto/getStatus.ts", "../../node_modules/thirdweb/src/pay/buyWithCrypto/getTransfer.ts"],
  "sourcesContent": ["import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const baseSepolia = /* @__PURE__ */ defineChain({\n  id: 84532,\n  name: \"Base Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://sepolia.basescan.org\",\n      apiUrl: \"https://api-sepolia.basescan.org/api\",\n    },\n  ],\n  testnet: true,\n});\n", "import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const base = /* @__PURE__ */ defineChain({\n  id: 8453,\n  name: \"Base\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://basescan.org\",\n      apiUrl: \"https://api.basescan.org/api\",\n    },\n  ],\n});\n", "import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const optimismSepolia = /* @__PURE__ */ defineChain({\n  id: 11155420,\n  name: \"OP Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Blockscout\",\n      url: \"https://optimism-sepolia.blockscout.com\",\n      apiUrl: \"https://optimism-sepolia.blockscout.com/api\",\n    },\n  ],\n  testnet: true,\n});\n", "import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const optimism = /* @__PURE__ */ defineChain({\n  id: 10,\n  name: \"OP Mainnet\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Optimism Explorer\",\n      url: \"https://optimistic.etherscan.io\",\n      apiUrl: \"https://api-optimistic.etherscan.io\",\n    },\n  ],\n});\n", "import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const zoraSepolia = /*@__PURE__*/ defineChain({\n  id: 999999999,\n  name: \"Zora Sepolia\",\n\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Zora Sepolia\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Zora Sepolia Explorer\",\n      url: \"https://sepolia.explorer.zora.energy/\",\n      apiUrl: \"https://sepolia.explorer.zora.energy/api\",\n    },\n  ],\n  testnet: true,\n});\n", "import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const zora = /*@__PURE__*/ defineChain({\n  id: 7777777,\n  name: \"Zora\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Ether\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Explorer\",\n      url: \"https://explorer.zora.energy\",\n      apiUrl: \"https://explorer.zora.energy/api\",\n    },\n  ],\n});\n", "import { baseSepolia } from \"./chain-definitions/base-sepolia.js\";\nimport { base } from \"./chain-definitions/base.js\";\nimport { optimismSepolia } from \"./chain-definitions/optimism-sepolia.js\";\nimport { optimism } from \"./chain-definitions/optimism.js\";\nimport { zoraSepolia } from \"./chain-definitions/zora-sepolia.js\";\nimport { zora } from \"./chain-definitions/zora.js\";\nimport type { Chain } from \"./types.js\";\n\nconst opChains = [\n  base.id,\n  baseSepolia.id,\n  optimism.id,\n  optimismSepolia.id,\n  zora.id,\n  zoraSepolia.id,\n  34443, // mode\n  919, // mode testnet\n  42220, // celo\n  44787, // celo testnet\n  204, // opBNB\n  5611, // opBNB testnet\n];\n\n/**\n * TODO this should be in the chain definition itself\n * @internal\n */\nexport function isOpStackChain(chain: Chain) {\n  return opChains.includes(chain.id);\n}\n", "import { isOpStackChain } from \"../../chains/constants.js\";\nimport { getDefaultGasOverrides } from \"../../gas/fee-data.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { toEther } from \"../../utils/units.js\";\nimport { type EstimateGasOptions, estimateGas } from \"./estimate-gas.js\";\n\nexport type EstimateGasCostResult = {\n  /**\n   * The estimated gas cost in ether.\n   */\n  ether: string;\n  /**\n   * The estimated gas cost in wei.\n   */\n  wei: bigint;\n};\n\n/**\n * Estimate the gas cost of a transaction in ether and wei.\n * @example\n * ```ts\n * import { estimateGasCost } from \"thirdweb\";\n *\n * const gasCost = await estimateGasCost({ transaction });\n * ```\n * @transaction\n */\nexport async function estimateGasCost(\n  options: EstimateGasOptions,\n): Promise<EstimateGasCostResult> {\n  const { transaction } = options;\n  const from = options.from ?? options.account?.address ?? undefined;\n  const gasLimit =\n    (await resolvePromisedValue(transaction.gas)) ||\n    (await estimateGas({ transaction, from }));\n  const fees = await getDefaultGasOverrides(\n    transaction.client,\n    transaction.chain,\n  );\n  const gasPrice = fees.maxFeePerGas || fees.gasPrice;\n  if (!gasPrice) {\n    throw new Error(\n      `Unable to determine gas price for chain ${transaction.chain.id}`,\n    );\n  }\n  let l1Fee: bigint;\n  if (isOpStackChain(transaction.chain)) {\n    const { estimateL1Fee } = await import(\"../../gas/estimate-l1-fee.js\");\n    l1Fee = await estimateL1Fee({\n      transaction,\n    });\n  } else {\n    l1Fee = 0n;\n  }\n  const wei = gasLimit * gasPrice + l1Fee;\n  return {\n    ether: toEther(wei),\n    wei,\n  };\n}\n", "import { getThirdwebDomains } from \"../../utils/domains.js\";\n\nconst getPayBaseUrl = () => {\n  const payDomain: string = getThirdwebDomains().pay;\n  return payDomain.startsWith(\"localhost\")\n    ? `http://${payDomain}`\n    : `https://${payDomain}`;\n};\n\n/**\n * Endpoint to get the status of a \"Buy with Crypto\" quote.\n * @internal\n */\nexport const getPayBuyWithCryptoStatusUrl = () =>\n  `${getPayBaseUrl()}/buy-with-crypto/status/v1`;\n/**\n * Endpoint to get \"Buy with Crypto\" quote.\n * @internal\n */\nexport const getPayBuyWithCryptoQuoteEndpoint = () =>\n  `${getPayBaseUrl()}/buy-with-crypto/quote/v1`;\n\n/**\n * Endpoint to get \"Buy with Crypto\" transfer.\n * @internal\n */\nexport const getPayBuyWithCryptoTransferEndpoint = () =>\n  `${getPayBaseUrl()}/buy-with-crypto/transfer/v1`;\n\n/**\n * Endpoint to get a \"Buy with Fiat\" quote.\n * @internal\n */\nexport const getPayBuyWithFiatQuoteEndpoint = () =>\n  `${getPayBaseUrl()}/buy-with-fiat/quote/v1`;\n\n/**\n * Endpoint to get the status of a \"Buy with Fiat\" transaction status.\n * @internal\n */\nexport const getPayBuyWithFiatStatusEndpoint = () =>\n  `${getPayBaseUrl()}/buy-with-fiat/status/v1`;\n\n/**\n * Endpoint to get history of \"Buy with Fiat\" transactions for given wallet address.\n * @internal\n */\nexport const getPayBuyWithFiatHistoryEndpoint = () =>\n  `${getPayBaseUrl()}/buy-with-fiat/history/v1`;\n\n/**\n * Endpoint to get a \"Buy with Crypto\" transaction history for a given wallet address.\n * @internal\n */\nexport const getPayBuyWithCryptoHistoryEndpoint = () =>\n  `${getPayBaseUrl()}/buy-with-crypto/history/v1`;\n\n/**\n * Endpoint to get a list of supported destination chains and tokens for thirdweb pay.\n * @internal\n */\nexport const getPaySupportedDestinations = () =>\n  `${getPayBaseUrl()}/destination-tokens/v1`;\n\n/**\n * Endpoint to get a list of supported source chains + tokens for thirdweb pay.\n * @internal\n */\nexport const getPaySupportedSources = () =>\n  `${getPayBaseUrl()}/buy-with-crypto/source-tokens/v1`;\n\n/**\n * Endpoint to get buy history for a given wallet address.\n * This includes both \"Buy with Crypto\" and \"Buy with Fiat\" transactions.\n * @internal\n */\nexport const getPayBuyHistoryEndpoint = () =>\n  `${getPayBaseUrl()}/wallet/history/v1`;\n", "import type { Hash } from \"viem\";\nimport { getCachedChain } from \"../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { approve } from \"../../extensions/erc20/write/approve.js\";\nimport type { PrepareTransactionOptions } from \"../../transaction/prepare-transaction.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport { getPayBuyWithCryptoQuoteEndpoint } from \"../utils/definitions.js\";\nimport type {\n  QuoteApprovalInfo,\n  QuotePaymentToken,\n  QuoteTokenInfo,\n  QuoteTransactionRequest,\n} from \"./commonTypes.js\";\n\n/**\n * The parameters for [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) function\n * It includes information about which tokens to swap, the amount of tokens to swap, slippage, etc.\n * @buyCrypto\n */\nexport type GetBuyWithCryptoQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   */\n  client: ThirdwebClient;\n\n  /**\n   * This is only relevant if the buy-with-crypto transaction is part of buy-with-fiat flow.\n   *\n   * When a swap is required after an onramp transaction, the intentId is used to link the buy-with-crypto transaction to the onramp transaction.\n   * Refer to [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) for more information.`\n   *\n   */\n  intentId?: string;\n\n  /**\n   * The address of wallet that pays for the tokens.\n   */\n  fromAddress: string;\n\n  /**\n   * The address of the wallet where the tokens are sent\n   */\n  toAddress: string;\n\n  // source token\n\n  /**\n   * The chain id of the source token.\n   */\n  fromChainId: number;\n\n  /**\n   * The token address of the source token.\n   */\n  fromTokenAddress: string;\n\n  // to\n\n  /**\n   * The chain id of the destination token.\n   */\n  toChainId: number;\n\n  /**\n   * The token address of the destination token.\n   */\n  toTokenAddress: string;\n\n  /**\n   * Extra details to store with the purchase.\n   *\n   * This details will be stored with the purchase and can be retrieved later via the status API or Webhook\n   */\n  purchaseData?: object;\n\n  /**\n   * The maximum slippage in basis points (bps) allowed for the swap.\n   * For example, if you want to allow a maximum slippage of 0.5%, you should specify `50` bps.\n   */\n  maxSlippageBPS?: number;\n} & (\n  | {\n      /**\n       * The amount of source token to be swapped.\n       * This is useful if you want to swap a certain amount of source token\n       *\n       * If you want a certain amount of destination token, you can provide `toAmount` instead of `fromAmount`.\n       */\n      fromAmount: string;\n      toAmount?: never;\n    }\n  | {\n      /**\n       * The amount of destination token to be received.\n       * This is useful if you want to get a certain amount of destination token.\n       *\n       * If you want to swap a certain amount of source token, you can provide `fromAmount` instead of `toAmount`.\n       */\n      toAmount: string;\n      fromAmount?: never;\n    }\n);\n\n/**\n * @buyCrypto\n */\ntype BuyWithCryptoQuoteRouteResponse = {\n  transactionRequest: QuoteTransactionRequest;\n  approval?: QuoteApprovalInfo;\n\n  fromAddress: string;\n  toAddress: string;\n\n  fromToken: QuoteTokenInfo;\n  toToken: QuoteTokenInfo;\n\n  fromAmountWei: string;\n  fromAmount: string;\n\n  toAmountMinWei: string;\n  toAmountMin: string;\n  toAmountWei: string;\n  toAmount: string;\n\n  paymentTokens: QuotePaymentToken[];\n  processingFees: QuotePaymentToken[];\n\n  estimated: {\n    fromAmountUSDCents: number;\n    toAmountMinUSDCents: number;\n    toAmountUSDCents: number;\n    slippageBPS: number;\n    feesUSDCents: number;\n    gasCostUSDCents?: number;\n    durationSeconds?: number;\n  };\n\n  maxSlippageBPS: number;\n  bridge?: string;\n};\n\n/**\n * @buyCrypto\n */\nexport type BuyWithCryptoQuote = {\n  transactionRequest: PrepareTransactionOptions;\n  approval?: PrepareTransactionOptions;\n\n  swapDetails: {\n    fromAddress: string;\n    toAddress: string;\n\n    fromToken: QuoteTokenInfo;\n    toToken: QuoteTokenInfo;\n\n    fromAmount: string;\n    fromAmountWei: string;\n\n    toAmountMinWei: string;\n    toAmountMin: string;\n    toAmount: string;\n    toAmountWei: string;\n\n    estimated: {\n      fromAmountUSDCents: number;\n      toAmountMinUSDCents: number;\n      toAmountUSDCents: number;\n      slippageBPS: number;\n      feesUSDCents: number;\n      gasCostUSDCents?: number;\n      durationSeconds?: number;\n    };\n\n    maxSlippageBPS: number;\n  };\n\n  paymentTokens: QuotePaymentToken[];\n  processingFees: QuotePaymentToken[];\n  client: ThirdwebClient;\n};\n\n/**\n * Get a quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) to buy any given token with crypto.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoQuoteParams)\n * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithCryptoQuote({\n *  client,\n *  fromAddress: \"0x...\", // wallet address\n *  fromChainId: 137, // chain id of the source token\n *  fromTokenAddress: \"0x...\", // token address of the source token\n *  fromAmount: \"10\", // amount of source token to swap\n *  // optionally, you can use `toAmount` instead if you only want a certain amount of destination token\n *  toChainId: 10, // chain id of the destination token\n *  toTokenAddress: \"0x...\", // token address of the destination token\n *  toAddress: \"0x...\", // optional: send the tokens to a different address\n *  maxSlippageBPS: 50, // optional: max 0.5% slippage\n * });\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithCryptoQuote(\n  params: GetBuyWithCryptoQuoteParams,\n): Promise<BuyWithCryptoQuote> {\n  try {\n    const clientFetch = getClientFetch(params.client);\n\n    const response = await clientFetch(getPayBuyWithCryptoQuoteEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: stringify({\n        fromAddress: params.fromAddress,\n        toAddress: params.toAddress,\n        fromChainId: params.fromChainId.toString(),\n        fromTokenAddress: params.fromTokenAddress,\n        toChainId: params.toChainId.toString(),\n        toTokenAddress: params.toTokenAddress,\n        fromAmount: params.fromAmount,\n        toAmount: params.toAmount,\n        maxSlippageBPS: params.maxSlippageBPS,\n        intentId: params.intentId,\n        purchaseData: params.purchaseData,\n      }),\n    });\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoQuoteRouteResponse = (await response.json())\n      .result;\n\n    const swapRoute: BuyWithCryptoQuote = {\n      transactionRequest: {\n        chain: getCachedChain(data.transactionRequest.chainId),\n        client: params.client,\n        data: data.transactionRequest.data as Hash,\n        to: data.transactionRequest.to,\n        value: BigInt(data.transactionRequest.value),\n        gas: BigInt(data.transactionRequest.gasLimit),\n        gasPrice: BigInt(data.transactionRequest.gasPrice),\n      },\n      approval: data.approval\n        ? approve({\n            contract: getContract({\n              client: params.client,\n              address: data.approval.tokenAddress,\n              chain: getCachedChain(data.approval.chainId),\n            }),\n            spender: data.approval?.spenderAddress,\n            amountWei: BigInt(data.approval.amountWei),\n          })\n        : undefined,\n      swapDetails: {\n        fromAddress: data.fromAddress,\n        toAddress: data.toAddress,\n\n        fromToken: data.fromToken,\n        toToken: data.toToken,\n\n        fromAmount: data.fromAmount,\n        fromAmountWei: data.fromAmountWei,\n\n        toAmountMinWei: data.toAmountMinWei,\n        toAmountMin: data.toAmountMin,\n\n        toAmountWei: data.toAmountWei,\n        toAmount: data.toAmount,\n        estimated: data.estimated,\n\n        maxSlippageBPS: data.maxSlippageBPS,\n      },\n\n      paymentTokens: data.paymentTokens,\n      processingFees: data.processingFees,\n      client: params.client,\n    };\n\n    return swapRoute;\n  } catch (error) {\n    console.error(\"Error getting buy with crypto quote\", error);\n    throw error;\n  }\n}\n", "import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport type {\n  PayOnChainTransactionDetails,\n  PayTokenInfo,\n} from \"../utils/commonTypes.js\";\nimport { getPayBuyWithCryptoStatusUrl } from \"../utils/definitions.js\";\n\n// TODO: add JSDoc description for all properties\n\n/**\n * @buyCrypto\n */\ntype BuyWithCryptoQuoteSummary = {\n  fromToken: PayTokenInfo;\n  toToken: PayTokenInfo;\n\n  fromAmountWei: string;\n  fromAmount: string;\n\n  toAmountWei: string;\n  toAmount: string;\n\n  toAmountMin: string;\n  toAmountMinWei: string;\n\n  estimated: {\n    fromAmountUSDCents: number;\n    toAmountMinUSDCents: number;\n    toAmountUSDCents: number;\n    slippageBPS: number;\n    feesUSDCents: number;\n    gasCostUSDCents?: number;\n    durationSeconds?: number;\n  }; // SAME AS QUOTE\n\n  createdAt: string; // ISO DATE\n};\n\n/**\n * @buyCrypto\n */\nexport type BuyWithCryptoTransaction = {\n  client: ThirdwebClient;\n  transactionHash: string;\n};\n\ntype BuyWithCryptoStatuses = \"NONE\" | \"PENDING\" | \"FAILED\" | \"COMPLETED\";\n\ntype BuyWithCryptoSubStatuses =\n  | \"NONE\"\n  | \"WAITING_BRIDGE\"\n  | \"REVERTED_ON_CHAIN\"\n  | \"SUCCESS\"\n  | \"PARTIAL_SUCCESS\"\n  | \"UNKNOWN_ERROR\"\n  | \"REFUNDED\";\n\ntype SwapType = \"SAME_CHAIN\" | \"CROSS_CHAIN\" | \"TRANSFER\";\n\n/**\n * The object returned by the [`getBuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoStatus) function to represent the status of a quoted transaction\n * @buyCrypto\n */\nexport type BuyWithCryptoStatus =\n  | {\n      status: \"NOT_FOUND\";\n    }\n  | {\n      quote: BuyWithCryptoQuoteSummary;\n      swapType: SwapType;\n      source?: PayOnChainTransactionDetails;\n      destination?: PayOnChainTransactionDetails;\n      status: BuyWithCryptoStatuses;\n      subStatus: BuyWithCryptoSubStatuses;\n      fromAddress: string;\n      toAddress: string;\n      failureMessage?: string;\n      bridge?: string;\n      purchaseData?: object;\n    };\n\nexport type ValidBuyWithCryptoStatus = Exclude<\n  BuyWithCryptoStatus,\n  { status: \"NOT_FOUND\" }\n>;\n\n/**\n * Gets the status of a buy with crypto transaction\n * @param buyWithCryptoTransaction - Object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)\n * @example\n *\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { getBuyWithCryptoStatus, getBuyWithCryptoQuote } from \"thirdweb/pay\";\n *\n * // get a quote between two tokens\n * const quote = await getBuyWithCryptoQuote(quoteParams);\n *\n * // if approval is required, send the approval transaction\n * if (quote.approval) {\n *  const txResult = await sendTransaction({\n *    transaction: quote.approval,\n *    account: account, // account from connected wallet\n *  });\n *\n *  await waitForReceipt(txResult);\n * }\n *\n * // send the quoted transaction\n * const swapTxResult = await sendTransaction({\n *    transaction: quote.transactionRequest,\n *    account: account, // account from connected wallet\n *  });\n *\n * await waitForReceipt(swapTxResult);\n *\n * // keep polling the status of the quoted transaction until it returns a success or failure status\n * const status = await getBuyWithCryptoStatus({\n *    client,\n *    transactionHash: swapTxResult.transactionHash,\n * }});\n * ```\n * @returns Object of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)\n * @buyCrypto\n */\nexport async function getBuyWithCryptoStatus(\n  buyWithCryptoTransaction: BuyWithCryptoTransaction,\n): Promise<BuyWithCryptoStatus> {\n  try {\n    if (!buyWithCryptoTransaction.transactionHash) {\n      throw new Error(\"Transaction hash is required\");\n    }\n    const queryString = new URLSearchParams({\n      transactionHash: buyWithCryptoTransaction.transactionHash,\n    }).toString();\n    const url = `${getPayBuyWithCryptoStatusUrl()}?${queryString}`;\n\n    const response = await getClientFetch(buyWithCryptoTransaction.client)(url);\n\n    // Assuming the response directly matches the BuyWithCryptoStatus interface\n    if (!response.ok) {\n      response.body?.cancel();\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoStatus = (await response.json()).result;\n    return data;\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n    throw new Error(`Fetch failed: ${error}`);\n  }\n}\n", "import type { Hash } from \"viem\";\nimport { getCachedChain } from \"../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { approve } from \"../../extensions/erc20/write/approve.js\";\nimport type { PrepareTransactionOptions } from \"../../transaction/prepare-transaction.js\";\nimport type { Address } from \"../../utils/address.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { stringify } from \"../../utils/json.js\";\nimport { getPayBuyWithCryptoTransferEndpoint } from \"../utils/definitions.js\";\nimport type {\n  QuoteApprovalInfo,\n  QuotePaymentToken,\n  QuoteTokenInfo,\n  QuoteTransactionRequest,\n} from \"./commonTypes.js\";\n\n/**\n * The parameters for [`getBuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoTransfer) function\n * It facilitates a token transfer.\n * @buyCrypto\n */\nexport type GetBuyWithCryptoTransferParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   */\n  client: ThirdwebClient;\n\n  /**\n   * The address of wallet that pays for the tokens.\n   */\n  fromAddress: string;\n\n  /**\n   * The address of the wallet where the tokens are sent\n   */\n  toAddress: string;\n\n  /**\n   * The chain id of the transfer token.\n   */\n  chainId: number;\n\n  /**\n   * The token address of the transfer token.\n   */\n  tokenAddress: string;\n\n  /**\n   * The amount of token to be transferred.\n   */\n  amount: string;\n\n  /**\n   * Extra details to store with the purchase.\n   *\n   * This details will be stored with the purchase and can be retrieved later via the status API or Webhook\n   */\n  purchaseData?: object;\n};\n\n/**\n * @buyCrypto\n */\ntype BuyWithCryptoTransferResponse = {\n  quoteId: string;\n  transactionRequest: QuoteTransactionRequest;\n  approval?: QuoteApprovalInfo;\n  fromAddress: string;\n  toAddress: string;\n  token: QuoteTokenInfo;\n  paymentToken: QuotePaymentToken;\n  processingFee: QuotePaymentToken;\n  estimatedGasCostUSDCents: number;\n};\n\n/**\n * @buyCrypto\n */\nexport type BuyWithCryptoTransfer = {\n  transactionRequest: PrepareTransactionOptions;\n  approval?: PrepareTransactionOptions;\n  fromAddress: string;\n  toAddress: string;\n  paymentToken: QuotePaymentToken;\n  processingFee: QuotePaymentToken;\n  estimatedGasCostUSDCents: number;\n  client: ThirdwebClient;\n};\n\n/**\n * Get a quote of type [`BuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransfer) to facilitate a token transfer transaction.\n * Using this instead of a native transfer allows you to receive status and webhooks about successful or failed payments.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoTransferParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoTransferParams)\n * @returns Object of type [`BuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransfer) which contains the information about the transfer\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoTransfer } from \"thirdweb/pay\";\n *\n * const transfer = await getBuyWithCryptoTransfer({\n *  client,\n *  fromAddress: \"0x...\", // wallet address\n *  toAddress: \"0x...\", // recipient address - likely to be your wallet\n *  chainId: 10, // chain id of the token\n *  tokenAddress: \"0x...\", // address of the token\n *  amount: \"10\", // amount of token to transfer\n *  purchaseData: {  // any metadata for you to attribute this purchase\n *    \"customerId\": \"yourId\"\n *  }\n * });\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithCryptoTransfer(\n  params: GetBuyWithCryptoTransferParams,\n): Promise<BuyWithCryptoTransfer> {\n  try {\n    const clientFetch = getClientFetch(params.client);\n\n    const response = await clientFetch(getPayBuyWithCryptoTransferEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: stringify({\n        fromAddress: params.fromAddress,\n        toAddress: params.toAddress,\n        chainId: params.chainId,\n        tokenAddress: params.tokenAddress,\n        amount: params.amount,\n        purchaseData: params.purchaseData,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoTransferResponse = (await response.json()).result;\n\n    const transfer: BuyWithCryptoTransfer = {\n      transactionRequest: {\n        chain: getCachedChain(data.transactionRequest.chainId),\n        client: params.client,\n        data: data.transactionRequest.data as Hash,\n        to: data.transactionRequest.to as Address,\n        value: BigInt(data.transactionRequest.value),\n        gas: BigInt(data.transactionRequest.gasLimit),\n      },\n      approval: data.approval\n        ? approve({\n            contract: getContract({\n              client: params.client,\n              address: data.approval.tokenAddress,\n              chain: getCachedChain(data.approval.chainId),\n            }),\n            spender: data.approval.spenderAddress as Address,\n            amountWei: BigInt(data.approval.amountWei),\n          })\n        : undefined,\n      fromAddress: data.fromAddress,\n      toAddress: data.toAddress,\n      paymentToken: data.paymentToken,\n      processingFee: data.processingFee,\n      estimatedGasCostUSDCents: data.estimatedGasCostUSDCents,\n      client: params.client,\n    };\n\n    return transfer;\n  } catch (error) {\n    console.error(\"Error getting buy with crypto transfer\", error);\n    throw error;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
